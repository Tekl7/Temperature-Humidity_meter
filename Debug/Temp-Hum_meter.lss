
Temp-Hum_meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001f32  00001fc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  00800062  00800062  00001fc8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ff8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000054fa  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013a9  00000000  00000000  000078be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002557  00000000  00000000  00008c67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b8c  00000000  00000000  0000b1c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001519  00000000  00000000  0000bd4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000048fa  00000000  00000000  0000d265  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000400  00000000  00000000  00011b5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b5 c1       	rjmp	.+874    	; 0x36c <__ctors_end>
       2:	d9 c1       	rjmp	.+946    	; 0x3b6 <__bad_interrupt>
       4:	d8 c1       	rjmp	.+944    	; 0x3b6 <__bad_interrupt>
       6:	d7 c1       	rjmp	.+942    	; 0x3b6 <__bad_interrupt>
       8:	d6 c1       	rjmp	.+940    	; 0x3b6 <__bad_interrupt>
       a:	d5 c1       	rjmp	.+938    	; 0x3b6 <__bad_interrupt>
       c:	d4 c1       	rjmp	.+936    	; 0x3b6 <__bad_interrupt>
       e:	d3 c1       	rjmp	.+934    	; 0x3b6 <__bad_interrupt>
      10:	d2 c1       	rjmp	.+932    	; 0x3b6 <__bad_interrupt>
      12:	d1 c1       	rjmp	.+930    	; 0x3b6 <__bad_interrupt>
      14:	d0 c1       	rjmp	.+928    	; 0x3b6 <__bad_interrupt>
      16:	cf c1       	rjmp	.+926    	; 0x3b6 <__bad_interrupt>
      18:	ce c1       	rjmp	.+924    	; 0x3b6 <__bad_interrupt>
      1a:	62 ca       	rjmp	.-2876   	; 0xfffff4e0 <__eeprom_end+0xff7ef4e0>
      1c:	a9 ca       	rjmp	.-2734   	; 0xfffff570 <__eeprom_end+0xff7ef570>
      1e:	07 63       	ori	r16, 0x37	; 55
      20:	42 36       	cpi	r20, 0x62	; 98
      22:	b7 9b       	sbis	0x16, 7	; 22
      24:	d8 a7       	std	Y+40, r29	; 0x28
      26:	1a 39       	cpi	r17, 0x9A	; 154
      28:	68 56       	subi	r22, 0x68	; 104
      2a:	18 ae       	std	Y+56, r1	; 0x38
      2c:	ba ab       	std	Y+50, r27	; 0x32
      2e:	55 8c       	ldd	r5, Z+29	; 0x1d
      30:	1d 3c       	cpi	r17, 0xCD	; 205
      32:	b7 cc       	rjmp	.-1682   	; 0xfffff9a2 <__eeprom_end+0xff7ef9a2>
      34:	57 63       	ori	r21, 0x37	; 55
      36:	bd 6d       	ori	r27, 0xDD	; 221
      38:	ed fd       	.word	0xfded	; ????
      3a:	75 3e       	cpi	r23, 0xE5	; 229
      3c:	f6 17       	cp	r31, r22
      3e:	72 31       	cpi	r23, 0x12	; 18
      40:	bf 00       	.word	0x00bf	; ????
      42:	00 00       	nop
      44:	80 3f       	cpi	r24, 0xF0	; 240
      46:	08 00       	.word	0x0008	; ????
      48:	00 00       	nop
      4a:	be 92       	st	-X, r11
      4c:	24 49       	sbci	r18, 0x94	; 148
      4e:	12 3e       	cpi	r17, 0xE2	; 226
      50:	ab aa       	std	Y+51, r10	; 0x33
      52:	aa 2a       	or	r10, r26
      54:	be cd       	rjmp	.-1156   	; 0xfffffbd2 <__eeprom_end+0xff7efbd2>
      56:	cc cc       	rjmp	.-1640   	; 0xfffff9f0 <__eeprom_end+0xff7ef9f0>
      58:	4c 3e       	cpi	r20, 0xEC	; 236
      5a:	00 00       	nop
      5c:	00 80       	ld	r0, Z
      5e:	be ab       	std	Y+54, r27	; 0x36
      60:	aa aa       	std	Y+50, r10	; 0x32
      62:	aa 3e       	cpi	r26, 0xEA	; 234
      64:	00 00       	nop
      66:	00 00       	nop
      68:	bf 00       	.word	0x00bf	; ????
      6a:	00 00       	nop
      6c:	80 3f       	cpi	r24, 0xF0	; 240
      6e:	00 00       	nop
      70:	00 00       	nop
      72:	00 08       	sbc	r0, r0
      74:	41 78       	andi	r20, 0x81	; 129
      76:	d3 bb       	out	0x13, r29	; 19
      78:	43 87       	std	Z+11, r20	; 0x0b
      7a:	d1 13       	cpse	r29, r17
      7c:	3d 19       	sub	r19, r13
      7e:	0e 3c       	cpi	r16, 0xCE	; 206
      80:	c3 bd       	out	0x23, r28	; 35
      82:	42 82       	std	Z+2, r4	; 0x02
      84:	ad 2b       	or	r26, r29
      86:	3e 68       	ori	r19, 0x8E	; 142
      88:	ec 82       	std	Y+4, r14	; 0x04
      8a:	76 be       	out	0x36, r7	; 54
      8c:	d9 8f       	std	Y+25, r29	; 0x19
      8e:	e1 a9       	ldd	r30, Z+49	; 0x31
      90:	3e 4c       	sbci	r19, 0xCE	; 206
      92:	80 ef       	ldi	r24, 0xF0	; 240
      94:	ff be       	out	0x3f, r15	; 63
      96:	01 c4       	rjmp	.+2050   	; 0x89a <GLCD_PrintString+0xa>
      98:	ff 7f       	andi	r31, 0xFF	; 255
      9a:	3f 00       	.word	0x003f	; ????
      9c:	00 00       	nop
	...

000000a0 <__trampolines_end>:
      a0:	08 00       	.word	0x0008	; ????
	...
      be:	00 05       	cpc	r16, r0
      c0:	80 00       	.word	0x0080	; ????
      c2:	80 00       	.word	0x0080	; ????
      c4:	80 00       	.word	0x0080	; ????
      c6:	80 00       	.word	0x0080	; ????
      c8:	80 00       	.word	0x0080	; ????
	...
      de:	03 00       	.word	0x0003	; ????
      e0:	00 00       	nop
      e2:	00 00       	nop
      e4:	18 00       	.word	0x0018	; ????
	...
      fa:	00 00       	nop
      fc:	00 03       	mulsu	r16, r16
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	30 18       	sub	r3, r0
	...
     11c:	0f 00       	.word	0x000f	; ????
     11e:	00 7c       	andi	r16, 0xC0	; 192
     120:	00 82       	st	Z, r0
     122:	00 82       	st	Z, r0
     124:	00 82       	st	Z, r0
     126:	10 82       	st	Z, r1
     128:	0c 7c       	andi	r16, 0xCC	; 204
     12a:	02 80       	ldd	r0, Z+2	; 0x02
     12c:	01 60       	ori	r16, 0x01	; 1
     12e:	00 90 0f 4c 	lds	r0, 0x4C0F	; 0x804c0f <__bss_end+0x4b75>
     132:	10 42       	sbci	r17, 0x20	; 32
     134:	10 40       	sbci	r17, 0x00	; 0
     136:	10 40       	sbci	r17, 0x00	; 0
     138:	10 80       	ld	r1, Z
     13a:	0f 09       	sbc	r16, r15
     13c:	f0 03       	fmuls	r23, r16
     13e:	0c 0c       	add	r0, r12
     140:	04 08       	sbc	r0, r4
     142:	02 10       	cpse	r0, r2
     144:	02 10       	cpse	r0, r2
     146:	02 10       	cpse	r0, r2
     148:	02 10       	cpse	r0, r2
     14a:	02 10       	cpse	r0, r2
     14c:	04 08       	sbc	r0, r4
	...
     15a:	08 fe       	.word	0xfe08	; ????
     15c:	1f 42       	sbci	r17, 0x2F	; 47
     15e:	10 42       	sbci	r17, 0x20	; 32
     160:	10 42       	sbci	r17, 0x20	; 32
     162:	10 42       	sbci	r17, 0x20	; 32
     164:	10 42       	sbci	r17, 0x20	; 32
     166:	10 42       	sbci	r17, 0x20	; 32
     168:	10 42       	sbci	r17, 0x20	; 32
     16a:	10 00       	.word	0x0010	; ????
	...
     178:	00 0a       	sbc	r0, r16
     17a:	fe 1f       	adc	r31, r30
     17c:	40 00       	.word	0x0040	; ????
     17e:	40 00       	.word	0x0040	; ????
     180:	40 00       	.word	0x0040	; ????
     182:	40 00       	.word	0x0040	; ????
     184:	40 00       	.word	0x0040	; ????
     186:	40 00       	.word	0x0040	; ????
     188:	40 00       	.word	0x0040	; ????
     18a:	40 00       	.word	0x0040	; ????
     18c:	fe 1f       	adc	r31, r30
	...
     196:	00 00       	nop
     198:	0b fe       	.word	0xfe0b	; ????
     19a:	1f 06       	cpc	r1, r31
     19c:	00 18       	sub	r0, r0
     19e:	00 60       	ori	r16, 0x00	; 0
     1a0:	00 80       	ld	r0, Z
     1a2:	01 00       	.word	0x0001	; ????
     1a4:	02 80       	ldd	r0, Z+2	; 0x02
     1a6:	01 60       	ori	r16, 0x01	; 1
     1a8:	00 18       	sub	r0, r0
     1aa:	00 06       	cpc	r0, r16
     1ac:	00 fe       	sbrs	r0, 0
     1ae:	1f 00       	.word	0x001f	; ????
     1b0:	00 00       	nop
     1b2:	00 00       	nop
     1b4:	00 00       	nop
     1b6:	00 08       	sbc	r0, r0
     1b8:	fe 1f       	adc	r31, r30
     1ba:	02 01       	movw	r0, r4
     1bc:	02 01       	movw	r0, r4
     1be:	02 01       	movw	r0, r4
     1c0:	02 01       	movw	r0, r4
     1c2:	02 01       	movw	r0, r4
     1c4:	84 00       	.word	0x0084	; ????
     1c6:	78 00       	.word	0x0078	; ????
	...
     1d4:	00 00       	nop
     1d6:	09 fe       	.word	0xfe09	; ????
     1d8:	1f 82       	std	Y+7, r1	; 0x07
     1da:	00 82       	st	Z, r0
     1dc:	00 82       	st	Z, r0
     1de:	00 82       	st	Z, r0
     1e0:	01 42       	sbci	r16, 0x21	; 33
     1e2:	02 3c       	cpi	r16, 0xC2	; 194
     1e4:	04 00       	.word	0x0004	; ????
     1e6:	08 00       	.word	0x0008	; ????
     1e8:	10 00       	.word	0x0010	; ????
	...
     1f2:	00 00       	nop
     1f4:	00 09       	sbc	r16, r0
     1f6:	02 00       	.word	0x0002	; ????
     1f8:	02 00       	.word	0x0002	; ????
     1fa:	02 00       	.word	0x0002	; ????
     1fc:	02 00       	.word	0x0002	; ????
     1fe:	fe 1f       	adc	r31, r30
     200:	02 00       	.word	0x0002	; ????
     202:	02 00       	.word	0x0002	; ????
     204:	02 00       	.word	0x0002	; ????
     206:	02 00       	.word	0x0002	; ????
	...
     214:	0a fe       	.word	0xfe0a	; ????
     216:	07 00       	.word	0x0007	; ????
     218:	08 00       	.word	0x0008	; ????
     21a:	10 00       	.word	0x0010	; ????
     21c:	10 00       	.word	0x0010	; ????
     21e:	10 00       	.word	0x0010	; ????
     220:	10 00       	.word	0x0010	; ????
     222:	10 00       	.word	0x0010	; ????
     224:	10 00       	.word	0x0010	; ????
     226:	08 fe       	.word	0xfe08	; ????
     228:	07 00       	.word	0x0007	; ????
	...
     232:	00 08       	sbc	r0, r0
     234:	f8 07       	cpc	r31, r24
     236:	04 08       	sbc	r0, r4
     238:	02 10       	cpse	r0, r2
     23a:	02 10       	cpse	r0, r2
     23c:	02 10       	cpse	r0, r2
     23e:	02 10       	cpse	r0, r2
     240:	04 08       	sbc	r0, r4
     242:	f8 07       	cpc	r31, r24
	...
     250:	00 00       	nop
     252:	07 00       	.word	0x0007	; ????
     254:	00 00       	nop
     256:	00 08       	sbc	r0, r0
     258:	10 08       	sbc	r1, r0
     25a:	10 fe       	sbrs	r1, 0
     25c:	1f 00       	.word	0x001f	; ????
     25e:	10 00       	.word	0x0010	; ????
     260:	10 00       	.word	0x0010	; ????
	...
     26e:	00 00       	nop
     270:	00 08       	sbc	r0, r0
     272:	00 00       	nop
     274:	04 18       	sub	r0, r4
     276:	02 14       	cp	r0, r2
     278:	02 12       	cpse	r0, r18
     27a:	02 11       	cpse	r16, r2
     27c:	82 10       	cpse	r8, r2
     27e:	44 10       	cpse	r4, r4
     280:	38 10       	cpse	r3, r8
	...
     28e:	00 00       	nop
     290:	08 00       	.word	0x0008	; ????
     292:	00 04       	cpc	r0, r0
     294:	08 02       	muls	r16, r24
     296:	10 42       	sbci	r17, 0x20	; 32
     298:	10 42       	sbci	r17, 0x20	; 32
     29a:	10 42       	sbci	r17, 0x20	; 32
     29c:	10 a4       	ldd	r1, Z+40	; 0x28
     29e:	08 18       	sub	r0, r8
     2a0:	07 00       	.word	0x0007	; ????
	...
     2ae:	00 08       	sbc	r0, r0
     2b0:	80 01       	movw	r16, r0
     2b2:	40 01       	movw	r8, r0
     2b4:	20 01       	movw	r4, r0
     2b6:	10 01       	movw	r2, r0
     2b8:	08 01       	movw	r0, r16
     2ba:	04 01       	movw	r0, r8
     2bc:	fe 1f       	adc	r31, r30
     2be:	00 01       	movw	r0, r0
	...
     2cc:	00 00       	nop
     2ce:	08 00       	.word	0x0008	; ????
     2d0:	00 3e       	cpi	r16, 0xE0	; 224
     2d2:	08 22       	and	r0, r24
     2d4:	10 22       	and	r1, r16
     2d6:	10 22       	and	r1, r16
     2d8:	10 22       	and	r1, r16
     2da:	10 42       	sbci	r17, 0x20	; 32
     2dc:	08 82       	st	Y, r0
     2de:	07 00       	.word	0x0007	; ????
	...
     2ec:	00 08       	sbc	r0, r0
     2ee:	f0 07       	cpc	r31, r16
     2f0:	48 08       	sbc	r4, r8
     2f2:	24 10       	cpse	r2, r4
     2f4:	22 10       	cpse	r2, r2
     2f6:	22 10       	cpse	r2, r2
     2f8:	22 10       	cpse	r2, r2
     2fa:	42 08       	sbc	r4, r2
     2fc:	80 07       	cpc	r24, r16
	...
     30a:	00 00       	nop
     30c:	08 00       	.word	0x0008	; ????
     30e:	00 02       	muls	r16, r16
     310:	00 02       	muls	r16, r16
     312:	18 02       	muls	r17, r24
     314:	06 82       	std	Z+6, r0	; 0x06
     316:	01 62       	ori	r16, 0x21	; 33
     318:	00 1a       	sub	r0, r16
     31a:	00 06       	cpc	r0, r16
	...
     328:	00 00       	nop
     32a:	00 08       	sbc	r0, r0
     32c:	18 07       	cpc	r17, r24
     32e:	a4 08       	sbc	r10, r4
     330:	42 10       	cpse	r4, r2
     332:	42 10       	cpse	r4, r2
     334:	42 10       	cpse	r4, r2
     336:	42 10       	cpse	r4, r2
     338:	a4 08       	sbc	r10, r4
     33a:	18 07       	cpc	r17, r24
	...
     348:	00 00       	nop
     34a:	08 78       	andi	r16, 0x88	; 136
     34c:	00 84       	ldd	r0, Z+8	; 0x08
     34e:	10 02       	muls	r17, r16
     350:	11 02       	muls	r17, r17
     352:	11 02       	muls	r17, r17
     354:	11 02       	muls	r17, r17
     356:	09 84       	ldd	r0, Y+9	; 0x09
     358:	04 f8       	bld	r0, 4
     35a:	03 00       	.word	0x0003	; ????
	...

0000036a <__ctors_start>:
     36a:	f3 0b       	sbc	r31, r19

0000036c <__ctors_end>:
     36c:	11 24       	eor	r1, r1
     36e:	1f be       	out	0x3f, r1	; 63
     370:	cf e5       	ldi	r28, 0x5F	; 95
     372:	d2 e0       	ldi	r29, 0x02	; 2
     374:	de bf       	out	0x3e, r29	; 62
     376:	cd bf       	out	0x3d, r28	; 61

00000378 <__do_copy_data>:
     378:	10 e0       	ldi	r17, 0x00	; 0
     37a:	a0 e6       	ldi	r26, 0x60	; 96
     37c:	b0 e0       	ldi	r27, 0x00	; 0
     37e:	e2 e3       	ldi	r30, 0x32	; 50
     380:	ff e1       	ldi	r31, 0x1F	; 31
     382:	02 c0       	rjmp	.+4      	; 0x388 <__do_copy_data+0x10>
     384:	05 90       	lpm	r0, Z+
     386:	0d 92       	st	X+, r0
     388:	a2 36       	cpi	r26, 0x62	; 98
     38a:	b1 07       	cpc	r27, r17
     38c:	d9 f7       	brne	.-10     	; 0x384 <__do_copy_data+0xc>

0000038e <__do_clear_bss>:
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	a2 e6       	ldi	r26, 0x62	; 98
     392:	b0 e0       	ldi	r27, 0x00	; 0
     394:	01 c0       	rjmp	.+2      	; 0x398 <.do_clear_bss_start>

00000396 <.do_clear_bss_loop>:
     396:	1d 92       	st	X+, r1

00000398 <.do_clear_bss_start>:
     398:	aa 39       	cpi	r26, 0x9A	; 154
     39a:	b2 07       	cpc	r27, r18
     39c:	e1 f7       	brne	.-8      	; 0x396 <.do_clear_bss_loop>

0000039e <__do_global_ctors>:
     39e:	11 e0       	ldi	r17, 0x01	; 1
     3a0:	c6 eb       	ldi	r28, 0xB6	; 182
     3a2:	d1 e0       	ldi	r29, 0x01	; 1
     3a4:	03 c0       	rjmp	.+6      	; 0x3ac <__do_global_ctors+0xe>
     3a6:	21 97       	sbiw	r28, 0x01	; 1
     3a8:	fe 01       	movw	r30, r28
     3aa:	bb dd       	rcall	.-1162   	; 0xffffff22 <__eeprom_end+0xff7eff22>
     3ac:	c5 3b       	cpi	r28, 0xB5	; 181
     3ae:	d1 07       	cpc	r29, r17
     3b0:	d1 f7       	brne	.-12     	; 0x3a6 <__do_global_ctors+0x8>
     3b2:	c9 d9       	rcall	.-3182   	; 0xfffff746 <__eeprom_end+0xff7ef746>
     3b4:	bc cd       	rjmp	.-1160   	; 0xffffff2e <__eeprom_end+0xff7eff2e>

000003b6 <__bad_interrupt>:
     3b6:	24 ce       	rjmp	.-952    	; 0x0 <__vectors>

000003b8 <GLCD_Send>:

	while (*Text)
		width += GLCD_GetWidthChar(*Text++);

	return width;
}
     3b8:	ef 92       	push	r14
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	0d b7       	in	r16, 0x3d	; 61
     3ca:	1e b7       	in	r17, 0x3e	; 62
     3cc:	24 2f       	mov	r18, r20
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	2e 5f       	subi	r18, 0xFE	; 254
     3d2:	3f 4f       	sbci	r19, 0xFF	; 255
     3d4:	ed b7       	in	r30, 0x3d	; 61
     3d6:	fe b7       	in	r31, 0x3e	; 62
     3d8:	e2 1b       	sub	r30, r18
     3da:	f3 0b       	sbc	r31, r19
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	fe bf       	out	0x3e, r31	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	ed bf       	out	0x3d, r30	; 61
     3e6:	2d b7       	in	r18, 0x3d	; 61
     3e8:	3e b7       	in	r19, 0x3e	; 62
     3ea:	2f 5f       	subi	r18, 0xFF	; 255
     3ec:	3f 4f       	sbci	r19, 0xFF	; 255
     3ee:	79 01       	movw	r14, r18
     3f0:	98 e7       	ldi	r25, 0x78	; 120
     3f2:	91 83       	std	Z+1, r25	; 0x01
     3f4:	f9 01       	movw	r30, r18
     3f6:	81 83       	std	Z+1, r24	; 0x01
     3f8:	44 23       	and	r20, r20
     3fa:	79 f0       	breq	.+30     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3fc:	a6 2f       	mov	r26, r22
     3fe:	b7 2f       	mov	r27, r23
     400:	32 96       	adiw	r30, 0x02	; 2
     402:	2f ef       	ldi	r18, 0xFF	; 255
     404:	24 0f       	add	r18, r20
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	2d 5f       	subi	r18, 0xFD	; 253
     40a:	3f 4f       	sbci	r19, 0xFF	; 255
     40c:	2e 0d       	add	r18, r14
     40e:	3f 1d       	adc	r19, r15
     410:	8d 91       	ld	r24, X+
     412:	81 93       	st	Z+, r24
     414:	e2 17       	cp	r30, r18
     416:	f3 07       	cpc	r31, r19
     418:	d9 f7       	brne	.-10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     41a:	62 e0       	ldi	r22, 0x02	; 2
     41c:	64 0f       	add	r22, r20
     41e:	c7 01       	movw	r24, r14
     420:	2c d8       	rcall	.-4008   	; 0xfffff47a <__eeprom_end+0xff7ef47a>
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	f8 94       	cli
     426:	1e bf       	out	0x3e, r17	; 62
     428:	0f be       	out	0x3f, r0	; 63
     42a:	0d bf       	out	0x3d, r16	; 61
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	ff 90       	pop	r15
     436:	ef 90       	pop	r14
     438:	08 95       	ret

0000043a <GLCD_SendCommand>:
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	1f 92       	push	r1
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	89 83       	std	Y+1, r24	; 0x01
     446:	41 e0       	ldi	r20, 0x01	; 1
     448:	be 01       	movw	r22, r28
     44a:	6f 5f       	subi	r22, 0xFF	; 255
     44c:	7f 4f       	sbci	r23, 0xFF	; 255
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	b3 df       	rcall	.-154    	; 0x3b8 <GLCD_Send>
     452:	0f 90       	pop	r0
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	08 95       	ret

0000045a <GLCD_GotoX>:
     45a:	cf 93       	push	r28
     45c:	88 23       	and	r24, r24
     45e:	4c f0       	brlt	.+18     	; 0x472 <GLCD_GotoX+0x18>
     460:	c8 2f       	mov	r28, r24
     462:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__GLCD>
     466:	81 e2       	ldi	r24, 0x21	; 33
     468:	e8 df       	rcall	.-48     	; 0x43a <GLCD_SendCommand>
     46a:	8c 2f       	mov	r24, r28
     46c:	e6 df       	rcall	.-52     	; 0x43a <GLCD_SendCommand>
     46e:	8f e7       	ldi	r24, 0x7F	; 127
     470:	e4 df       	rcall	.-56     	; 0x43a <GLCD_SendCommand>
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <GLCD_GotoY>:
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	80 34       	cpi	r24, 0x40	; 64
     47c:	60 f4       	brcc	.+24     	; 0x496 <GLCD_GotoY+0x20>
     47e:	c1 e7       	ldi	r28, 0x71	; 113
     480:	d0 e0       	ldi	r29, 0x00	; 0
     482:	89 83       	std	Y+1, r24	; 0x01
     484:	82 e2       	ldi	r24, 0x22	; 34
     486:	d9 df       	rcall	.-78     	; 0x43a <GLCD_SendCommand>
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	86 95       	lsr	r24
     48c:	86 95       	lsr	r24
     48e:	86 95       	lsr	r24
     490:	d4 df       	rcall	.-88     	; 0x43a <GLCD_SendCommand>
     492:	87 e0       	ldi	r24, 0x07	; 7
     494:	d2 df       	rcall	.-92     	; 0x43a <GLCD_SendCommand>
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	08 95       	ret

0000049c <GLCD_GotoXY>:
     49c:	cf 93       	push	r28
     49e:	c6 2f       	mov	r28, r22
     4a0:	dc df       	rcall	.-72     	; 0x45a <GLCD_GotoX>
     4a2:	8c 2f       	mov	r24, r28
     4a4:	e8 df       	rcall	.-48     	; 0x476 <GLCD_GotoY>
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <GLCD_GotoLine>:
     4aa:	cf 93       	push	r28
     4ac:	88 30       	cpi	r24, 0x08	; 8
     4ae:	60 f4       	brcc	.+24     	; 0x4c8 <GLCD_GotoLine+0x1e>
     4b0:	c8 2f       	mov	r28, r24
     4b2:	88 0f       	add	r24, r24
     4b4:	88 0f       	add	r24, r24
     4b6:	88 0f       	add	r24, r24
     4b8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__GLCD+0x1>
     4bc:	82 e2       	ldi	r24, 0x22	; 34
     4be:	bd df       	rcall	.-134    	; 0x43a <GLCD_SendCommand>
     4c0:	8c 2f       	mov	r24, r28
     4c2:	bb df       	rcall	.-138    	; 0x43a <GLCD_SendCommand>
     4c4:	87 e0       	ldi	r24, 0x07	; 7
     4c6:	b9 df       	rcall	.-142    	; 0x43a <GLCD_SendCommand>
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <GLCD_FillScreen>:
     4cc:	ef 92       	push	r14
     4ce:	ff 92       	push	r15
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
     4dc:	c0 58       	subi	r28, 0x80	; 128
     4de:	d1 09       	sbc	r29, r1
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	de bf       	out	0x3e, r29	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	cd bf       	out	0x3d, r28	; 61
     4ea:	f8 2e       	mov	r15, r24
     4ec:	60 e0       	ldi	r22, 0x00	; 0
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	d5 df       	rcall	.-86     	; 0x49c <GLCD_GotoXY>
     4f2:	68 94       	set
     4f4:	ee 24       	eor	r14, r14
     4f6:	e3 f8       	bld	r14, 3
     4f8:	8e 01       	movw	r16, r28
     4fa:	0f 57       	subi	r16, 0x7F	; 127
     4fc:	1f 4f       	sbci	r17, 0xFF	; 255
     4fe:	0d c0       	rjmp	.+26     	; 0x51a <GLCD_FillScreen+0x4e>
     500:	f1 92       	st	Z+, r15
     502:	0e 17       	cp	r16, r30
     504:	1f 07       	cpc	r17, r31
     506:	e1 f7       	brne	.-8      	; 0x500 <GLCD_FillScreen+0x34>
     508:	40 e8       	ldi	r20, 0x80	; 128
     50a:	be 01       	movw	r22, r28
     50c:	6f 5f       	subi	r22, 0xFF	; 255
     50e:	7f 4f       	sbci	r23, 0xFF	; 255
     510:	80 e4       	ldi	r24, 0x40	; 64
     512:	52 df       	rcall	.-348    	; 0x3b8 <GLCD_Send>
     514:	ea 94       	dec	r14
     516:	ee 20       	and	r14, r14
     518:	19 f0       	breq	.+6      	; 0x520 <GLCD_FillScreen+0x54>
     51a:	fe 01       	movw	r30, r28
     51c:	31 96       	adiw	r30, 0x01	; 1
     51e:	f0 cf       	rjmp	.-32     	; 0x500 <GLCD_FillScreen+0x34>
     520:	c0 58       	subi	r28, 0x80	; 128
     522:	df 4f       	sbci	r29, 0xFF	; 255
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	f8 94       	cli
     528:	de bf       	out	0x3e, r29	; 62
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	1f 91       	pop	r17
     534:	0f 91       	pop	r16
     536:	ff 90       	pop	r15
     538:	ef 90       	pop	r14
     53a:	08 95       	ret

0000053c <GLCD_Clear>:
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	c6 df       	rcall	.-116    	; 0x4cc <GLCD_FillScreen>
     540:	08 95       	ret

00000542 <GLCD_Setup>:
     542:	f4 d6       	rcall	.+3560   	; 0x132c <USI_TWI_Master_Initialise>
     544:	8e ea       	ldi	r24, 0xAE	; 174
     546:	79 df       	rcall	.-270    	; 0x43a <GLCD_SendCommand>
     548:	85 ed       	ldi	r24, 0xD5	; 213
     54a:	77 df       	rcall	.-274    	; 0x43a <GLCD_SendCommand>
     54c:	80 ef       	ldi	r24, 0xF0	; 240
     54e:	75 df       	rcall	.-278    	; 0x43a <GLCD_SendCommand>
     550:	88 ea       	ldi	r24, 0xA8	; 168
     552:	73 df       	rcall	.-282    	; 0x43a <GLCD_SendCommand>
     554:	8f e3       	ldi	r24, 0x3F	; 63
     556:	71 df       	rcall	.-286    	; 0x43a <GLCD_SendCommand>
     558:	83 ed       	ldi	r24, 0xD3	; 211
     55a:	6f df       	rcall	.-290    	; 0x43a <GLCD_SendCommand>
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	6d df       	rcall	.-294    	; 0x43a <GLCD_SendCommand>
     560:	8d e8       	ldi	r24, 0x8D	; 141
     562:	6b df       	rcall	.-298    	; 0x43a <GLCD_SendCommand>
     564:	84 e1       	ldi	r24, 0x14	; 20
     566:	69 df       	rcall	.-302    	; 0x43a <GLCD_SendCommand>
     568:	80 e4       	ldi	r24, 0x40	; 64
     56a:	67 df       	rcall	.-306    	; 0x43a <GLCD_SendCommand>
     56c:	80 e2       	ldi	r24, 0x20	; 32
     56e:	65 df       	rcall	.-310    	; 0x43a <GLCD_SendCommand>
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	63 df       	rcall	.-314    	; 0x43a <GLCD_SendCommand>
     574:	81 ea       	ldi	r24, 0xA1	; 161
     576:	61 df       	rcall	.-318    	; 0x43a <GLCD_SendCommand>
     578:	88 ec       	ldi	r24, 0xC8	; 200
     57a:	5f df       	rcall	.-322    	; 0x43a <GLCD_SendCommand>
     57c:	8a ed       	ldi	r24, 0xDA	; 218
     57e:	5d df       	rcall	.-326    	; 0x43a <GLCD_SendCommand>
     580:	82 e1       	ldi	r24, 0x12	; 18
     582:	5b df       	rcall	.-330    	; 0x43a <GLCD_SendCommand>
     584:	81 e8       	ldi	r24, 0x81	; 129
     586:	59 df       	rcall	.-334    	; 0x43a <GLCD_SendCommand>
     588:	8f ef       	ldi	r24, 0xFF	; 255
     58a:	57 df       	rcall	.-338    	; 0x43a <GLCD_SendCommand>
     58c:	89 ed       	ldi	r24, 0xD9	; 217
     58e:	55 df       	rcall	.-342    	; 0x43a <GLCD_SendCommand>
     590:	81 ef       	ldi	r24, 0xF1	; 241
     592:	53 df       	rcall	.-346    	; 0x43a <GLCD_SendCommand>
     594:	8b ed       	ldi	r24, 0xDB	; 219
     596:	51 df       	rcall	.-350    	; 0x43a <GLCD_SendCommand>
     598:	80 e2       	ldi	r24, 0x20	; 32
     59a:	4f df       	rcall	.-354    	; 0x43a <GLCD_SendCommand>
     59c:	84 ea       	ldi	r24, 0xA4	; 164
     59e:	4d df       	rcall	.-358    	; 0x43a <GLCD_SendCommand>
     5a0:	86 ea       	ldi	r24, 0xA6	; 166
     5a2:	4b df       	rcall	.-362    	; 0x43a <GLCD_SendCommand>
     5a4:	8e e2       	ldi	r24, 0x2E	; 46
     5a6:	49 df       	rcall	.-366    	; 0x43a <GLCD_SendCommand>
     5a8:	8f ea       	ldi	r24, 0xAF	; 175
     5aa:	47 df       	rcall	.-370    	; 0x43a <GLCD_SendCommand>
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	75 df       	rcall	.-278    	; 0x49c <GLCD_GotoXY>
     5b2:	e1 e7       	ldi	r30, 0x71	; 113
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	86 ea       	ldi	r24, 0xA6	; 166
     5b8:	82 83       	std	Z+2, r24	; 0x02
     5ba:	17 82       	std	Z+7, r1	; 0x07
     5bc:	16 82       	std	Z+6, r1	; 0x06
     5be:	15 82       	std	Z+5, r1	; 0x05
     5c0:	11 82       	std	Z+1, r1	; 0x01
     5c2:	10 82       	st	Z, r1
     5c4:	bb df       	rcall	.-138    	; 0x53c <GLCD_Clear>
     5c6:	08 95       	ret

000005c8 <GLCD_SetFont>:
     5c8:	66 23       	and	r22, r22
     5ca:	c4 f0       	brlt	.+48     	; 0x5fc <GLCD_SetFont+0x34>
     5cc:	40 34       	cpi	r20, 0x40	; 64
     5ce:	b0 f4       	brcc	.+44     	; 0x5fc <GLCD_SetFont+0x34>
     5d0:	e1 e7       	ldi	r30, 0x71	; 113
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	94 83       	std	Z+4, r25	; 0x04
     5d6:	83 83       	std	Z+3, r24	; 0x03
     5d8:	65 83       	std	Z+5, r22	; 0x05
     5da:	46 83       	std	Z+6, r20	; 0x06
     5dc:	50 e0       	ldi	r21, 0x00	; 0
     5de:	41 50       	subi	r20, 0x01	; 1
     5e0:	51 09       	sbc	r21, r1
     5e2:	ca 01       	movw	r24, r20
     5e4:	99 23       	and	r25, r25
     5e6:	0c f4       	brge	.+2      	; 0x5ea <GLCD_SetFont+0x22>
     5e8:	07 96       	adiw	r24, 0x07	; 7
     5ea:	95 95       	asr	r25
     5ec:	87 95       	ror	r24
     5ee:	95 95       	asr	r25
     5f0:	87 95       	ror	r24
     5f2:	95 95       	asr	r25
     5f4:	87 95       	ror	r24
     5f6:	8f 5f       	subi	r24, 0xFF	; 255
     5f8:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__GLCD+0x7>
     5fc:	08 95       	ret

000005fe <GLCD_PrintChar>:

void GLCD_PrintChar(char Character)
{
     5fe:	2f 92       	push	r2
     600:	3f 92       	push	r3
     602:	4f 92       	push	r4
     604:	5f 92       	push	r5
     606:	6f 92       	push	r6
     608:	7f 92       	push	r7
     60a:	8f 92       	push	r8
     60c:	9f 92       	push	r9
     60e:	af 92       	push	r10
     610:	bf 92       	push	r11
     612:	cf 92       	push	r12
     614:	df 92       	push	r13
     616:	ef 92       	push	r14
     618:	ff 92       	push	r15
     61a:	0f 93       	push	r16
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	2e 97       	sbiw	r28, 0x0e	; 14
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	cd bf       	out	0x3d, r28	; 61
     632:	28 2f       	mov	r18, r24
		GLCD_Send(__GLCD_DATA, messageBuf, sizeof(messageBuf));
	}
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
}
     634:	4d b7       	in	r20, 0x3d	; 61
     636:	5e b7       	in	r21, 0x3e	; 62
     638:	5e 87       	std	Y+14, r21	; 0x0e
     63a:	4d 87       	std	Y+13, r20	; 0x0d
	return width;
}

void GLCD_PrintChar(char Character)
{
	if (Character >= 48 && Character <= 57)
     63c:	80 ed       	ldi	r24, 0xD0	; 208
     63e:	82 0f       	add	r24, r18
     640:	8a 30       	cpi	r24, 0x0A	; 10
     642:	08 f4       	brcc	.+2      	; 0x646 <GLCD_PrintChar+0x48>
	{
		Character -= 3;
     644:	23 50       	subi	r18, 0x03	; 3
	uint16_t fontStart, fontRead, fontReadPrev;
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
     646:	e1 e7       	ldi	r30, 0x71	; 113
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	50 81       	ld	r21, Z
     64c:	59 83       	std	Y+1, r21	; 0x01
	y = y2 = __GLCD.Y;
     64e:	81 81       	ldd	r24, Z+1	; 0x01
     650:	8e 83       	std	Y+6, r24	; 0x06
	
	//#2 - Remove leading empty characters
	Character -= 32;														//32 is the ASCII of the first printable character
	
	//#3 - Find the start of the character in the font array
	fontStart = Character * (__GLCD.Font.Width * __GLCD.Font.Lines + 1);		//+1 due to first byte of each array line being the width
     652:	37 81       	ldd	r19, Z+7	; 0x07
     654:	85 81       	ldd	r24, Z+5	; 0x05
     656:	63 2f       	mov	r22, r19
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	51 dc       	rcall	.-1886   	; 0xffffff00 <__eeprom_end+0xff7eff00>
     65e:	20 52       	subi	r18, 0x20	; 32
     660:	62 2f       	mov	r22, r18
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	01 96       	adiw	r24, 0x01	; 1
     666:	4c dc       	rcall	.-1896   	; 0xffffff00 <__eeprom_end+0xff7eff00>
     668:	98 87       	std	Y+8, r25	; 0x08
     66a:	8f 83       	std	Y+7, r24	; 0x07
	
	//#4 - Update width - First byte of each line is the width of the character
	width = pgm_read_byte(&(__GLCD.Font.Name[fontStart++]));
     66c:	1c 01       	movw	r2, r24
     66e:	9f ef       	ldi	r25, 0xFF	; 255
     670:	29 1a       	sub	r2, r25
     672:	39 0a       	sbc	r3, r25
     674:	03 80       	ldd	r0, Z+3	; 0x03
     676:	f4 81       	ldd	r31, Z+4	; 0x04
     678:	e0 2d       	mov	r30, r0
     67a:	4f 81       	ldd	r20, Y+7	; 0x07
     67c:	58 85       	ldd	r21, Y+8	; 0x08
     67e:	e4 0f       	add	r30, r20
     680:	f5 1f       	adc	r31, r21
     682:	c4 90       	lpm	r12, Z

	uint8_t messageBuf[width + 1];
     684:	8c 2d       	mov	r24, r12
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	9a 87       	std	Y+10, r25	; 0x0a
     68a:	89 87       	std	Y+9, r24	; 0x09
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	9b 83       	std	Y+3, r25	; 0x03
     690:	8a 83       	std	Y+2, r24	; 0x02
     692:	ed b7       	in	r30, 0x3d	; 61
     694:	fe b7       	in	r31, 0x3e	; 62
     696:	e8 1b       	sub	r30, r24
     698:	f9 0b       	sbc	r31, r25
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	f8 94       	cli
     69e:	fe bf       	out	0x3e, r31	; 62
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	ed bf       	out	0x3d, r30	; 61
     6a4:	4d b7       	in	r20, 0x3d	; 61
     6a6:	5e b7       	in	r21, 0x3e	; 62
     6a8:	4f 5f       	subi	r20, 0xFF	; 255
     6aa:	5f 4f       	sbci	r21, 0xFF	; 255
     6ac:	5c 87       	std	Y+12, r21	; 0x0c
     6ae:	4b 87       	std	Y+11, r20	; 0x0b
     6b0:	2a 01       	movw	r4, r20

	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
     6b2:	5e 81       	ldd	r21, Y+6	; 0x06
     6b4:	57 70       	andi	r21, 0x07	; 7
     6b6:	e5 2e       	mov	r14, r21
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
     6b8:	33 23       	and	r19, r19
     6ba:	09 f4       	brne	.+2      	; 0x6be <GLCD_PrintChar+0xc0>
     6bc:	67 c0       	rjmp	.+206    	; 0x78c <GLCD_PrintChar+0x18e>
     6be:	de 80       	ldd	r13, Y+6	; 0x06
     6c0:	f1 2c       	mov	r15, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
     6c2:	0f 2e       	mov	r0, r31
     6c4:	f1 e7       	ldi	r31, 0x71	; 113
     6c6:	8f 2e       	mov	r8, r31
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	9f 2e       	mov	r9, r31
     6cc:	f0 2d       	mov	r31, r0
     6ce:	0f ef       	ldi	r16, 0xFF	; 255
     6d0:	0c 0d       	add	r16, r12
     6d2:	10 e0       	ldi	r17, 0x00	; 0
     6d4:	0f 5f       	subi	r16, 0xFF	; 255
     6d6:	1f 4f       	sbci	r17, 0xFF	; 255
     6d8:	04 0d       	add	r16, r4
     6da:	15 1d       	adc	r17, r5
			
			//Merge byte with previous one
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
     6dc:	88 e0       	ldi	r24, 0x08	; 8
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	3c 01       	movw	r6, r24
     6e2:	65 1a       	sub	r6, r21
     6e4:	71 08       	sbc	r7, r1
			//Increase index
			fontRead += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		messageBuf[width] = GLCD_White;
     6e6:	89 85       	ldd	r24, Y+9	; 0x09
     6e8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ea:	84 0d       	add	r24, r4
     6ec:	95 1d       	adc	r25, r5
     6ee:	9d 83       	std	Y+5, r25	; 0x05
     6f0:	8c 83       	std	Y+4, r24	; 0x04
     6f2:	8f 2d       	mov	r24, r15
     6f4:	fc 2c       	mov	r15, r12
     6f6:	c5 2e       	mov	r12, r21
     6f8:	ed 2c       	mov	r14, r13
     6fa:	d8 2e       	mov	r13, r24
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
     6fc:	6e 2d       	mov	r22, r14
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
     700:	cd de       	rcall	.-614    	; 0x49c <GLCD_GotoXY>
		
		//Update the indices for reading the line
		fontRead = fontStart + j;
     702:	91 01       	movw	r18, r2
     704:	2d 0d       	add	r18, r13
     706:	31 1d       	adc	r19, r1
		fontReadPrev = fontRead - 1;
     708:	b9 01       	movw	r22, r18
     70a:	61 50       	subi	r22, 0x01	; 1
     70c:	71 09       	sbc	r23, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
     70e:	ff 20       	and	r15, r15
     710:	41 f1       	breq	.+80     	; 0x762 <GLCD_PrintChar+0x164>
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
     712:	f4 01       	movw	r30, r8
     714:	a3 80       	ldd	r10, Z+3	; 0x03
     716:	b4 80       	ldd	r11, Z+4	; 0x04
			if (j > 0)
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
				data |= dataPrev;
				fontReadPrev += __GLCD.Font.Lines;
     718:	47 81       	ldd	r20, Z+7	; 0x07
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	2a 0d       	add	r18, r10
     71e:	3b 1d       	adc	r19, r11
     720:	d2 01       	movw	r26, r4

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
		{
			//Read byte
			data = pgm_read_byte(&(__GLCD.Font.Name[fontRead]));
     722:	f9 01       	movw	r30, r18
     724:	84 91       	lpm	r24, Z
			
			//Shift byte
			data <<= overflow;
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0c 2c       	mov	r0, r12
     72a:	02 c0       	rjmp	.+4      	; 0x730 <GLCD_PrintChar+0x132>
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	0a 94       	dec	r0
     732:	e2 f7       	brpl	.-8      	; 0x72c <GLCD_PrintChar+0x12e>
     734:	e8 2f       	mov	r30, r24
			
			//Merge byte with previous one
			if (j > 0)
     736:	dd 20       	and	r13, r13
     738:	71 f0       	breq	.+28     	; 0x756 <GLCD_PrintChar+0x158>
			{
				dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
     73a:	f5 01       	movw	r30, r10
     73c:	e6 0f       	add	r30, r22
     73e:	f7 1f       	adc	r31, r23
     740:	e4 91       	lpm	r30, Z
				dataPrev >>= __GLCD_Screen_Line_Height - overflow;
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	06 2c       	mov	r0, r6
     746:	02 c0       	rjmp	.+4      	; 0x74c <GLCD_PrintChar+0x14e>
     748:	f5 95       	asr	r31
     74a:	e7 95       	ror	r30
     74c:	0a 94       	dec	r0
     74e:	e2 f7       	brpl	.-8      	; 0x748 <GLCD_PrintChar+0x14a>
				data |= dataPrev;
     750:	e8 2b       	or	r30, r24
				fontReadPrev += __GLCD.Font.Lines;
     752:	64 0f       	add	r22, r20
     754:	75 1f       	adc	r23, r21
			}
			
			//Send byte
			messageBuf[i] = data;
     756:	ed 93       	st	X+, r30
     758:	24 0f       	add	r18, r20
     75a:	35 1f       	adc	r19, r21
		//Update the indices for reading the line
		fontRead = fontStart + j;
		fontReadPrev = fontRead - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
     75c:	a0 17       	cp	r26, r16
     75e:	b1 07       	cpc	r27, r17
     760:	01 f7       	brne	.-64     	; 0x722 <GLCD_PrintChar+0x124>
			//Increase index
			fontRead += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		messageBuf[width] = GLCD_White;
     762:	ec 81       	ldd	r30, Y+4	; 0x04
     764:	fd 81       	ldd	r31, Y+5	; 0x05
     766:	10 82       	st	Z, r1
		
		//Increase line counter
		y += __GLCD_Screen_Line_Height;
     768:	f8 e0       	ldi	r31, 0x08	; 8
     76a:	ef 0e       	add	r14, r31

		//Write
		GLCD_Send(__GLCD_DATA, messageBuf, sizeof(messageBuf));
     76c:	4a 81       	ldd	r20, Y+2	; 0x02
     76e:	b2 01       	movw	r22, r4
     770:	80 e4       	ldi	r24, 0x40	; 64
     772:	22 de       	rcall	.-956    	; 0x3b8 <GLCD_Send>
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
     774:	d3 94       	inc	r13
     776:	f4 01       	movw	r30, r8
     778:	87 81       	ldd	r24, Z+7	; 0x07
     77a:	d8 16       	cp	r13, r24
     77c:	08 f4       	brcc	.+2      	; 0x780 <GLCD_PrintChar+0x182>
     77e:	be cf       	rjmp	.-132    	; 0x6fc <GLCD_PrintChar+0xfe>
     780:	8d 2d       	mov	r24, r13
     782:	de 2c       	mov	r13, r14
     784:	ec 2c       	mov	r14, r12
     786:	cf 2c       	mov	r12, r15
     788:	f8 2e       	mov	r15, r24
     78a:	02 c0       	rjmp	.+4      	; 0x790 <GLCD_PrintChar+0x192>
	uint8_t x, y, y2, i, j, width, overflow, data, dataPrev;
	fontStart = fontRead = fontReadPrev = x = y = y2 = i = j = width = overflow = data = dataPrev = 0;
	
	//#1 - Save current position
	x = __GLCD.X;
	y = y2 = __GLCD.Y;
     78c:	de 80       	ldd	r13, Y+6	; 0x06
	//#5 - Calculate overflowing bits
	overflow = __GLCD.Y % __GLCD_Screen_Line_Height;
	
	//#6 - Print the character
	//Scan the lines needed
	for (j = 0 ; j < __GLCD.Font.Lines ; j++)
     78e:	f1 2c       	mov	r15, r1
		GLCD_Send(__GLCD_DATA, messageBuf, sizeof(messageBuf));
	}

	//#7 - Update last line, if needed
	//If (LINE_STARTING != LINE_ENDING)
	if (__GLCD_getLine(y2) != __GLCD_getLine((y2 + __GLCD.Font.Height - 1)) && y < __GLCD_Screen_Height)
     790:	2e 81       	ldd	r18, Y+6	; 0x06
     792:	26 95       	lsr	r18
     794:	26 95       	lsr	r18
     796:	26 95       	lsr	r18
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	40 91 77 00 	lds	r20, 0x0077	; 0x800077 <__GLCD+0x6>
     79e:	fe 81       	ldd	r31, Y+6	; 0x06
     7a0:	8f 2f       	mov	r24, r31
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	84 0f       	add	r24, r20
     7a6:	91 1d       	adc	r25, r1
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	ac 01       	movw	r20, r24
     7ac:	12 f4       	brpl	.+4      	; 0x7b2 <GLCD_PrintChar+0x1b4>
     7ae:	49 5f       	subi	r20, 0xF9	; 249
     7b0:	5f 4f       	sbci	r21, 0xFF	; 255
     7b2:	55 95       	asr	r21
     7b4:	47 95       	ror	r20
     7b6:	55 95       	asr	r21
     7b8:	47 95       	ror	r20
     7ba:	55 95       	asr	r21
     7bc:	47 95       	ror	r20
     7be:	24 17       	cp	r18, r20
     7c0:	35 07       	cpc	r19, r21
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <GLCD_PrintChar+0x1c8>
     7c4:	40 c0       	rjmp	.+128    	; 0x846 <GLCD_PrintChar+0x248>
     7c6:	4f e3       	ldi	r20, 0x3F	; 63
     7c8:	4d 15       	cp	r20, r13
     7ca:	08 f4       	brcc	.+2      	; 0x7ce <GLCD_PrintChar+0x1d0>
     7cc:	3c c0       	rjmp	.+120    	; 0x846 <GLCD_PrintChar+0x248>
	{
		//Go to the start of the line
		GLCD_GotoXY(x, y);
     7ce:	6d 2d       	mov	r22, r13
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	64 de       	rcall	.-824    	; 0x49c <GLCD_GotoXY>
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;
     7d4:	8f 81       	ldd	r24, Y+7	; 0x07
     7d6:	98 85       	ldd	r25, Y+8	; 0x08
     7d8:	8f 0d       	add	r24, r15
     7da:	91 1d       	adc	r25, r1

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
     7dc:	cc 20       	and	r12, r12
     7de:	39 f1       	breq	.+78     	; 0x82e <GLCD_PrintChar+0x230>
			
			//Send byte
			messageBuf[i] = data;

			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
     7e0:	a1 e7       	ldi	r26, 0x71	; 113
     7e2:	b0 e0       	ldi	r27, 0x00	; 0
     7e4:	17 96       	adiw	r26, 0x07	; 7
     7e6:	4c 91       	ld	r20, X
     7e8:	17 97       	sbiw	r26, 0x07	; 7
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	13 96       	adiw	r26, 0x03	; 3
     7ee:	ed 91       	ld	r30, X+
     7f0:	fc 91       	ld	r31, X
     7f2:	14 97       	sbiw	r26, 0x04	; 4
     7f4:	e8 0f       	add	r30, r24
     7f6:	f9 1f       	adc	r31, r25
     7f8:	ab 85       	ldd	r26, Y+11	; 0x0b
     7fa:	bc 85       	ldd	r27, Y+12	; 0x0c
     7fc:	2f ef       	ldi	r18, 0xFF	; 255
     7fe:	2c 0d       	add	r18, r12
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	2f 5f       	subi	r18, 0xFF	; 255
     804:	3f 4f       	sbci	r19, 0xFF	; 255
     806:	2a 0f       	add	r18, r26
     808:	3b 1f       	adc	r19, r27
		{
			data = 0;
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
     80a:	68 e0       	ldi	r22, 0x08	; 8
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	6e 19       	sub	r22, r14
     810:	71 09       	sbc	r23, r1
		for (i = 0 ; i < width ; i++)
		{
			data = 0;
			
			//Merge byte with previous one
			dataPrev = pgm_read_byte(&(__GLCD.Font.Name[fontReadPrev]));
     812:	84 91       	lpm	r24, Z
			dataPrev >>= __GLCD_Screen_Line_Height - overflow;
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	06 2e       	mov	r0, r22
     818:	02 c0       	rjmp	.+4      	; 0x81e <GLCD_PrintChar+0x220>
     81a:	95 95       	asr	r25
     81c:	87 95       	ror	r24
     81e:	0a 94       	dec	r0
     820:	e2 f7       	brpl	.-8      	; 0x81a <GLCD_PrintChar+0x21c>
			data |= dataPrev;
			
			//Send byte
			messageBuf[i] = data;
     822:	8d 93       	st	X+, r24
     824:	e4 0f       	add	r30, r20
     826:	f5 1f       	adc	r31, r21
		
		//Update the index for reading the last printed line
		fontReadPrev = fontStart + j - 1;

		//Scan bytes of selected line
		for (i = 0 ; i < width ; i++)
     828:	2a 17       	cp	r18, r26
     82a:	3b 07       	cpc	r19, r27
     82c:	91 f7       	brne	.-28     	; 0x812 <GLCD_PrintChar+0x214>
			//Increase index
			fontReadPrev += __GLCD.Font.Lines;
		}

		//Send an empty column of 1px in the end
		messageBuf[width] = GLCD_White;
     82e:	eb 85       	ldd	r30, Y+11	; 0x0b
     830:	fc 85       	ldd	r31, Y+12	; 0x0c
     832:	89 85       	ldd	r24, Y+9	; 0x09
     834:	9a 85       	ldd	r25, Y+10	; 0x0a
     836:	e8 0f       	add	r30, r24
     838:	f9 1f       	adc	r31, r25
     83a:	10 82       	st	Z, r1

		//Write
		GLCD_Send(__GLCD_DATA, messageBuf, sizeof(messageBuf));
     83c:	4a 81       	ldd	r20, Y+2	; 0x02
     83e:	6b 85       	ldd	r22, Y+11	; 0x0b
     840:	7c 85       	ldd	r23, Y+12	; 0x0c
     842:	80 e4       	ldi	r24, 0x40	; 64
     844:	b9 dd       	rcall	.-1166   	; 0x3b8 <GLCD_Send>
	}
	
	//Move cursor to the end of the printed character
	GLCD_GotoXY(x + width + 1, y2);
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	8f 5f       	subi	r24, 0xFF	; 255
     84a:	6e 81       	ldd	r22, Y+6	; 0x06
     84c:	8c 0d       	add	r24, r12
     84e:	26 de       	rcall	.-948    	; 0x49c <GLCD_GotoXY>
}
     850:	ed 85       	ldd	r30, Y+13	; 0x0d
     852:	fe 85       	ldd	r31, Y+14	; 0x0e
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	f8 94       	cli
     858:	fe bf       	out	0x3e, r31	; 62
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	ed bf       	out	0x3d, r30	; 61
     85e:	2e 96       	adiw	r28, 0x0e	; 14
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	df 90       	pop	r13
     878:	cf 90       	pop	r12
     87a:	bf 90       	pop	r11
     87c:	af 90       	pop	r10
     87e:	9f 90       	pop	r9
     880:	8f 90       	pop	r8
     882:	7f 90       	pop	r7
     884:	6f 90       	pop	r6
     886:	5f 90       	pop	r5
     888:	4f 90       	pop	r4
     88a:	3f 90       	pop	r3
     88c:	2f 90       	pop	r2
     88e:	08 95       	ret

00000890 <GLCD_PrintString>:

void GLCD_PrintString(const char *Text)
{
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	ec 01       	movw	r28, r24
	while(*Text)
     89a:	88 81       	ld	r24, Y
     89c:	88 23       	and	r24, r24
     89e:	d1 f0       	breq	.+52     	; 0x8d4 <GLCD_PrintString+0x44>
	{
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
     8a0:	e1 e7       	ldi	r30, 0x71	; 113
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	90 81       	ld	r25, Z
     8a6:	25 81       	ldd	r18, Z+5	; 0x05
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	29 0f       	add	r18, r25
     8ac:	31 1d       	adc	r19, r1
     8ae:	20 38       	cpi	r18, 0x80	; 128
     8b0:	31 05       	cpc	r19, r1
     8b2:	84 f4       	brge	.+32     	; 0x8d4 <GLCD_PrintString+0x44>
     8b4:	21 96       	adiw	r28, 0x01	; 1
     8b6:	8f 01       	movw	r16, r30
     8b8:	09 c0       	rjmp	.+18     	; 0x8cc <GLCD_PrintString+0x3c>
     8ba:	f8 01       	movw	r30, r16
     8bc:	90 81       	ld	r25, Z
     8be:	25 81       	ldd	r18, Z+5	; 0x05
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	29 0f       	add	r18, r25
     8c4:	31 1d       	adc	r19, r1
     8c6:	20 38       	cpi	r18, 0x80	; 128
     8c8:	31 05       	cpc	r19, r1
     8ca:	24 f4       	brge	.+8      	; 0x8d4 <GLCD_PrintString+0x44>
			break;

		GLCD_PrintChar(*Text++);
     8cc:	98 de       	rcall	.-720    	; 0x5fe <GLCD_PrintChar>
	GLCD_GotoXY(x + width + 1, y2);
}

void GLCD_PrintString(const char *Text)
{
	while(*Text)
     8ce:	89 91       	ld	r24, Y+
     8d0:	81 11       	cpse	r24, r1
     8d2:	f3 cf       	rjmp	.-26     	; 0x8ba <GLCD_PrintString+0x2a>
		if ((__GLCD.X + __GLCD.Font.Width) >= __GLCD_Screen_Width)
			break;

		GLCD_PrintChar(*Text++);
	}
}
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	08 95       	ret

000008de <GLCD_PrintInteger>:

void GLCD_PrintInteger(const int32_t Value)
{
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	2c 97       	sbiw	r28, 0x0c	; 12
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
	if (Value == 0)
     8f4:	61 15       	cp	r22, r1
     8f6:	71 05       	cpc	r23, r1
     8f8:	81 05       	cpc	r24, r1
     8fa:	91 05       	cpc	r25, r1
     8fc:	19 f4       	brne	.+6      	; 0x904 <GLCD_PrintInteger+0x26>
	{
		GLCD_PrintChar(45);
     8fe:	8d e2       	ldi	r24, 0x2D	; 45
     900:	7e de       	rcall	.-772    	; 0x5fe <GLCD_PrintChar>
     902:	3a c1       	rjmp	.+628    	; 0xb78 <GLCD_PrintInteger+0x29a>
	}
	else if ((Value > INT32_MIN) && (Value <= INT32_MAX))
     904:	61 15       	cp	r22, r1
     906:	71 05       	cpc	r23, r1
     908:	81 05       	cpc	r24, r1
     90a:	20 e8       	ldi	r18, 0x80	; 128
     90c:	92 07       	cpc	r25, r18
     90e:	09 f4       	brne	.+2      	; 0x912 <GLCD_PrintInteger+0x34>
     910:	33 c1       	rjmp	.+614    	; 0xb78 <GLCD_PrintInteger+0x29a>
	{
		//int32_max_bytes + sign + null = 12 bytes
		char bcd[12] = { '\0' };
     912:	fe 01       	movw	r30, r28
     914:	31 96       	adiw	r30, 0x01	; 1
     916:	2c e0       	ldi	r18, 0x0C	; 12
     918:	df 01       	movw	r26, r30
     91a:	1d 92       	st	X+, r1
     91c:	2a 95       	dec	r18
     91e:	e9 f7       	brne	.-6      	; 0x91a <GLCD_PrintInteger+0x3c>
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
     920:	20 e3       	ldi	r18, 0x30	; 48
     922:	2b 87       	std	Y+11, r18	; 0x0b
     924:	2a 87       	std	Y+10, r18	; 0x0a
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
     926:	29 87       	std	Y+9, r18	; 0x09
     928:	28 87       	std	Y+8, r18	; 0x08
     92a:	2f 83       	std	Y+7, r18	; 0x07
static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
     92c:	2e 83       	std	Y+6, r18	; 0x06
     92e:	2d 83       	std	Y+5, r18	; 0x05
     930:	2c 83       	std	Y+4, r18	; 0x04

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
     932:	2b 83       	std	Y+3, r18	; 0x03
     934:	2a 83       	std	Y+2, r18	; 0x02
     936:	29 83       	std	Y+1, r18	; 0x01
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
     938:	99 23       	and	r25, r25
     93a:	5c f4       	brge	.+22     	; 0x952 <GLCD_PrintInteger+0x74>
	{
		isNegative = 1;
		Value = -Value;
     93c:	9b 01       	movw	r18, r22
     93e:	ac 01       	movw	r20, r24
     940:	88 27       	eor	r24, r24
     942:	99 27       	eor	r25, r25
     944:	dc 01       	movw	r26, r24
     946:	82 1b       	sub	r24, r18
     948:	93 0b       	sbc	r25, r19
     94a:	a4 0b       	sbc	r26, r20
     94c:	b5 0b       	sbc	r27, r21
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
	{
		isNegative = 1;
     94e:	11 e0       	ldi	r17, 0x01	; 1
     950:	03 c0       	rjmp	.+6      	; 0x958 <GLCD_PrintInteger+0x7a>
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
     952:	dc 01       	movw	r26, r24
     954:	cb 01       	movw	r24, r22
	GLCD_SetPixels(X, Y1, X, Y2, Color);
}

static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
     956:	10 e0       	ldi	r17, 0x00	; 0
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value >= 1000000000)
     958:	81 15       	cp	r24, r1
     95a:	3a ec       	ldi	r19, 0xCA	; 202
     95c:	93 07       	cpc	r25, r19
     95e:	3a e9       	ldi	r19, 0x9A	; 154
     960:	a3 07       	cpc	r26, r19
     962:	3b e3       	ldi	r19, 0x3B	; 59
     964:	b3 07       	cpc	r27, r19
     966:	8c f0       	brlt	.+34     	; 0x98a <GLCD_PrintInteger+0xac>
     968:	21 e3       	ldi	r18, 0x31	; 49
     96a:	01 c0       	rjmp	.+2      	; 0x96e <GLCD_PrintInteger+0x90>
     96c:	23 2f       	mov	r18, r19
	{
		Value -= 1000000000;
     96e:	9a 5c       	subi	r25, 0xCA	; 202
     970:	aa 49       	sbci	r26, 0x9A	; 154
     972:	bb 43       	sbci	r27, 0x3B	; 59
     974:	31 e0       	ldi	r19, 0x01	; 1
     976:	32 0f       	add	r19, r18
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value >= 1000000000)
     978:	81 15       	cp	r24, r1
     97a:	4a ec       	ldi	r20, 0xCA	; 202
     97c:	94 07       	cpc	r25, r20
     97e:	4a e9       	ldi	r20, 0x9A	; 154
     980:	a4 07       	cpc	r26, r20
     982:	4b e3       	ldi	r20, 0x3B	; 59
     984:	b4 07       	cpc	r27, r20
     986:	94 f7       	brge	.-28     	; 0x96c <GLCD_PrintInteger+0x8e>
     988:	2a 83       	std	Y+2, r18	; 0x02
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
     98a:	81 15       	cp	r24, r1
     98c:	51 ee       	ldi	r21, 0xE1	; 225
     98e:	95 07       	cpc	r25, r21
     990:	55 ef       	ldi	r21, 0xF5	; 245
     992:	a5 07       	cpc	r26, r21
     994:	55 e0       	ldi	r21, 0x05	; 5
     996:	b5 07       	cpc	r27, r21
     998:	8c f0       	brlt	.+34     	; 0x9bc <GLCD_PrintInteger+0xde>
     99a:	21 e3       	ldi	r18, 0x31	; 49
     99c:	01 c0       	rjmp	.+2      	; 0x9a0 <GLCD_PrintInteger+0xc2>
     99e:	23 2f       	mov	r18, r19
	{
		Value -= 100000000;
     9a0:	91 5e       	subi	r25, 0xE1	; 225
     9a2:	a5 4f       	sbci	r26, 0xF5	; 245
     9a4:	b5 40       	sbci	r27, 0x05	; 5
     9a6:	31 e0       	ldi	r19, 0x01	; 1
     9a8:	32 0f       	add	r19, r18
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
     9aa:	81 15       	cp	r24, r1
     9ac:	41 ee       	ldi	r20, 0xE1	; 225
     9ae:	94 07       	cpc	r25, r20
     9b0:	45 ef       	ldi	r20, 0xF5	; 245
     9b2:	a4 07       	cpc	r26, r20
     9b4:	45 e0       	ldi	r20, 0x05	; 5
     9b6:	b4 07       	cpc	r27, r20
     9b8:	94 f7       	brge	.-28     	; 0x99e <GLCD_PrintInteger+0xc0>
     9ba:	2b 83       	std	Y+3, r18	; 0x03
	{
		Value -= 100000000;
		BCD[2]++;
	}
	
	while (Value >= 10000000)
     9bc:	80 38       	cpi	r24, 0x80	; 128
     9be:	56 e9       	ldi	r21, 0x96	; 150
     9c0:	95 07       	cpc	r25, r21
     9c2:	58 e9       	ldi	r21, 0x98	; 152
     9c4:	a5 07       	cpc	r26, r21
     9c6:	b1 05       	cpc	r27, r1
     9c8:	8c f0       	brlt	.+34     	; 0x9ec <GLCD_PrintInteger+0x10e>
     9ca:	21 e3       	ldi	r18, 0x31	; 49
     9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <GLCD_PrintInteger+0xf2>
     9ce:	23 2f       	mov	r18, r19
	{
		Value -= 10000000;
     9d0:	80 58       	subi	r24, 0x80	; 128
     9d2:	96 49       	sbci	r25, 0x96	; 150
     9d4:	a8 49       	sbci	r26, 0x98	; 152
     9d6:	b1 09       	sbc	r27, r1
     9d8:	31 e0       	ldi	r19, 0x01	; 1
     9da:	32 0f       	add	r19, r18
	{
		Value -= 100000000;
		BCD[2]++;
	}
	
	while (Value >= 10000000)
     9dc:	80 38       	cpi	r24, 0x80	; 128
     9de:	46 e9       	ldi	r20, 0x96	; 150
     9e0:	94 07       	cpc	r25, r20
     9e2:	48 e9       	ldi	r20, 0x98	; 152
     9e4:	a4 07       	cpc	r26, r20
     9e6:	b1 05       	cpc	r27, r1
     9e8:	94 f7       	brge	.-28     	; 0x9ce <GLCD_PrintInteger+0xf0>
     9ea:	2c 83       	std	Y+4, r18	; 0x04
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
     9ec:	80 34       	cpi	r24, 0x40	; 64
     9ee:	52 e4       	ldi	r21, 0x42	; 66
     9f0:	95 07       	cpc	r25, r21
     9f2:	5f e0       	ldi	r21, 0x0F	; 15
     9f4:	a5 07       	cpc	r26, r21
     9f6:	b1 05       	cpc	r27, r1
     9f8:	8c f0       	brlt	.+34     	; 0xa1c <GLCD_PrintInteger+0x13e>
     9fa:	21 e3       	ldi	r18, 0x31	; 49
     9fc:	01 c0       	rjmp	.+2      	; 0xa00 <GLCD_PrintInteger+0x122>
     9fe:	23 2f       	mov	r18, r19
	{
		Value -= 1000000;
     a00:	80 54       	subi	r24, 0x40	; 64
     a02:	92 44       	sbci	r25, 0x42	; 66
     a04:	af 40       	sbci	r26, 0x0F	; 15
     a06:	b1 09       	sbc	r27, r1
     a08:	31 e0       	ldi	r19, 0x01	; 1
     a0a:	32 0f       	add	r19, r18
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
     a0c:	80 34       	cpi	r24, 0x40	; 64
     a0e:	42 e4       	ldi	r20, 0x42	; 66
     a10:	94 07       	cpc	r25, r20
     a12:	4f e0       	ldi	r20, 0x0F	; 15
     a14:	a4 07       	cpc	r26, r20
     a16:	b1 05       	cpc	r27, r1
     a18:	94 f7       	brge	.-28     	; 0x9fe <GLCD_PrintInteger+0x120>
     a1a:	2d 83       	std	Y+5, r18	; 0x05
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
     a1c:	80 3a       	cpi	r24, 0xA0	; 160
     a1e:	56 e8       	ldi	r21, 0x86	; 134
     a20:	95 07       	cpc	r25, r21
     a22:	51 e0       	ldi	r21, 0x01	; 1
     a24:	a5 07       	cpc	r26, r21
     a26:	b1 05       	cpc	r27, r1
     a28:	8c f0       	brlt	.+34     	; 0xa4c <GLCD_PrintInteger+0x16e>
     a2a:	21 e3       	ldi	r18, 0x31	; 49
     a2c:	01 c0       	rjmp	.+2      	; 0xa30 <GLCD_PrintInteger+0x152>
     a2e:	23 2f       	mov	r18, r19
	{
		Value -= 100000;
     a30:	80 5a       	subi	r24, 0xA0	; 160
     a32:	96 48       	sbci	r25, 0x86	; 134
     a34:	a1 40       	sbci	r26, 0x01	; 1
     a36:	b1 09       	sbc	r27, r1
     a38:	31 e0       	ldi	r19, 0x01	; 1
     a3a:	32 0f       	add	r19, r18
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
     a3c:	80 3a       	cpi	r24, 0xA0	; 160
     a3e:	46 e8       	ldi	r20, 0x86	; 134
     a40:	94 07       	cpc	r25, r20
     a42:	41 e0       	ldi	r20, 0x01	; 1
     a44:	a4 07       	cpc	r26, r20
     a46:	b1 05       	cpc	r27, r1
     a48:	94 f7       	brge	.-28     	; 0xa2e <GLCD_PrintInteger+0x150>
     a4a:	2e 83       	std	Y+6, r18	; 0x06
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
     a4c:	80 31       	cpi	r24, 0x10	; 16
     a4e:	57 e2       	ldi	r21, 0x27	; 39
     a50:	95 07       	cpc	r25, r21
     a52:	a1 05       	cpc	r26, r1
     a54:	b1 05       	cpc	r27, r1
     a56:	84 f0       	brlt	.+32     	; 0xa78 <GLCD_PrintInteger+0x19a>
     a58:	21 e3       	ldi	r18, 0x31	; 49
     a5a:	01 c0       	rjmp	.+2      	; 0xa5e <GLCD_PrintInteger+0x180>
     a5c:	23 2f       	mov	r18, r19
	{
		Value -= 10000;
     a5e:	80 51       	subi	r24, 0x10	; 16
     a60:	97 42       	sbci	r25, 0x27	; 39
     a62:	a1 09       	sbc	r26, r1
     a64:	b1 09       	sbc	r27, r1
     a66:	31 e0       	ldi	r19, 0x01	; 1
     a68:	32 0f       	add	r19, r18
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
     a6a:	80 31       	cpi	r24, 0x10	; 16
     a6c:	47 e2       	ldi	r20, 0x27	; 39
     a6e:	94 07       	cpc	r25, r20
     a70:	a1 05       	cpc	r26, r1
     a72:	b1 05       	cpc	r27, r1
     a74:	9c f7       	brge	.-26     	; 0xa5c <GLCD_PrintInteger+0x17e>
     a76:	2f 83       	std	Y+7, r18	; 0x07
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
     a78:	88 3e       	cpi	r24, 0xE8	; 232
     a7a:	53 e0       	ldi	r21, 0x03	; 3
     a7c:	95 07       	cpc	r25, r21
     a7e:	a1 05       	cpc	r26, r1
     a80:	b1 05       	cpc	r27, r1
     a82:	84 f0       	brlt	.+32     	; 0xaa4 <GLCD_PrintInteger+0x1c6>
     a84:	21 e3       	ldi	r18, 0x31	; 49
     a86:	01 c0       	rjmp	.+2      	; 0xa8a <GLCD_PrintInteger+0x1ac>
     a88:	23 2f       	mov	r18, r19
	{
		Value -= 1000;
     a8a:	88 5e       	subi	r24, 0xE8	; 232
     a8c:	93 40       	sbci	r25, 0x03	; 3
     a8e:	a1 09       	sbc	r26, r1
     a90:	b1 09       	sbc	r27, r1
     a92:	31 e0       	ldi	r19, 0x01	; 1
     a94:	32 0f       	add	r19, r18
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
     a96:	88 3e       	cpi	r24, 0xE8	; 232
     a98:	43 e0       	ldi	r20, 0x03	; 3
     a9a:	94 07       	cpc	r25, r20
     a9c:	a1 05       	cpc	r26, r1
     a9e:	b1 05       	cpc	r27, r1
     aa0:	9c f7       	brge	.-26     	; 0xa88 <GLCD_PrintInteger+0x1aa>
     aa2:	28 87       	std	Y+8, r18	; 0x08
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
     aa4:	84 36       	cpi	r24, 0x64	; 100
     aa6:	91 05       	cpc	r25, r1
     aa8:	a1 05       	cpc	r26, r1
     aaa:	b1 05       	cpc	r27, r1
     aac:	7c f0       	brlt	.+30     	; 0xacc <GLCD_PrintInteger+0x1ee>
     aae:	21 e3       	ldi	r18, 0x31	; 49
     ab0:	01 c0       	rjmp	.+2      	; 0xab4 <GLCD_PrintInteger+0x1d6>
     ab2:	23 2f       	mov	r18, r19
	{
		Value -= 100;
     ab4:	84 56       	subi	r24, 0x64	; 100
     ab6:	91 09       	sbc	r25, r1
     ab8:	a1 09       	sbc	r26, r1
     aba:	b1 09       	sbc	r27, r1
     abc:	31 e0       	ldi	r19, 0x01	; 1
     abe:	32 0f       	add	r19, r18
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
     ac0:	84 36       	cpi	r24, 0x64	; 100
     ac2:	91 05       	cpc	r25, r1
     ac4:	a1 05       	cpc	r26, r1
     ac6:	b1 05       	cpc	r27, r1
     ac8:	a4 f7       	brge	.-24     	; 0xab2 <GLCD_PrintInteger+0x1d4>
     aca:	29 87       	std	Y+9, r18	; 0x09
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
     acc:	8a 30       	cpi	r24, 0x0A	; 10
     ace:	91 05       	cpc	r25, r1
     ad0:	a1 05       	cpc	r26, r1
     ad2:	b1 05       	cpc	r27, r1
     ad4:	74 f0       	brlt	.+28     	; 0xaf2 <GLCD_PrintInteger+0x214>
     ad6:	21 e3       	ldi	r18, 0x31	; 49
     ad8:	01 c0       	rjmp	.+2      	; 0xadc <GLCD_PrintInteger+0x1fe>
     ada:	23 2f       	mov	r18, r19
	{
		Value -= 10;
     adc:	0a 97       	sbiw	r24, 0x0a	; 10
     ade:	a1 09       	sbc	r26, r1
     ae0:	b1 09       	sbc	r27, r1
     ae2:	31 e0       	ldi	r19, 0x01	; 1
     ae4:	32 0f       	add	r19, r18
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
     ae6:	8a 30       	cpi	r24, 0x0A	; 10
     ae8:	91 05       	cpc	r25, r1
     aea:	a1 05       	cpc	r26, r1
     aec:	b1 05       	cpc	r27, r1
     aee:	ac f7       	brge	.-22     	; 0xada <GLCD_PrintInteger+0x1fc>
     af0:	2a 87       	std	Y+10, r18	; 0x0a
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
     af2:	18 16       	cp	r1, r24
     af4:	19 06       	cpc	r1, r25
     af6:	1a 06       	cpc	r1, r26
     af8:	1b 06       	cpc	r1, r27
     afa:	0c f0       	brlt	.+2      	; 0xafe <GLCD_PrintInteger+0x220>
     afc:	3b c0       	rjmp	.+118    	; 0xb74 <GLCD_PrintInteger+0x296>
     afe:	ac 01       	movw	r20, r24
     b00:	bd 01       	movw	r22, r26
	{
		Value -= 1;
     b02:	41 50       	subi	r20, 0x01	; 1
     b04:	51 09       	sbc	r21, r1
     b06:	61 09       	sbc	r22, r1
     b08:	71 09       	sbc	r23, r1
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
     b0a:	d9 f7       	brne	.-10     	; 0xb02 <GLCD_PrintInteger+0x224>
     b0c:	80 5d       	subi	r24, 0xD0	; 208
     b0e:	8b 87       	std	Y+11, r24	; 0x0b
     b10:	31 c0       	rjmp	.+98     	; 0xb74 <GLCD_PrintInteger+0x296>
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
		i++;
     b12:	98 2f       	mov	r25, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	89 0f       	add	r24, r25
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
     b18:	e1 e0       	ldi	r30, 0x01	; 1
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	ec 0f       	add	r30, r28
     b1e:	fd 1f       	adc	r31, r29
     b20:	e8 0f       	add	r30, r24
     b22:	f1 1d       	adc	r31, r1
     b24:	20 81       	ld	r18, Z
     b26:	20 33       	cpi	r18, 0x30	; 48
     b28:	a1 f3       	breq	.-24     	; 0xb12 <GLCD_PrintInteger+0x234>
		i++;

	//Add sign
	if (isNegative)
     b2a:	11 23       	and	r17, r17
     b2c:	31 f0       	breq	.+12     	; 0xb3a <GLCD_PrintInteger+0x25c>
	{
		i--;
		BCD[i] = '-';
     b2e:	fe 01       	movw	r30, r28
     b30:	e9 0f       	add	r30, r25
     b32:	f1 1d       	adc	r31, r1
     b34:	8d e2       	ldi	r24, 0x2D	; 45
     b36:	81 83       	std	Z+1, r24	; 0x01
     b38:	89 2f       	mov	r24, r25
	}

	//Shift array
	uint8_t end = 10 - i;
     b3a:	4a e0       	ldi	r20, 0x0A	; 10
     b3c:	48 1b       	sub	r20, r24
	uint8_t offset = i;
	i = 0;
     b3e:	20 e0       	ldi	r18, 0x00	; 0
	while (i <= end)
	{
		BCD[i] = BCD[i + offset];
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	e1 e0       	ldi	r30, 0x01	; 1
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	ec 0f       	add	r30, r28
     b48:	fd 1f       	adc	r31, r29
     b4a:	e2 0f       	add	r30, r18
     b4c:	f1 1d       	adc	r31, r1
     b4e:	df 01       	movw	r26, r30
     b50:	a8 0f       	add	r26, r24
     b52:	b9 1f       	adc	r27, r25
     b54:	3c 91       	ld	r19, X
     b56:	30 83       	st	Z, r19
		i++;
     b58:	2f 5f       	subi	r18, 0xFF	; 255

	//Shift array
	uint8_t end = 10 - i;
	uint8_t offset = i;
	i = 0;
	while (i <= end)
     b5a:	42 17       	cp	r20, r18
     b5c:	90 f7       	brcc	.-28     	; 0xb42 <GLCD_PrintInteger+0x264>
	{
		BCD[i] = BCD[i + offset];
		i++;
	}
	BCD[i] = '\0';
     b5e:	e1 e0       	ldi	r30, 0x01	; 1
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	ec 0f       	add	r30, r28
     b64:	fd 1f       	adc	r31, r29
     b66:	e2 0f       	add	r30, r18
     b68:	f1 1d       	adc	r31, r1
     b6a:	10 82       	st	Z, r1
		
		//Convert integer to array
		Int2bcd(Value, bcd);
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
     b6c:	ce 01       	movw	r24, r28
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	8f de       	rcall	.-738    	; 0x890 <GLCD_PrintString>
	}
}
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <GLCD_PrintInteger+0x29a>
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	ce cf       	rjmp	.-100    	; 0xb14 <GLCD_PrintInteger+0x236>
		Int2bcd(Value, bcd);
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
	}
}
     b78:	2c 96       	adiw	r28, 0x0c	; 12
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	08 95       	ret

00000b8c <GLCD_PrintDouble>:

void GLCD_PrintDouble(double Value, const uint8_t Precision)
{
     b8c:	8f 92       	push	r8
     b8e:	9f 92       	push	r9
     b90:	af 92       	push	r10
     b92:	bf 92       	push	r11
     b94:	cf 92       	push	r12
     b96:	df 92       	push	r13
     b98:	ef 92       	push	r14
     b9a:	ff 92       	push	r15
     b9c:	cf 93       	push	r28
     b9e:	6b 01       	movw	r12, r22
     ba0:	7c 01       	movw	r14, r24
     ba2:	c4 2f       	mov	r28, r20
	if (Value == 0)
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	a9 01       	movw	r20, r18
     baa:	87 d6       	rcall	.+3342   	; 0x18ba <__cmpsf2>
     bac:	81 11       	cpse	r24, r1
     bae:	07 c0       	rjmp	.+14     	; 0xbbe <GLCD_PrintDouble+0x32>
	{
		//Print characters individually so no string is stored in RAM
		GLCD_PrintChar(45);
     bb0:	8d e2       	ldi	r24, 0x2D	; 45
     bb2:	25 dd       	rcall	.-1462   	; 0x5fe <GLCD_PrintChar>
		GLCD_PrintChar(34);
     bb4:	82 e2       	ldi	r24, 0x22	; 34
     bb6:	23 dd       	rcall	.-1466   	; 0x5fe <GLCD_PrintChar>
		GLCD_PrintChar(45);
     bb8:	8d e2       	ldi	r24, 0x2D	; 45
     bba:	21 dd       	rcall	.-1470   	; 0x5fe <GLCD_PrintChar>
     bbc:	42 c0       	rjmp	.+132    	; 0xc42 <GLCD_PrintDouble+0xb6>
	}
	else if ((Value >= (-2147483647)) && (Value < 2147483648))
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	5f ec       	ldi	r21, 0xCF	; 207
     bc6:	c7 01       	movw	r24, r14
     bc8:	b6 01       	movw	r22, r12
     bca:	5e d7       	rcall	.+3772   	; 0x1a88 <__gesf2>
     bcc:	88 23       	and	r24, r24
     bce:	cc f1       	brlt	.+114    	; 0xc42 <GLCD_PrintDouble+0xb6>
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	5f e4       	ldi	r21, 0x4F	; 79
     bd8:	c7 01       	movw	r24, r14
     bda:	b6 01       	movw	r22, r12
     bdc:	6e d6       	rcall	.+3292   	; 0x18ba <__cmpsf2>
     bde:	88 23       	and	r24, r24
     be0:	84 f5       	brge	.+96     	; 0xc42 <GLCD_PrintDouble+0xb6>
	{
		//Print sign
		if (Value < 0)
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	a9 01       	movw	r20, r18
     be8:	c7 01       	movw	r24, r14
     bea:	b6 01       	movw	r22, r12
     bec:	66 d6       	rcall	.+3276   	; 0x18ba <__cmpsf2>
     bee:	88 23       	and	r24, r24
     bf0:	34 f4       	brge	.+12     	; 0xbfe <GLCD_PrintDouble+0x72>
		{
			Value = -Value;
     bf2:	f7 fa       	bst	r15, 7
     bf4:	f0 94       	com	r15
     bf6:	f7 f8       	bld	r15, 7
     bf8:	f0 94       	com	r15
			GLCD_PrintChar(33);
     bfa:	81 e2       	ldi	r24, 0x21	; 33
     bfc:	00 dd       	rcall	.-1536   	; 0x5fe <GLCD_PrintChar>
		}
		
		//Print integer part
		GLCD_PrintInteger(Value);
     bfe:	c7 01       	movw	r24, r14
     c00:	b6 01       	movw	r22, r12
     c02:	5f d6       	rcall	.+3262   	; 0x18c2 <__fixsfsi>
     c04:	6c de       	rcall	.-808    	; 0x8de <GLCD_PrintInteger>
		
		//Print dot
		GLCD_PrintChar(34);
     c06:	82 e2       	ldi	r24, 0x22	; 34
     c08:	fa dc       	rcall	.-1548   	; 0x5fe <GLCD_PrintChar>
		
		//Print decimal part
		GLCD_PrintInteger((Value - (uint32_t)(Value)) * pow(10, Precision));
     c0a:	6c 2f       	mov	r22, r28
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	88 d6       	rcall	.+3344   	; 0x1924 <__floatunsisf>
     c14:	9b 01       	movw	r18, r22
     c16:	ac 01       	movw	r20, r24
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	80 e2       	ldi	r24, 0x20	; 32
     c1e:	91 e4       	ldi	r25, 0x41	; 65
     c20:	a2 d7       	rcall	.+3908   	; 0x1b66 <pow>
     c22:	4b 01       	movw	r8, r22
     c24:	5c 01       	movw	r10, r24
     c26:	c7 01       	movw	r24, r14
     c28:	b6 01       	movw	r22, r12
     c2a:	50 d6       	rcall	.+3232   	; 0x18cc <__fixunssfsi>
     c2c:	7b d6       	rcall	.+3318   	; 0x1924 <__floatunsisf>
     c2e:	9b 01       	movw	r18, r22
     c30:	ac 01       	movw	r20, r24
     c32:	c7 01       	movw	r24, r14
     c34:	b6 01       	movw	r22, r12
     c36:	dc d5       	rcall	.+3000   	; 0x17f0 <__subsf3>
     c38:	a5 01       	movw	r20, r10
     c3a:	94 01       	movw	r18, r8
     c3c:	29 d7       	rcall	.+3666   	; 0x1a90 <__mulsf3>
     c3e:	41 d6       	rcall	.+3202   	; 0x18c2 <__fixsfsi>
     c40:	4e de       	rcall	.-868    	; 0x8de <GLCD_PrintInteger>
	}
}
     c42:	cf 91       	pop	r28
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	df 90       	pop	r13
     c4a:	cf 90       	pop	r12
     c4c:	bf 90       	pop	r11
     c4e:	af 90       	pop	r10
     c50:	9f 90       	pop	r9
     c52:	8f 90       	pop	r8
     c54:	08 95       	ret

00000c56 <_ZN6HTU21DC1E17HTU21D_RESOLUTION>:
  userRegisterData  = read8(HTU21D_USER_REGISTER_READ);
  userRegisterData &= 0x40;

  if (userRegisterData == 0x00) return true;
                                return false;
}
     c56:	fc 01       	movw	r30, r24
     c58:	60 83       	st	Z, r22
     c5a:	08 95       	ret

00000c5c <_ZN6HTU21D6write8Ehh>:
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	d6 2f       	mov	r29, r22
     c62:	c4 2f       	mov	r28, r20
     c64:	60 e4       	ldi	r22, 0x40	; 64
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	82 e6       	ldi	r24, 0x62	; 98
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	73 d2       	rcall	.+1254   	; 0x1154 <_ZN7USIWire17beginTransmissionEi>
     c6e:	6d 2f       	mov	r22, r29
     c70:	82 e6       	ldi	r24, 0x62	; 98
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	91 d2       	rcall	.+1314   	; 0x1198 <_ZN7USIWire5writeEh>
     c76:	6c 2f       	mov	r22, r28
     c78:	82 e6       	ldi	r24, 0x62	; 98
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	8d d2       	rcall	.+1306   	; 0x1198 <_ZN7USIWire5writeEh>
     c7e:	61 e0       	ldi	r22, 0x01	; 1
     c80:	82 e6       	ldi	r24, 0x62	; 98
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	69 d2       	rcall	.+1234   	; 0x1158 <_ZN7USIWire15endTransmissionEh>
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	08 95       	ret

00000c8c <_ZN6HTU21D5read8Eh>:
     c8c:	cf 93       	push	r28
     c8e:	c6 2f       	mov	r28, r22
     c90:	60 e4       	ldi	r22, 0x40	; 64
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	82 e6       	ldi	r24, 0x62	; 98
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	5d d2       	rcall	.+1210   	; 0x1154 <_ZN7USIWire17beginTransmissionEi>
     c9a:	6c 2f       	mov	r22, r28
     c9c:	82 e6       	ldi	r24, 0x62	; 98
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	7b d2       	rcall	.+1270   	; 0x1198 <_ZN7USIWire5writeEh>
     ca2:	61 e0       	ldi	r22, 0x01	; 1
     ca4:	82 e6       	ldi	r24, 0x62	; 98
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	57 d2       	rcall	.+1198   	; 0x1158 <_ZN7USIWire15endTransmissionEh>
     caa:	81 11       	cpse	r24, r1
     cac:	12 c0       	rjmp	.+36     	; 0xcd2 <_ZN6HTU21D5read8Eh+0x46>
     cae:	21 e0       	ldi	r18, 0x01	; 1
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	41 e0       	ldi	r20, 0x01	; 1
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	60 e4       	ldi	r22, 0x40	; 64
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	82 e6       	ldi	r24, 0x62	; 98
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0c d3       	rcall	.+1560   	; 0x12d8 <_ZN7USIWire11requestFromEiii>
     cc0:	82 e6       	ldi	r24, 0x62	; 98
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0b d3       	rcall	.+1558   	; 0x12dc <_ZN7USIWire9availableEv>
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	31 f4       	brne	.+12     	; 0xcd6 <_ZN6HTU21D5read8Eh+0x4a>
     cca:	82 e6       	ldi	r24, 0x62	; 98
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	13 d3       	rcall	.+1574   	; 0x12f6 <_ZN7USIWire4readEv>
     cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <_ZN6HTU21D5read8Eh+0x4c>
     cd2:	8f ef       	ldi	r24, 0xFF	; 255
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <_ZN6HTU21D5read8Eh+0x4c>
     cd6:	8f ef       	ldi	r24, 0xFF	; 255
     cd8:	cf 91       	pop	r28
     cda:	08 95       	ret

00000cdc <_ZN6HTU21D13setResolutionE17HTU21D_RESOLUTION>:
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	ec 01       	movw	r28, r24
     ce4:	16 2f       	mov	r17, r22
     ce6:	67 ee       	ldi	r22, 0xE7	; 231
     ce8:	d1 df       	rcall	.-94     	; 0xc8c <_ZN6HTU21D5read8Eh>
     cea:	8e 77       	andi	r24, 0x7E	; 126
     cec:	48 2f       	mov	r20, r24
     cee:	41 2b       	or	r20, r17
     cf0:	66 ee       	ldi	r22, 0xE6	; 230
     cf2:	ce 01       	movw	r24, r28
     cf4:	b3 df       	rcall	.-154    	; 0xc5c <_ZN6HTU21D6write8Ehh>
     cf6:	18 83       	st	Y, r17
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	08 95       	ret

00000d00 <_ZN6HTU21D9setHeaterE20HTU21D_HEATER_SWITCH>:
      reverse drift effect.
    - heater consumtion is 3.09mA - 94.20mA @ 3.3v.
*/
/**************************************************************************/
void HTU21D::setHeater(HTU21D_HEATER_SWITCH heaterSwitch)
{
     d00:	1f 93       	push	r17
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	ec 01       	movw	r28, r24
     d08:	16 2f       	mov	r17, r22
  uint8_t userRegisterData = 0;

  userRegisterData = read8(HTU21D_USER_REGISTER_READ);
     d0a:	67 ee       	ldi	r22, 0xE7	; 231
     d0c:	bf df       	rcall	.-130    	; 0xc8c <_ZN6HTU21D5read8Eh>

  switch(heaterSwitch)
     d0e:	14 30       	cpi	r17, 0x04	; 4
     d10:	19 f0       	breq	.+6      	; 0xd18 <_ZN6HTU21D9setHeaterE20HTU21D_HEATER_SWITCH+0x18>
     d12:	1b 3f       	cpi	r17, 0xFB	; 251
     d14:	19 f0       	breq	.+6      	; 0xd1c <_ZN6HTU21D9setHeaterE20HTU21D_HEATER_SWITCH+0x1c>
     d16:	03 c0       	rjmp	.+6      	; 0xd1e <_ZN6HTU21D9setHeaterE20HTU21D_HEATER_SWITCH+0x1e>
  {
    case HTU21D_ON:
      userRegisterData |= heaterSwitch;
     d18:	84 60       	ori	r24, 0x04	; 4
      break;
     d1a:	01 c0       	rjmp	.+2      	; 0xd1e <_ZN6HTU21D9setHeaterE20HTU21D_HEATER_SWITCH+0x1e>

    case HTU21D_OFF:
      userRegisterData &= heaterSwitch;
     d1c:	8b 7f       	andi	r24, 0xFB	; 251
      break;
  }

  write8(HTU21D_USER_REGISTER_WRITE, userRegisterData);
     d1e:	48 2f       	mov	r20, r24
     d20:	66 ee       	ldi	r22, 0xE6	; 230
     d22:	ce 01       	movw	r24, r28
     d24:	9b df       	rcall	.-202    	; 0xc5c <_ZN6HTU21D6write8Ehh>
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	08 95       	ret

00000d2e <_ZN6HTU21D5beginEv>:
      - 3 received NACK on transmit of data
      - 4 other error
*/
/**************************************************************************/
bool HTU21D::begin(void) 
{
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	ec 01       	movw	r28, r24
  Wire.begin();
     d34:	82 e6       	ldi	r24, 0x62	; 98
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	f6 d1       	rcall	.+1004   	; 0x1126 <_ZN7USIWire5beginEv>
  Wire.setClock(100000UL);                           //experimental! AVR i2c bus speed: 31kHz..400kHz/31000UL..400000UL, default 100000UL
     d3a:	40 ea       	ldi	r20, 0xA0	; 160
     d3c:	56 e8       	ldi	r21, 0x86	; 134
     d3e:	61 e0       	ldi	r22, 0x01	; 1
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	82 e6       	ldi	r24, 0x62	; 98
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	f7 d1       	rcall	.+1006   	; 0x1136 <_ZN7USIWire8setClockEm>

  Wire.beginTransmission(HTU21D_ADDRESS);
     d48:	60 e4       	ldi	r22, 0x40	; 64
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	82 e6       	ldi	r24, 0x62	; 98
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	01 d2       	rcall	.+1026   	; 0x1154 <_ZN7USIWire17beginTransmissionEi>
  if (Wire.endTransmission(true) != 0) return false; //safety check, make sure the sensor is connected
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	82 e6       	ldi	r24, 0x62	; 98
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	ff d1       	rcall	.+1022   	; 0x1158 <_ZN7USIWire15endTransmissionEh>
     d5a:	81 11       	cpse	r24, r1
     d5c:	08 c0       	rjmp	.+16     	; 0xd6e <_ZN6HTU21D5beginEv+0x40>

  setResolution(_resolution);
     d5e:	68 81       	ld	r22, Y
     d60:	ce 01       	movw	r24, r28
     d62:	bc df       	rcall	.-136    	; 0xcdc <_ZN6HTU21D13setResolutionE17HTU21D_RESOLUTION>
  setHeater(HTU21D_OFF);
     d64:	6b ef       	ldi	r22, 0xFB	; 251
     d66:	ce 01       	movw	r24, r28
     d68:	cb df       	rcall	.-106    	; 0xd00 <_ZN6HTU21D9setHeaterE20HTU21D_HEATER_SWITCH>

  return true;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	01 c0       	rjmp	.+2      	; 0xd70 <_ZN6HTU21D5beginEv+0x42>
{
  Wire.begin();
  Wire.setClock(100000UL);                           //experimental! AVR i2c bus speed: 31kHz..400kHz/31000UL..400000UL, default 100000UL

  Wire.beginTransmission(HTU21D_ADDRESS);
  if (Wire.endTransmission(true) != 0) return false; //safety check, make sure the sensor is connected
     d6e:	80 e0       	ldi	r24, 0x00	; 0

  setResolution(_resolution);
  setHeater(HTU21D_OFF);

  return true;
}
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <_ZN6HTU21D9checkCRC8Ej>:
    - for more info about Cyclic Redundancy Check (CRC) see
      http://en.wikipedia.org/wiki/Computation_of_cyclic_redundancy_checks
*/
/**************************************************************************/
uint8_t HTU21D::checkCRC8(uint16_t data)
{
     d76:	80 e1       	ldi	r24, 0x10	; 16
  for (uint8_t bit = 0; bit < 16; bit++)
  {
    if   (data & 0x8000) data = (data << 1) ^ HTU21D_CRC8_POLYNOMINAL;
     d78:	77 23       	and	r23, r23
     d7a:	2c f4       	brge	.+10     	; 0xd86 <_ZN6HTU21D9checkCRC8Ej+0x10>
     d7c:	66 0f       	add	r22, r22
     d7e:	77 1f       	adc	r23, r23
     d80:	91 e3       	ldi	r25, 0x31	; 49
     d82:	79 27       	eor	r23, r25
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <_ZN6HTU21D9checkCRC8Ej+0x14>
    else data <<= 1;
     d86:	66 0f       	add	r22, r22
     d88:	77 1f       	adc	r23, r23
     d8a:	81 50       	subi	r24, 0x01	; 1
      http://en.wikipedia.org/wiki/Computation_of_cyclic_redundancy_checks
*/
/**************************************************************************/
uint8_t HTU21D::checkCRC8(uint16_t data)
{
  for (uint8_t bit = 0; bit < 16; bit++)
     d8c:	a9 f7       	brne	.-22     	; 0xd78 <_ZN6HTU21D9checkCRC8Ej+0x2>
  {
    if   (data & 0x8000) data = (data << 1) ^ HTU21D_CRC8_POLYNOMINAL;
    else data <<= 1;
  }
  return data >>= 8;
}
     d8e:	87 2f       	mov	r24, r23
     d90:	08 95       	ret

00000d92 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE>:
      - "HTU21D_TRIGGER_HUMD_MEASURE_HOLD" mode, sensor blocks communication
        on I2C bus by keeping SCL line LOW during measurement.
*/
/**************************************************************************/
float HTU21D::readHumidity(HTU21D_HUMD_OPERATION_MODE sensorOperationMode)
{
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	8c 01       	movw	r16, r24
     d9e:	c6 2f       	mov	r28, r22
  uint16_t rawHumidity = 0;
  uint8_t  checksum    = 0;
  float    humidity    = 0;

  /* request humidity measurement */
  Wire.beginTransmission(HTU21D_ADDRESS);
     da0:	60 e4       	ldi	r22, 0x40	; 64
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	82 e6       	ldi	r24, 0x62	; 98
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	d5 d1       	rcall	.+938    	; 0x1154 <_ZN7USIWire17beginTransmissionEi>
    uint8_t isActive(void);

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     daa:	6c 2f       	mov	r22, r28
     dac:	82 e6       	ldi	r24, 0x62	; 98
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	f3 d1       	rcall	.+998    	; 0x1198 <_ZN7USIWire5writeEh>
  Wire.write(sensorOperationMode);
  if (Wire.endTransmission(true) != 0) return HTU21D_ERROR;    //error handler, collision on the i2c bus
     db2:	61 e0       	ldi	r22, 0x01	; 1
     db4:	82 e6       	ldi	r24, 0x62	; 98
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	cf d1       	rcall	.+926    	; 0x1158 <_ZN7USIWire15endTransmissionEh>
     dba:	81 11       	cpse	r24, r1
     dbc:	72 c0       	rjmp	.+228    	; 0xea2 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x110>

  /* humidity measurement delay */
  switch(_resolution)
     dbe:	f8 01       	movw	r30, r16
     dc0:	80 81       	ld	r24, Z
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	d9 f0       	breq	.+54     	; 0xdfc <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x6a>
     dc6:	28 f0       	brcs	.+10     	; 0xdd2 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x40>
     dc8:	80 38       	cpi	r24, 0x80	; 128
     dca:	89 f0       	breq	.+34     	; 0xdee <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x5c>
     dcc:	81 38       	cpi	r24, 0x81	; 129
     dce:	41 f0       	breq	.+16     	; 0xde0 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x4e>
     dd0:	1b c0       	rjmp	.+54     	; 0xe08 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x76>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dd2:	81 e5       	ldi	r24, 0x51	; 81
     dd4:	9c e1       	ldi	r25, 0x1C	; 28
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	f1 f7       	brne	.-4      	; 0xdd6 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x44>
     dda:	00 c0       	rjmp	.+0      	; 0xddc <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x4a>
     ddc:	00 00       	nop
     dde:	14 c0       	rjmp	.+40     	; 0xe08 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x76>
     de0:	e5 ea       	ldi	r30, 0xA5	; 165
     de2:	fe e0       	ldi	r31, 0x0E	; 14
     de4:	31 97       	sbiw	r30, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x52>
     de8:	00 c0       	rjmp	.+0      	; 0xdea <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x58>
     dea:	00 00       	nop
     dec:	0d c0       	rjmp	.+26     	; 0xe08 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x76>
     dee:	89 ec       	ldi	r24, 0xC9	; 201
     df0:	98 e0       	ldi	r25, 0x08	; 8
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	f1 f7       	brne	.-4      	; 0xdf2 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x60>
     df6:	00 c0       	rjmp	.+0      	; 0xdf8 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x66>
     df8:	00 00       	nop
     dfa:	06 c0       	rjmp	.+12     	; 0xe08 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x76>
     dfc:	e7 ee       	ldi	r30, 0xE7	; 231
     dfe:	f3 e0       	ldi	r31, 0x03	; 3
     e00:	31 97       	sbiw	r30, 0x01	; 1
     e02:	f1 f7       	brne	.-4      	; 0xe00 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x6e>
     e04:	00 c0       	rjmp	.+0      	; 0xe06 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x74>
     e06:	00 00       	nop
      _delay_ms(4);                                                //HTU21D - 2..3msec,   Si7021 - 3..4msec,   SHT21 - 3..4msec
      break;
  }

  /* read humidity measurement to "wire.h" rxBuffer */
  Wire.requestFrom(HTU21D_ADDRESS, 3, true);                   //true, stop message after transmission & releas the I2C bus
     e08:	21 e0       	ldi	r18, 0x01	; 1
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	43 e0       	ldi	r20, 0x03	; 3
     e0e:	50 e0       	ldi	r21, 0x00	; 0
     e10:	60 e4       	ldi	r22, 0x40	; 64
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	82 e6       	ldi	r24, 0x62	; 98
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	5f d2       	rcall	.+1214   	; 0x12d8 <_ZN7USIWire11requestFromEiii>
  if (Wire.available() != 3) return HTU21D_ERROR;              //check rxBuffer & error handler, collision on the i2c bus
     e1a:	82 e6       	ldi	r24, 0x62	; 98
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	5e d2       	rcall	.+1212   	; 0x12dc <_ZN7USIWire9availableEv>
     e20:	03 97       	sbiw	r24, 0x03	; 3
     e22:	09 f0       	breq	.+2      	; 0xe26 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x94>
     e24:	43 c0       	rjmp	.+134    	; 0xeac <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x11a>

  /* reads MSB, LSB byte & checksum from "wire.h" rxBuffer */
  rawHumidity  = Wire.read() << 8;                             //reads MSB byte & shift it to the right
     e26:	82 e6       	ldi	r24, 0x62	; 98
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	65 d2       	rcall	.+1226   	; 0x12f6 <_ZN7USIWire4readEv>
     e2c:	d8 2f       	mov	r29, r24
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	cf 2f       	mov	r28, r31
  rawHumidity |= Wire.read();                                  //reads LSB byte & sum with MSB byte
     e32:	82 e6       	ldi	r24, 0x62	; 98
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	5f d2       	rcall	.+1214   	; 0x12f6 <_ZN7USIWire4readEv>
     e38:	c8 2b       	or	r28, r24
     e3a:	d9 2b       	or	r29, r25
  checksum     = Wire.read();                                  //reads checksum
     e3c:	82 e6       	ldi	r24, 0x62	; 98
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	5a d2       	rcall	.+1204   	; 0x12f6 <_ZN7USIWire4readEv>
     e42:	f8 2e       	mov	r15, r24

  if (checkCRC8(rawHumidity) != checksum) return HTU21D_ERROR; //error handler, checksum verification
     e44:	be 01       	movw	r22, r28
     e46:	c8 01       	movw	r24, r16
     e48:	96 df       	rcall	.-212    	; 0xd76 <_ZN6HTU21D9checkCRC8Ej>
     e4a:	8f 11       	cpse	r24, r15
     e4c:	34 c0       	rjmp	.+104    	; 0xeb6 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x124>

  rawHumidity ^= 0x02;                                         //clear status bits, humidity always returns xxxxxx10 in the LSB field
  humidity     = (0.001907 * (float)rawHumidity - 6);
     e4e:	be 01       	movw	r22, r28
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	68 27       	eor	r22, r24
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	65 d5       	rcall	.+2762   	; 0x1924 <__floatunsisf>
     e5a:	2d e4       	ldi	r18, 0x4D	; 77
     e5c:	34 ef       	ldi	r19, 0xF4	; 244
     e5e:	49 ef       	ldi	r20, 0xF9	; 249
     e60:	5a e3       	ldi	r21, 0x3A	; 58
     e62:	16 d6       	rcall	.+3116   	; 0x1a90 <__mulsf3>
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 ec       	ldi	r20, 0xC0	; 192
     e6a:	50 e4       	ldi	r21, 0x40	; 64
     e6c:	c1 d4       	rcall	.+2434   	; 0x17f0 <__subsf3>
     e6e:	06 2f       	mov	r16, r22
     e70:	17 2f       	mov	r17, r23
     e72:	d8 2f       	mov	r29, r24
     e74:	c9 2f       	mov	r28, r25
  
  if      (humidity < 0)   humidity = 0;                       //due to RH accuracy, measured value might be slightly less than 0 or more 100
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	a9 01       	movw	r20, r18
     e7c:	1e d5       	rcall	.+2620   	; 0x18ba <__cmpsf2>
     e7e:	88 23       	and	r24, r24
     e80:	fc f0       	brlt	.+62     	; 0xec0 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x12e>
  else if (humidity > 100) humidity = 100;
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	48 ec       	ldi	r20, 0xC8	; 200
     e88:	52 e4       	ldi	r21, 0x42	; 66
     e8a:	60 2f       	mov	r22, r16
     e8c:	71 2f       	mov	r23, r17
     e8e:	8d 2f       	mov	r24, r29
     e90:	9c 2f       	mov	r25, r28
     e92:	fa d5       	rcall	.+3060   	; 0x1a88 <__gesf2>
     e94:	18 16       	cp	r1, r24
     e96:	cc f4       	brge	.+50     	; 0xeca <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x138>
     e98:	50 e0       	ldi	r21, 0x00	; 0
     e9a:	40 e0       	ldi	r20, 0x00	; 0
     e9c:	38 ec       	ldi	r19, 0xC8	; 200
     e9e:	22 e4       	ldi	r18, 0x42	; 66
     ea0:	18 c0       	rjmp	.+48     	; 0xed2 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x140>
  float    humidity    = 0;

  /* request humidity measurement */
  Wire.beginTransmission(HTU21D_ADDRESS);
  Wire.write(sensorOperationMode);
  if (Wire.endTransmission(true) != 0) return HTU21D_ERROR;    //error handler, collision on the i2c bus
     ea2:	50 e0       	ldi	r21, 0x00	; 0
     ea4:	40 e0       	ldi	r20, 0x00	; 0
     ea6:	3f e7       	ldi	r19, 0x7F	; 127
     ea8:	23 e4       	ldi	r18, 0x43	; 67
     eaa:	13 c0       	rjmp	.+38     	; 0xed2 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x140>
      break;
  }

  /* read humidity measurement to "wire.h" rxBuffer */
  Wire.requestFrom(HTU21D_ADDRESS, 3, true);                   //true, stop message after transmission & releas the I2C bus
  if (Wire.available() != 3) return HTU21D_ERROR;              //check rxBuffer & error handler, collision on the i2c bus
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	3f e7       	ldi	r19, 0x7F	; 127
     eb2:	23 e4       	ldi	r18, 0x43	; 67
     eb4:	0e c0       	rjmp	.+28     	; 0xed2 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x140>
  /* reads MSB, LSB byte & checksum from "wire.h" rxBuffer */
  rawHumidity  = Wire.read() << 8;                             //reads MSB byte & shift it to the right
  rawHumidity |= Wire.read();                                  //reads LSB byte & sum with MSB byte
  checksum     = Wire.read();                                  //reads checksum

  if (checkCRC8(rawHumidity) != checksum) return HTU21D_ERROR; //error handler, checksum verification
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	3f e7       	ldi	r19, 0x7F	; 127
     ebc:	23 e4       	ldi	r18, 0x43	; 67
     ebe:	09 c0       	rjmp	.+18     	; 0xed2 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x140>

  rawHumidity ^= 0x02;                                         //clear status bits, humidity always returns xxxxxx10 in the LSB field
  humidity     = (0.001907 * (float)rawHumidity - 6);
  
  if      (humidity < 0)   humidity = 0;                       //due to RH accuracy, measured value might be slightly less than 0 or more 100
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	04 c0       	rjmp	.+8      	; 0xed2 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE+0x140>
  checksum     = Wire.read();                                  //reads checksum

  if (checkCRC8(rawHumidity) != checksum) return HTU21D_ERROR; //error handler, checksum verification

  rawHumidity ^= 0x02;                                         //clear status bits, humidity always returns xxxxxx10 in the LSB field
  humidity     = (0.001907 * (float)rawHumidity - 6);
     eca:	50 2f       	mov	r21, r16
     ecc:	41 2f       	mov	r20, r17
     ece:	3d 2f       	mov	r19, r29
     ed0:	2c 2f       	mov	r18, r28
  
  if      (humidity < 0)   humidity = 0;                       //due to RH accuracy, measured value might be slightly less than 0 or more 100
  else if (humidity > 100) humidity = 100;

  return humidity;
}
     ed2:	65 2f       	mov	r22, r21
     ed4:	74 2f       	mov	r23, r20
     ed6:	83 2f       	mov	r24, r19
     ed8:	92 2f       	mov	r25, r18
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	08 95       	ret

00000ee6 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE>:
        For HTU21D & SHT21 you have to manualy call
        "readCompensatedHumidity()"
*/
/**************************************************************************/
float HTU21D::readTemperature(HTU21D_TEMP_OPERATION_MODE sensorOperationMode)
{
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	8c 01       	movw	r16, r24
     ef2:	c6 2f       	mov	r28, r22
  int8_t   qntRequest     = 3;                                                                //3 bytes -> MSB, LSB byte & checksum or 2 bytes -> MSB, LSB byte
  uint16_t rawTemperature = 0;
  uint8_t  checksum       = 0;

  /* request temperature measurement */
  Wire.beginTransmission(HTU21D_ADDRESS);
     ef4:	60 e4       	ldi	r22, 0x40	; 64
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	82 e6       	ldi	r24, 0x62	; 98
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	2b d1       	rcall	.+598    	; 0x1154 <_ZN7USIWire17beginTransmissionEi>
     efe:	6c 2f       	mov	r22, r28
     f00:	82 e6       	ldi	r24, 0x62	; 98
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	49 d1       	rcall	.+658    	; 0x1198 <_ZN7USIWire5writeEh>
  Wire.write(sensorOperationMode);
  if (Wire.endTransmission(true) != 0) return HTU21D_ERROR;                                   //error handler, collision on the i2c bus
     f06:	61 e0       	ldi	r22, 0x01	; 1
     f08:	82 e6       	ldi	r24, 0x62	; 98
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	25 d1       	rcall	.+586    	; 0x1158 <_ZN7USIWire15endTransmissionEh>
     f0e:	81 11       	cpse	r24, r1
     f10:	61 c0       	rjmp	.+194    	; 0xfd4 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0xee>

  /* temperature measurement delay */
  if (sensorOperationMode != SI70xx_TEMP_READ_AFTER_RH_MEASURMENT)
     f12:	c0 3e       	cpi	r28, 0xE0	; 224
     f14:	31 f1       	breq	.+76     	; 0xf62 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x7c>
  {
    switch(_resolution)
     f16:	f8 01       	movw	r30, r16
     f18:	80 81       	ld	r24, Z
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	a1 f0       	breq	.+40     	; 0xf46 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x60>
     f1e:	28 f0       	brcs	.+10     	; 0xf2a <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x44>
     f20:	80 38       	cpi	r24, 0x80	; 128
     f22:	51 f0       	breq	.+20     	; 0xf38 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x52>
     f24:	81 38       	cpi	r24, 0x81	; 129
     f26:	b1 f0       	breq	.+44     	; 0xf54 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x6e>
     f28:	1e c0       	rjmp	.+60     	; 0xf66 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x80>
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	93 e5       	ldi	r25, 0x53	; 83
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x48>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x4e>
     f34:	00 00       	nop
     f36:	6e c0       	rjmp	.+220    	; 0x1014 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x12e>
     f38:	ed ef       	ldi	r30, 0xFD	; 253
     f3a:	f9 e2       	ldi	r31, 0x29	; 41
     f3c:	31 97       	sbiw	r30, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x56>
     f40:	00 c0       	rjmp	.+0      	; 0xf42 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x5c>
     f42:	00 00       	nop
     f44:	67 c0       	rjmp	.+206    	; 0x1014 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x12e>
     f46:	8b e7       	ldi	r24, 0x7B	; 123
     f48:	95 e1       	ldi	r25, 0x15	; 21
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	f1 f7       	brne	.-4      	; 0xf4a <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x64>
     f4e:	00 c0       	rjmp	.+0      	; 0xf50 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x6a>
     f50:	00 00       	nop
     f52:	60 c0       	rjmp	.+192    	; 0x1014 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x12e>
     f54:	ed eb       	ldi	r30, 0xBD	; 189
     f56:	fa e0       	ldi	r31, 0x0A	; 10
     f58:	31 97       	sbiw	r30, 0x01	; 1
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x72>
     f5c:	00 c0       	rjmp	.+0      	; 0xf5e <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x78>
     f5e:	00 00       	nop
     f60:	59 c0       	rjmp	.+178    	; 0x1014 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x12e>
      case HTU21D_RES_RH11_TEMP11:
        _delay_ms(11);                                                                            //HTU21D - 6..7msec,   Si7021 - 2..3msec,  SHT21 - 9..11msec
        break;
    }
  }
  else qntRequest = 2;                                                                        //checksum is not available with "SI70xx_TEMP_READ_AFTER_RH_MEASURMENT"
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x82>
        "readCompensatedHumidity()"
*/
/**************************************************************************/
float HTU21D::readTemperature(HTU21D_TEMP_OPERATION_MODE sensorOperationMode)
{
  int8_t   qntRequest     = 3;                                                                //3 bytes -> MSB, LSB byte & checksum or 2 bytes -> MSB, LSB byte
     f66:	83 e0       	ldi	r24, 0x03	; 3
    }
  }
  else qntRequest = 2;                                                                        //checksum is not available with "SI70xx_TEMP_READ_AFTER_RH_MEASURMENT"

  /* read temperature measurement to "wire.h" rxBuffer */
  Wire.requestFrom(HTU21D_ADDRESS, qntRequest, true);                                         //true, stop message after transmission & releas the I2C bus
     f68:	e8 2e       	mov	r14, r24
     f6a:	88 0f       	add	r24, r24
     f6c:	ff 08       	sbc	r15, r15
     f6e:	21 e0       	ldi	r18, 0x01	; 1
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	a7 01       	movw	r20, r14
     f74:	60 e4       	ldi	r22, 0x40	; 64
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	82 e6       	ldi	r24, 0x62	; 98
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	ad d1       	rcall	.+858    	; 0x12d8 <_ZN7USIWire11requestFromEiii>
  if (Wire.available() != qntRequest) return HTU21D_ERROR;                                    //check rxBuffer & error handler, collision on the i2c bus
     f7e:	82 e6       	ldi	r24, 0x62	; 98
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	ac d1       	rcall	.+856    	; 0x12dc <_ZN7USIWire9availableEv>
     f84:	e8 16       	cp	r14, r24
     f86:	f9 06       	cpc	r15, r25
     f88:	51 f5       	brne	.+84     	; 0xfde <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0xf8>

  /* reads MSB, LSB byte & checksum from "wire.h" rxBuffer */
  rawTemperature  = Wire.read() << 8;                                                         //reads MSB byte & shift it to the right
     f8a:	82 e6       	ldi	r24, 0x62	; 98
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	b3 d1       	rcall	.+870    	; 0x12f6 <_ZN7USIWire4readEv>
     f90:	e1 2c       	mov	r14, r1
     f92:	f1 2c       	mov	r15, r1
     f94:	f8 2e       	mov	r15, r24
  rawTemperature |= Wire.read();                                                              //reads LSB byte and sum. with MSB byte
     f96:	82 e6       	ldi	r24, 0x62	; 98
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	ad d1       	rcall	.+858    	; 0x12f6 <_ZN7USIWire4readEv>
     f9c:	e8 2a       	or	r14, r24
     f9e:	f9 2a       	or	r15, r25
  if (sensorOperationMode != SI70xx_TEMP_READ_AFTER_RH_MEASURMENT) checksum = Wire.read();    //checksum is not available with "SI70xx_TEMP_READ_AFTER_RH_MEASURMENT"
     fa0:	c0 3e       	cpi	r28, 0xE0	; 224
     fa2:	49 f0       	breq	.+18     	; 0xfb6 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0xd0>
     fa4:	82 e6       	ldi	r24, 0x62	; 98
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	a6 d1       	rcall	.+844    	; 0x12f6 <_ZN7USIWire4readEv>
     faa:	c8 2f       	mov	r28, r24

  /* checksum is not available with "SI70xx_TEMP_READ_AFTER_RH_MEASURMENT" */
  if (sensorOperationMode != SI70xx_TEMP_READ_AFTER_RH_MEASURMENT && checkCRC8(rawTemperature) != checksum) return HTU21D_ERROR; //error handler, checksum verification
     fac:	b7 01       	movw	r22, r14
     fae:	c8 01       	movw	r24, r16
     fb0:	e2 de       	rcall	.-572    	; 0xd76 <_ZN6HTU21D9checkCRC8Ej>
     fb2:	8c 13       	cpse	r24, r28
     fb4:	19 c0       	rjmp	.+50     	; 0xfe8 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x102>

  return (0.002681 * (float)rawTemperature - 46.85);                                          //temperature always returns xxxxxx00 in the LSB field
     fb6:	b7 01       	movw	r22, r14
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	b3 d4       	rcall	.+2406   	; 0x1924 <__floatunsisf>
     fbe:	27 eb       	ldi	r18, 0xB7	; 183
     fc0:	33 eb       	ldi	r19, 0xB3	; 179
     fc2:	4f e2       	ldi	r20, 0x2F	; 47
     fc4:	5b e3       	ldi	r21, 0x3B	; 59
     fc6:	64 d5       	rcall	.+2760   	; 0x1a90 <__mulsf3>
     fc8:	26 e6       	ldi	r18, 0x66	; 102
     fca:	36 e6       	ldi	r19, 0x66	; 102
     fcc:	4b e3       	ldi	r20, 0x3B	; 59
     fce:	52 e4       	ldi	r21, 0x42	; 66
     fd0:	0f d4       	rcall	.+2078   	; 0x17f0 <__subsf3>
     fd2:	2f c0       	rjmp	.+94     	; 0x1032 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x14c>
  uint8_t  checksum       = 0;

  /* request temperature measurement */
  Wire.beginTransmission(HTU21D_ADDRESS);
  Wire.write(sensorOperationMode);
  if (Wire.endTransmission(true) != 0) return HTU21D_ERROR;                                   //error handler, collision on the i2c bus
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	8f e7       	ldi	r24, 0x7F	; 127
     fda:	93 e4       	ldi	r25, 0x43	; 67
     fdc:	2a c0       	rjmp	.+84     	; 0x1032 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x14c>
  }
  else qntRequest = 2;                                                                        //checksum is not available with "SI70xx_TEMP_READ_AFTER_RH_MEASURMENT"

  /* read temperature measurement to "wire.h" rxBuffer */
  Wire.requestFrom(HTU21D_ADDRESS, qntRequest, true);                                         //true, stop message after transmission & releas the I2C bus
  if (Wire.available() != qntRequest) return HTU21D_ERROR;                                    //check rxBuffer & error handler, collision on the i2c bus
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	8f e7       	ldi	r24, 0x7F	; 127
     fe4:	93 e4       	ldi	r25, 0x43	; 67
     fe6:	25 c0       	rjmp	.+74     	; 0x1032 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x14c>
  rawTemperature  = Wire.read() << 8;                                                         //reads MSB byte & shift it to the right
  rawTemperature |= Wire.read();                                                              //reads LSB byte and sum. with MSB byte
  if (sensorOperationMode != SI70xx_TEMP_READ_AFTER_RH_MEASURMENT) checksum = Wire.read();    //checksum is not available with "SI70xx_TEMP_READ_AFTER_RH_MEASURMENT"

  /* checksum is not available with "SI70xx_TEMP_READ_AFTER_RH_MEASURMENT" */
  if (sensorOperationMode != SI70xx_TEMP_READ_AFTER_RH_MEASURMENT && checkCRC8(rawTemperature) != checksum) return HTU21D_ERROR; //error handler, checksum verification
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	8f e7       	ldi	r24, 0x7F	; 127
     fee:	93 e4       	ldi	r25, 0x43	; 67
     ff0:	20 c0       	rjmp	.+64     	; 0x1032 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x14c>
  }
  else qntRequest = 2;                                                                        //checksum is not available with "SI70xx_TEMP_READ_AFTER_RH_MEASURMENT"

  /* read temperature measurement to "wire.h" rxBuffer */
  Wire.requestFrom(HTU21D_ADDRESS, qntRequest, true);                                         //true, stop message after transmission & releas the I2C bus
  if (Wire.available() != qntRequest) return HTU21D_ERROR;                                    //check rxBuffer & error handler, collision on the i2c bus
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	8f e7       	ldi	r24, 0x7F	; 127
     ff8:	93 e4       	ldi	r25, 0x43	; 67
     ffa:	1b c0       	rjmp	.+54     	; 0x1032 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x14c>

  /* reads MSB, LSB byte & checksum from "wire.h" rxBuffer */
  rawTemperature  = Wire.read() << 8;                                                         //reads MSB byte & shift it to the right
     ffc:	82 e6       	ldi	r24, 0x62	; 98
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	7a d1       	rcall	.+756    	; 0x12f6 <_ZN7USIWire4readEv>
    1002:	e1 2c       	mov	r14, r1
    1004:	f1 2c       	mov	r15, r1
    1006:	f8 2e       	mov	r15, r24
  rawTemperature |= Wire.read();                                                              //reads LSB byte and sum. with MSB byte
    1008:	82 e6       	ldi	r24, 0x62	; 98
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	74 d1       	rcall	.+744    	; 0x12f6 <_ZN7USIWire4readEv>
    100e:	e8 2a       	or	r14, r24
    1010:	f9 2a       	or	r15, r25
    1012:	c8 cf       	rjmp	.-112    	; 0xfa4 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0xbe>
    }
  }
  else qntRequest = 2;                                                                        //checksum is not available with "SI70xx_TEMP_READ_AFTER_RH_MEASURMENT"

  /* read temperature measurement to "wire.h" rxBuffer */
  Wire.requestFrom(HTU21D_ADDRESS, qntRequest, true);                                         //true, stop message after transmission & releas the I2C bus
    1014:	21 e0       	ldi	r18, 0x01	; 1
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	43 e0       	ldi	r20, 0x03	; 3
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	60 e4       	ldi	r22, 0x40	; 64
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	82 e6       	ldi	r24, 0x62	; 98
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	59 d1       	rcall	.+690    	; 0x12d8 <_ZN7USIWire11requestFromEiii>
  if (Wire.available() != qntRequest) return HTU21D_ERROR;                                    //check rxBuffer & error handler, collision on the i2c bus
    1026:	82 e6       	ldi	r24, 0x62	; 98
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	58 d1       	rcall	.+688    	; 0x12dc <_ZN7USIWire9availableEv>
    102c:	03 97       	sbiw	r24, 0x03	; 3
    102e:	09 f7       	brne	.-62     	; 0xff2 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x10c>
    1030:	e5 cf       	rjmp	.-54     	; 0xffc <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE+0x116>

  /* checksum is not available with "SI70xx_TEMP_READ_AFTER_RH_MEASURMENT" */
  if (sensorOperationMode != SI70xx_TEMP_READ_AFTER_RH_MEASURMENT && checkCRC8(rawTemperature) != checksum) return HTU21D_ERROR; //error handler, checksum verification

  return (0.002681 * (float)rawTemperature - 46.85);                                          //temperature always returns xxxxxx00 in the LSB field
}
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	08 95       	ret

0000103e <_ZN6HTU21D23readCompensatedHumidityEf>:
    - maximum measurement time ~114ms
    - suggested minimun time between measurements 17sec
*/
/**************************************************************************/
float HTU21D::readCompensatedHumidity(float temperature)
{
    103e:	8f 92       	push	r8
    1040:	9f 92       	push	r9
    1042:	af 92       	push	r10
    1044:	bf 92       	push	r11
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	7c 01       	movw	r14, r24
    1054:	4a 01       	movw	r8, r20
    1056:	5b 01       	movw	r10, r22
  float humidity = 0;

  humidity = readHumidity();
    1058:	65 ee       	ldi	r22, 0xE5	; 229
    105a:	9b de       	rcall	.-714    	; 0xd92 <_ZN6HTU21D12readHumidityE26HTU21D_HUMD_OPERATION_MODE>
    105c:	06 2f       	mov	r16, r22
    105e:	17 2f       	mov	r17, r23
    1060:	d8 2f       	mov	r29, r24
    1062:	c9 2f       	mov	r28, r25

  if (temperature == HTU21D_FORCE_READ_TEMP) temperature = readTemperature();                                    //force to read temperature
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	4e e7       	ldi	r20, 0x7E	; 126
    106a:	53 e4       	ldi	r21, 0x43	; 67
    106c:	c5 01       	movw	r24, r10
    106e:	b4 01       	movw	r22, r8
    1070:	24 d4       	rcall	.+2120   	; 0x18ba <__cmpsf2>
    1072:	81 11       	cpse	r24, r1
    1074:	05 c0       	rjmp	.+10     	; 0x1080 <_ZN6HTU21D23readCompensatedHumidityEf+0x42>
    1076:	63 ee       	ldi	r22, 0xE3	; 227
    1078:	c7 01       	movw	r24, r14
    107a:	35 df       	rcall	.-406    	; 0xee6 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE>
    107c:	4b 01       	movw	r8, r22
    107e:	5c 01       	movw	r10, r24

  if (humidity == HTU21D_ERROR || temperature == HTU21D_ERROR) return HTU21D_ERROR;                              //error handler, collision on the i2c bus
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	4f e7       	ldi	r20, 0x7F	; 127
    1086:	53 e4       	ldi	r21, 0x43	; 67
    1088:	60 2f       	mov	r22, r16
    108a:	71 2f       	mov	r23, r17
    108c:	8d 2f       	mov	r24, r29
    108e:	9c 2f       	mov	r25, r28
    1090:	14 d4       	rcall	.+2088   	; 0x18ba <__cmpsf2>
    1092:	88 23       	and	r24, r24
    1094:	81 f1       	breq	.+96     	; 0x10f6 <_ZN6HTU21D23readCompensatedHumidityEf+0xb8>
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	4f e7       	ldi	r20, 0x7F	; 127
    109c:	53 e4       	ldi	r21, 0x43	; 67
    109e:	c5 01       	movw	r24, r10
    10a0:	b4 01       	movw	r22, r8
    10a2:	0b d4       	rcall	.+2070   	; 0x18ba <__cmpsf2>
    10a4:	88 23       	and	r24, r24
    10a6:	61 f1       	breq	.+88     	; 0x1100 <_ZN6HTU21D23readCompensatedHumidityEf+0xc2>
  
  if (temperature > 0 && temperature < 80) humidity = humidity + (25.0 - temperature) * HTU21D_TEMP_COEFFICIENT; //apply compensation coefficient
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	a9 01       	movw	r20, r18
    10ae:	c5 01       	movw	r24, r10
    10b0:	b4 01       	movw	r22, r8
    10b2:	ea d4       	rcall	.+2516   	; 0x1a88 <__gesf2>
    10b4:	18 16       	cp	r1, r24
    10b6:	44 f5       	brge	.+80     	; 0x1108 <_ZN6HTU21D23readCompensatedHumidityEf+0xca>
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	40 ea       	ldi	r20, 0xA0	; 160
    10be:	52 e4       	ldi	r21, 0x42	; 66
    10c0:	c5 01       	movw	r24, r10
    10c2:	b4 01       	movw	r22, r8
    10c4:	fa d3       	rcall	.+2036   	; 0x18ba <__cmpsf2>
    10c6:	88 23       	and	r24, r24
    10c8:	fc f4       	brge	.+62     	; 0x1108 <_ZN6HTU21D23readCompensatedHumidityEf+0xca>
    10ca:	a5 01       	movw	r20, r10
    10cc:	94 01       	movw	r18, r8
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	88 ec       	ldi	r24, 0xC8	; 200
    10d4:	91 e4       	ldi	r25, 0x41	; 65
    10d6:	8c d3       	rcall	.+1816   	; 0x17f0 <__subsf3>
    10d8:	2a e9       	ldi	r18, 0x9A	; 154
    10da:	39 e9       	ldi	r19, 0x99	; 153
    10dc:	49 e1       	ldi	r20, 0x19	; 25
    10de:	5e eb       	ldi	r21, 0xBE	; 190
    10e0:	d7 d4       	rcall	.+2478   	; 0x1a90 <__mulsf3>
    10e2:	20 2f       	mov	r18, r16
    10e4:	31 2f       	mov	r19, r17
    10e6:	4d 2f       	mov	r20, r29
    10e8:	5c 2f       	mov	r21, r28
    10ea:	83 d3       	rcall	.+1798   	; 0x17f2 <__addsf3>
    10ec:	06 2f       	mov	r16, r22
    10ee:	17 2f       	mov	r17, r23
    10f0:	d8 2f       	mov	r29, r24
    10f2:	c9 2f       	mov	r28, r25
    10f4:	09 c0       	rjmp	.+18     	; 0x1108 <_ZN6HTU21D23readCompensatedHumidityEf+0xca>

  humidity = readHumidity();

  if (temperature == HTU21D_FORCE_READ_TEMP) temperature = readTemperature();                                    //force to read temperature

  if (humidity == HTU21D_ERROR || temperature == HTU21D_ERROR) return HTU21D_ERROR;                              //error handler, collision on the i2c bus
    10f6:	00 e0       	ldi	r16, 0x00	; 0
    10f8:	10 e0       	ldi	r17, 0x00	; 0
    10fa:	df e7       	ldi	r29, 0x7F	; 127
    10fc:	c3 e4       	ldi	r28, 0x43	; 67
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <_ZN6HTU21D23readCompensatedHumidityEf+0xca>
    1100:	00 e0       	ldi	r16, 0x00	; 0
    1102:	10 e0       	ldi	r17, 0x00	; 0
    1104:	df e7       	ldi	r29, 0x7F	; 127
    1106:	c3 e4       	ldi	r28, 0x43	; 67
  
  if (temperature > 0 && temperature < 80) humidity = humidity + (25.0 - temperature) * HTU21D_TEMP_COEFFICIENT; //apply compensation coefficient

  return humidity;
}
    1108:	60 2f       	mov	r22, r16
    110a:	71 2f       	mov	r23, r17
    110c:	8d 2f       	mov	r24, r29
    110e:	9c 2f       	mov	r25, r28
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	ff 90       	pop	r15
    111a:	ef 90       	pop	r14
    111c:	bf 90       	pop	r11
    111e:	af 90       	pop	r10
    1120:	9f 90       	pop	r9
    1122:	8f 90       	pop	r8
    1124:	08 95       	ret

00001126 <_ZN7USIWire5beginEv>:
// slave tx event callback
// or after beginTransmission(address)
size_t USIWire::write(const char *str) {
  if (str == NULL) return 0;
  return write((const uint8_t *)str, strlen(str));
}
    1126:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <_ZN7USIWire11BufferIndexE>
    112a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <_ZN7USIWire12BufferLengthE>
    112e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <_ZN7USIWire12transmittingE>
    1132:	fc d0       	rcall	.+504    	; 0x132c <USI_TWI_Master_Initialise>
    1134:	08 95       	ret

00001136 <_ZN7USIWire8setClockEm>:
    1136:	08 95       	ret

00001138 <_ZN7USIWire17beginTransmissionEh>:
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <_ZN7USIWire12transmittingE>
    113e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1142:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1146:	66 0f       	add	r22, r22
    1148:	60 83       	st	Z, r22
    114a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <_ZN7USIWire11BufferIndexE>
    114e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ZN7USIWire12BufferLengthE>
    1152:	08 95       	ret

00001154 <_ZN7USIWire17beginTransmissionEi>:
    1154:	f1 df       	rcall	.-30     	; 0x1138 <_ZN7USIWire17beginTransmissionEh>
    1156:	08 95       	ret

00001158 <_ZN7USIWire15endTransmissionEh>:
    1158:	46 2f       	mov	r20, r22
    115a:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <_ZN7USIWire12BufferLengthE>
    115e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1162:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1166:	1e d1       	rcall	.+572    	; 0x13a4 <USI_TWI_Start_Transceiver_With_Data_Stop>
    1168:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <_ZN7USIWire11BufferIndexE>
    116c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <_ZN7USIWire12BufferLengthE>
    1170:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <_ZN7USIWire12transmittingE>
    1174:	81 11       	cpse	r24, r1
    1176:	0e c0       	rjmp	.+28     	; 0x1194 <_ZN7USIWire15endTransmissionEh+0x3c>
    1178:	e4 d0       	rcall	.+456    	; 0x1342 <USI_TWI_Get_State_Info>
    117a:	85 30       	cpi	r24, 0x05	; 5
    117c:	39 f0       	breq	.+14     	; 0x118c <_ZN7USIWire15endTransmissionEh+0x34>
    117e:	86 30       	cpi	r24, 0x06	; 6
    1180:	19 f0       	breq	.+6      	; 0x1188 <_ZN7USIWire15endTransmissionEh+0x30>
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	29 f4       	brne	.+10     	; 0x1190 <_ZN7USIWire15endTransmissionEh+0x38>
    1186:	08 95       	ret
    1188:	82 e0       	ldi	r24, 0x02	; 2
    118a:	08 95       	ret
    118c:	83 e0       	ldi	r24, 0x03	; 3
    118e:	08 95       	ret
    1190:	84 e0       	ldi	r24, 0x04	; 4
    1192:	08 95       	ret
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	08 95       	ret

00001198 <_ZN7USIWire5writeEh>:
    1198:	cf 93       	push	r28
    119a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <_ZN7USIWire12transmittingE>
    119e:	88 23       	and	r24, r24
    11a0:	b9 f0       	breq	.+46     	; 0x11d0 <_ZN7USIWire5writeEh+0x38>
    11a2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZN7USIWire12BufferLengthE>
    11a6:	80 32       	cpi	r24, 0x20	; 32
    11a8:	e0 f4       	brcc	.+56     	; 0x11e2 <_ZN7USIWire5writeEh+0x4a>
    11aa:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <_ZN7USIWire11BufferIndexE>
    11ae:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    11b2:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    11b6:	e8 0f       	add	r30, r24
    11b8:	f1 1d       	adc	r31, r1
    11ba:	60 83       	st	Z, r22
    11bc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <_ZN7USIWire11BufferIndexE>
    11c0:	8f 5f       	subi	r24, 0xFF	; 255
    11c2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <_ZN7USIWire11BufferIndexE>
    11c6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ZN7USIWire12BufferLengthE>
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e c0       	rjmp	.+28     	; 0x11ec <_ZN7USIWire5writeEh+0x54>
    11d0:	c6 2f       	mov	r28, r22
    11d2:	7e d1       	rcall	.+764    	; 0x14d0 <USI_TWI_Space_In_Transmission_Buffer>
    11d4:	88 23       	and	r24, r24
    11d6:	41 f0       	breq	.+16     	; 0x11e8 <_ZN7USIWire5writeEh+0x50>
    11d8:	8c 2f       	mov	r24, r28
    11da:	52 d1       	rcall	.+676    	; 0x1480 <USI_TWI_Transmit_Byte>
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	05 c0       	rjmp	.+10     	; 0x11ec <_ZN7USIWire5writeEh+0x54>
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <_ZN7USIWire5writeEh+0x54>
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	cf 91       	pop	r28
    11ee:	08 95       	ret

000011f0 <_ZN7USIWire11requestFromEhhmhh>:
    11f0:	4f 92       	push	r4
    11f2:	5f 92       	push	r5
    11f4:	6f 92       	push	r6
    11f6:	7f 92       	push	r7
    11f8:	af 92       	push	r10
    11fa:	bf 92       	push	r11
    11fc:	cf 92       	push	r12
    11fe:	ef 92       	push	r14
    1200:	ff 92       	push	r15
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	5c 01       	movw	r10, r24
    120c:	f6 2e       	mov	r15, r22
    120e:	d4 2f       	mov	r29, r20
    1210:	28 01       	movw	r4, r16
    1212:	39 01       	movw	r6, r18
    1214:	ee 20       	and	r14, r14
    1216:	09 f1       	breq	.+66     	; 0x125a <_ZN7USIWire11requestFromEhhmhh+0x6a>
    1218:	8f df       	rcall	.-226    	; 0x1138 <_ZN7USIWire17beginTransmissionEh>
    121a:	8e 2d       	mov	r24, r14
    121c:	84 30       	cpi	r24, 0x04	; 4
    121e:	08 f0       	brcs	.+2      	; 0x1222 <_ZN7USIWire11requestFromEhhmhh+0x32>
    1220:	83 e0       	ldi	r24, 0x03	; 3
    1222:	cf ef       	ldi	r28, 0xFF	; 255
    1224:	c8 0f       	add	r28, r24
    1226:	88 23       	and	r24, r24
    1228:	a9 f0       	breq	.+42     	; 0x1254 <_ZN7USIWire11requestFromEhhmhh+0x64>
    122a:	8c 2f       	mov	r24, r28
    122c:	88 0f       	add	r24, r24
    122e:	88 0f       	add	r24, r24
    1230:	88 0f       	add	r24, r24
    1232:	a3 01       	movw	r20, r6
    1234:	92 01       	movw	r18, r4
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <_ZN7USIWire11requestFromEhhmhh+0x50>
    1238:	56 95       	lsr	r21
    123a:	47 95       	ror	r20
    123c:	37 95       	ror	r19
    123e:	27 95       	ror	r18
    1240:	8a 95       	dec	r24
    1242:	d2 f7       	brpl	.-12     	; 0x1238 <_ZN7USIWire11requestFromEhhmhh+0x48>
    1244:	ca 01       	movw	r24, r20
    1246:	b9 01       	movw	r22, r18
    1248:	c5 01       	movw	r24, r10
    124a:	a6 df       	rcall	.-180    	; 0x1198 <_ZN7USIWire5writeEh>
    124c:	8c 2f       	mov	r24, r28
    124e:	c1 50       	subi	r28, 0x01	; 1
    1250:	81 11       	cpse	r24, r1
    1252:	eb cf       	rjmp	.-42     	; 0x122a <_ZN7USIWire11requestFromEhhmhh+0x3a>
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	c5 01       	movw	r24, r10
    1258:	7f df       	rcall	.-258    	; 0x1158 <_ZN7USIWire15endTransmissionEh>
    125a:	c1 e0       	ldi	r28, 0x01	; 1
    125c:	cd 0f       	add	r28, r29
    125e:	c1 32       	cpi	r28, 0x21	; 33
    1260:	08 f0       	brcs	.+2      	; 0x1264 <_ZN7USIWire11requestFromEhhmhh+0x74>
    1262:	c0 e2       	ldi	r28, 0x20	; 32
    1264:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1268:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    126c:	8f 2d       	mov	r24, r15
    126e:	88 0f       	add	r24, r24
    1270:	81 60       	ori	r24, 0x01	; 1
    1272:	80 83       	st	Z, r24
    1274:	4c 2d       	mov	r20, r12
    1276:	6c 2f       	mov	r22, r28
    1278:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    127c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1280:	91 d0       	rcall	.+290    	; 0x13a4 <USI_TWI_Start_Transceiver_With_Data_Stop>
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <_ZN7USIWire11BufferIndexE>
    1288:	81 11       	cpse	r24, r1
    128a:	05 c0       	rjmp	.+10     	; 0x1296 <_ZN7USIWire11requestFromEhhmhh+0xa6>
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ZN7USIWire12BufferLengthE>
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	04 c0       	rjmp	.+8      	; 0x129e <_ZN7USIWire11requestFromEhhmhh+0xae>
    1296:	c0 93 64 00 	sts	0x0064, r28	; 0x800064 <_ZN7USIWire12BufferLengthE>
    129a:	8f ef       	ldi	r24, 0xFF	; 255
    129c:	8c 0f       	add	r24, r28
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	cf 90       	pop	r12
    12ac:	bf 90       	pop	r11
    12ae:	af 90       	pop	r10
    12b0:	7f 90       	pop	r7
    12b2:	6f 90       	pop	r6
    12b4:	5f 90       	pop	r5
    12b6:	4f 90       	pop	r4
    12b8:	08 95       	ret

000012ba <_ZN7USIWire11requestFromEhhh>:
    12ba:	cf 92       	push	r12
    12bc:	ef 92       	push	r14
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	c2 2e       	mov	r12, r18
    12c4:	e1 2c       	mov	r14, r1
    12c6:	00 e0       	ldi	r16, 0x00	; 0
    12c8:	10 e0       	ldi	r17, 0x00	; 0
    12ca:	98 01       	movw	r18, r16
    12cc:	91 df       	rcall	.-222    	; 0x11f0 <_ZN7USIWire11requestFromEhhmhh>
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ef 90       	pop	r14
    12d4:	cf 90       	pop	r12
    12d6:	08 95       	ret

000012d8 <_ZN7USIWire11requestFromEiii>:
    12d8:	f0 df       	rcall	.-32     	; 0x12ba <_ZN7USIWire11requestFromEhhh>
    12da:	08 95       	ret

000012dc <_ZN7USIWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int USIWire::available(void) {
  if (BufferLength) {
    12dc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZN7USIWire12BufferLengthE>
    12e0:	88 23       	and	r24, r24
    12e2:	31 f0       	breq	.+12     	; 0x12f0 <_ZN7USIWire9availableEv+0x14>
    return BufferLength - BufferIndex;
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <_ZN7USIWire11BufferIndexE>
    12ea:	82 1b       	sub	r24, r18
    12ec:	91 09       	sbc	r25, r1
    12ee:	08 95       	ret
  } else {
    return USI_TWI_Data_In_Receive_Buffer();
    12f0:	e8 d0       	rcall	.+464    	; 0x14c2 <USI_TWI_Data_In_Receive_Buffer>
    12f2:	90 e0       	ldi	r25, 0x00	; 0
  }
}
    12f4:	08 95       	ret

000012f6 <_ZN7USIWire4readEv>:
// or after requestFrom(address, numBytes)
int USIWire::read(void) {
  int value = -1;

  // get each successive byte on each call
  if (available()) {
    12f6:	f2 df       	rcall	.-28     	; 0x12dc <_ZN7USIWire9availableEv>
    12f8:	89 2b       	or	r24, r25
    12fa:	a9 f0       	breq	.+42     	; 0x1326 <_ZN7USIWire4readEv+0x30>
    if (BufferLength) {
    12fc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZN7USIWire12BufferLengthE>
    1300:	88 23       	and	r24, r24
    1302:	71 f0       	breq	.+28     	; 0x1320 <_ZN7USIWire4readEv+0x2a>
      value = Buffer[BufferIndex];
    1304:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <_ZN7USIWire11BufferIndexE>
    1308:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    130c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1310:	e2 0f       	add	r30, r18
    1312:	f1 1d       	adc	r31, r1
    1314:	80 81       	ld	r24, Z
    1316:	90 e0       	ldi	r25, 0x00	; 0
      ++BufferIndex;
    1318:	2f 5f       	subi	r18, 0xFF	; 255
    131a:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <_ZN7USIWire11BufferIndexE>
    131e:	08 95       	ret
    } else {
      value = USI_TWI_Receive_Byte();
    1320:	bf d0       	rcall	.+382    	; 0x14a0 <USI_TWI_Receive_Byte>
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	08 95       	ret

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int USIWire::read(void) {
  int value = -1;
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	9f ef       	ldi	r25, 0xFF	; 255
      value = USI_TWI_Receive_Byte();
    }
  }

  return value;
}
    132a:	08 95       	ret

0000132c <USI_TWI_Master_Initialise>:
/*---------------------------------------------------------------
 USI TWI single master initialization function
---------------------------------------------------------------*/
void USI_TWI_Master_Initialise(void)
{
	PORT_USI |= (1 << PIN_USI_SDA); // Enable pullup on SDA, to set high as released state.
    132c:	c0 9a       	sbi	0x18, 0	; 24
	PORT_USI_CL |= (1 << PIN_USI_SCL); // Enable pullup on SCL, to set high as released state.
    132e:	c2 9a       	sbi	0x18, 2	; 24

	DDR_USI_CL |= (1 << PIN_USI_SCL); // Enable SCL as output.
    1330:	ba 9a       	sbi	0x17, 2	; 23
	DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
    1332:	b8 9a       	sbi	0x17, 0	; 23

	USIDR = 0xFF;                                           // Preload dataregister with "released level" data.
    1334:	8f ef       	ldi	r24, 0xFF	; 255
    1336:	8f b9       	out	0x0f, r24	; 15
	USICR = (0 << USISIE) | (0 << USIOIE) |                 // Disable Interrupts.
    1338:	8a e2       	ldi	r24, 0x2A	; 42
    133a:	8d b9       	out	0x0d, r24	; 13
	        (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
	        (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software stobe as counter clock source
	        (0 << USITC);
	USISR = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags,
    133c:	80 ef       	ldi	r24, 0xF0	; 240
    133e:	8e b9       	out	0x0e, r24	; 14
    1340:	08 95       	ret

00001342 <USI_TWI_Get_State_Info>:
Use this function to get hold of the error message from the last transmission
---------------------------------------------------------------*/
unsigned char USI_TWI_Get_State_Info(void)
{
	return (USI_TWI_state.errorState); // Return error state.
}
    1342:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <USI_TWI_state>
    1346:	08 95       	ret

00001348 <USI_TWI_Master_Transfer>:
 Data to be sent has to be placed into the USIDR prior to calling
 this function. Data read, will be return'ed from the function.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Transfer(unsigned char temp)
{
	USISR = temp;                                          // Set USISR according to temp.
    1348:	8e b9       	out	0x0e, r24	; 14
	       (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
	       (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software clock strobe as source.
	       (1 << USITC);                                   // Toggle Clock Port.
	do {
		DELAY_T2TWI;
		USICR = temp; // Generate positve SCL edge.
    134a:	8b e2       	ldi	r24, 0x2B	; 43
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    134c:	97 e0       	ldi	r25, 0x07	; 7
    134e:	9a 95       	dec	r25
    1350:	f1 f7       	brne	.-4      	; 0x134e <USI_TWI_Master_Transfer+0x6>
    1352:	8d b9       	out	0x0d, r24	; 13
		while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
    1354:	b2 9b       	sbis	0x16, 2	; 22
    1356:	fe cf       	rjmp	.-4      	; 0x1354 <USI_TWI_Master_Transfer+0xc>
    1358:	93 e0       	ldi	r25, 0x03	; 3
    135a:	9a 95       	dec	r25
    135c:	f1 f7       	brne	.-4      	; 0x135a <USI_TWI_Master_Transfer+0x12>
    135e:	00 00       	nop
			; // Wait for SCL to go high.
		DELAY_T4TWI;
		USICR = temp;                   // Generate negative SCL edge.
    1360:	8d b9       	out	0x0d, r24	; 13
	} while (!(USISR & (1 << USIOIF))); // Check for transfer complete.
    1362:	76 9b       	sbis	0x0e, 6	; 14
    1364:	f3 cf       	rjmp	.-26     	; 0x134c <USI_TWI_Master_Transfer+0x4>
    1366:	87 e0       	ldi	r24, 0x07	; 7
    1368:	8a 95       	dec	r24
    136a:	f1 f7       	brne	.-4      	; 0x1368 <USI_TWI_Master_Transfer+0x20>

	DELAY_T2TWI;
	temp  = USIDR;                 // Read out data.
    136c:	8f b1       	in	r24, 0x0f	; 15
	USIDR = 0xFF;                  // Release SDA.
    136e:	9f ef       	ldi	r25, 0xFF	; 255
    1370:	9f b9       	out	0x0f, r25	; 15
	DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
    1372:	b8 9a       	sbi	0x17, 0	; 23

	return temp; // Return the data from the USIDR
}
    1374:	08 95       	ret

00001376 <USI_TWI_Master_Stop>:
 Function for generating a TWI Stop Condition. Used to release
 the TWI bus.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Stop(void)
{
	PORT_USI &= ~(1 << PIN_USI_SDA); // Pull SDA low.
    1376:	c0 98       	cbi	0x18, 0	; 24
	PORT_USI_CL |= (1 << PIN_USI_SCL);  // Release SCL.
    1378:	c2 9a       	sbi	0x18, 2	; 24
	while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
    137a:	b2 9b       	sbis	0x16, 2	; 22
    137c:	fe cf       	rjmp	.-4      	; 0x137a <USI_TWI_Master_Stop+0x4>
    137e:	83 e0       	ldi	r24, 0x03	; 3
    1380:	8a 95       	dec	r24
    1382:	f1 f7       	brne	.-4      	; 0x1380 <USI_TWI_Master_Stop+0xa>
    1384:	00 00       	nop
		; // Wait for SCL to go high.
	DELAY_T4TWI;
	PORT_USI |= (1 << PIN_USI_SDA); // Release SDA.
    1386:	c0 9a       	sbi	0x18, 0	; 24
    1388:	87 e0       	ldi	r24, 0x07	; 7
    138a:	8a 95       	dec	r24
    138c:	f1 f7       	brne	.-4      	; 0x138a <USI_TWI_Master_Stop+0x14>
	DELAY_T2TWI;

#ifdef SIGNAL_VERIFY
	if (!(USISR & (1 << USIPF))) {
    138e:	9e b1       	in	r25, 0x0e	; 14
    1390:	89 2f       	mov	r24, r25
    1392:	80 72       	andi	r24, 0x20	; 32
    1394:	95 fd       	sbrc	r25, 5
    1396:	04 c0       	rjmp	.+8      	; 0x13a0 <USI_TWI_Master_Stop+0x2a>
		USI_TWI_state.errorState = USI_TWI_MISSING_STOP_CON;
    1398:	98 e0       	ldi	r25, 0x08	; 8
    139a:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <USI_TWI_state>
		return (FALSE);
    139e:	08 95       	ret
	}
#endif

	return (TRUE);
    13a0:	81 e0       	ldi	r24, 0x01	; 1
}
    13a2:	08 95       	ret

000013a4 <USI_TWI_Start_Transceiver_With_Data_Stop>:
#ifndef __GNUC__
__x // AVR compiler
#endif
    unsigned char
    USI_TWI_Start_Transceiver_With_Data_Stop(unsigned char *msg, unsigned char msgSize, unsigned char stop)
{
    13a4:	ff 92       	push	r15
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	c6 2f       	mov	r28, r22
    13b0:	d4 2f       	mov	r29, r20
	unsigned char tempUSISR_1bit = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC)
	                               |                 // Prepare register value to: Clear flags, and
	                               (0xE << USICNT0); // set USI to shift 1 bit i.e. count 2 clock edges.

	USI_TWI_state.errorState  = 0;
	USI_TWI_state.addressMode = TRUE;
    13b2:	21 e0       	ldi	r18, 0x01	; 1
    13b4:	20 93 79 00 	sts	0x0079, r18	; 0x800079 <USI_TWI_state>
		USI_TWI_state.errorState = USI_TWI_UE_DATA_COL;
		return (FALSE);
	}
#endif

	if (!(*msg
    13b8:	fc 01       	movw	r30, r24
    13ba:	20 81       	ld	r18, Z
    13bc:	20 fd       	sbrc	r18, 0
    13be:	04 c0       	rjmp	.+8      	; 0x13c8 <USI_TWI_Start_Transceiver_With_Data_Stop+0x24>
	      & (1 << TWI_READ_BIT))) // The LSB in the address byte determines if is a masterRead or masterWrite operation.
	{
		USI_TWI_state.masterWriteDataMode = TRUE;
    13c0:	21 e0       	ldi	r18, 0x01	; 1
    13c2:	22 60       	ori	r18, 0x02	; 2
    13c4:	20 93 79 00 	sts	0x0079, r18	; 0x800079 <USI_TWI_state>
	}

	/* Release SCL to ensure that (repeated) Start can be performed */
	PORT_USI_CL |= (1 << PIN_USI_SCL); // Release SCL.
    13c8:	c2 9a       	sbi	0x18, 2	; 24
	while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
    13ca:	b2 9b       	sbis	0x16, 2	; 22
    13cc:	fe cf       	rjmp	.-4      	; 0x13ca <USI_TWI_Start_Transceiver_With_Data_Stop+0x26>
    13ce:	f3 e0       	ldi	r31, 0x03	; 3
    13d0:	fa 95       	dec	r31
    13d2:	f1 f7       	brne	.-4      	; 0x13d0 <USI_TWI_Start_Transceiver_With_Data_Stop+0x2c>
    13d4:	00 00       	nop
#else
	DELAY_T2TWI; // Delay for T2TWI if TWI_STANDARD_MODE
#endif

	/* Generate Start Condition */
	PORT_USI &= ~(1 << PIN_USI_SDA); // Force SDA LOW.
    13d6:	c0 98       	cbi	0x18, 0	; 24
    13d8:	23 e0       	ldi	r18, 0x03	; 3
    13da:	2a 95       	dec	r18
    13dc:	f1 f7       	brne	.-4      	; 0x13da <USI_TWI_Start_Transceiver_With_Data_Stop+0x36>
    13de:	00 00       	nop
	DELAY_T4TWI;
	PORT_USI_CL &= ~(1 << PIN_USI_SCL); // Pull SCL LOW.
    13e0:	c2 98       	cbi	0x18, 2	; 24
	PORT_USI |= (1 << PIN_USI_SDA);  // Release SDA.
    13e2:	c0 9a       	sbi	0x18, 0	; 24

#ifdef SIGNAL_VERIFY
	if (!(USISR & (1 << USISIF))) {
    13e4:	77 99       	sbic	0x0e, 7	; 14
    13e6:	05 c0       	rjmp	.+10     	; 0x13f2 <USI_TWI_Start_Transceiver_With_Data_Stop+0x4e>
		USI_TWI_state.errorState = USI_TWI_MISSING_START_CON;
    13e8:	87 e0       	ldi	r24, 0x07	; 7
    13ea:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <USI_TWI_state>
		return (FALSE);
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	3e c0       	rjmp	.+124    	; 0x146e <USI_TWI_Start_Transceiver_With_Data_Stop+0xca>
    13f2:	8c 01       	movw	r16, r24
			*(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);

			/* Prepare to generate ACK (or NACK in case of End Of Transmission) */
			if (msgSize == 1) // If transmission of last byte was performed.
			{
				USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
    13f4:	ff 24       	eor	r15, r15
    13f6:	fa 94       	dec	r15
#endif

	/*Write address and Read/Write data */
	do {
		/* If masterWrite cycle (or inital address tranmission)*/
		if (USI_TWI_state.addressMode || USI_TWI_state.masterWriteDataMode) {
    13f8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <USI_TWI_state>
    13fc:	93 70       	andi	r25, 0x03	; 3
    13fe:	01 f1       	breq	.+64     	; 0x1440 <USI_TWI_Start_Transceiver_With_Data_Stop+0x9c>
			/* Write a byte */
			PORT_USI_CL &= ~(1 << PIN_USI_SCL);         // Pull SCL LOW.
    1400:	c2 98       	cbi	0x18, 2	; 24
			USIDR = *(msg++);                        // Setup data.
    1402:	f8 01       	movw	r30, r16
    1404:	80 81       	ld	r24, Z
    1406:	8f b9       	out	0x0f, r24	; 15
			USI_TWI_Master_Transfer(tempUSISR_8bit); // Send 8 bits on bus.
    1408:	80 ef       	ldi	r24, 0xF0	; 240
    140a:	9e df       	rcall	.-196    	; 0x1348 <USI_TWI_Master_Transfer>

			/* Clock and verify (N)ACK from slave */
			DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
    140c:	b8 98       	cbi	0x17, 0	; 23
			if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
    140e:	8e ef       	ldi	r24, 0xFE	; 254
    1410:	9b df       	rcall	.-202    	; 0x1348 <USI_TWI_Master_Transfer>
    1412:	80 ff       	sbrs	r24, 0
    1414:	0f c0       	rjmp	.+30     	; 0x1434 <USI_TWI_Start_Transceiver_With_Data_Stop+0x90>
				if (USI_TWI_state.addressMode)
    1416:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <USI_TWI_state>
    141a:	89 2f       	mov	r24, r25
    141c:	81 70       	andi	r24, 0x01	; 1
    141e:	90 ff       	sbrs	r25, 0
    1420:	05 c0       	rjmp	.+10     	; 0x142c <USI_TWI_Start_Transceiver_With_Data_Stop+0x88>
					USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
    1422:	86 e0       	ldi	r24, 0x06	; 6
    1424:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <USI_TWI_state>
				else
					USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
				return (FALSE);
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	21 c0       	rjmp	.+66     	; 0x146e <USI_TWI_Start_Transceiver_With_Data_Stop+0xca>
			DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
			if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
				if (USI_TWI_state.addressMode)
					USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
				else
					USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
    142c:	95 e0       	ldi	r25, 0x05	; 5
    142e:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <USI_TWI_state>
    1432:	1d c0       	rjmp	.+58     	; 0x146e <USI_TWI_Start_Transceiver_With_Data_Stop+0xca>
				return (FALSE);
			}
			USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
    1434:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <USI_TWI_state>
    1438:	8e 7f       	andi	r24, 0xFE	; 254
    143a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <USI_TWI_state>
    143e:	0c c0       	rjmp	.+24     	; 0x1458 <USI_TWI_Start_Transceiver_With_Data_Stop+0xb4>
		}
		/* Else masterRead cycle*/
		else {
			/* Read a data byte */
			DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
    1440:	b8 98       	cbi	0x17, 0	; 23
			*(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);
    1442:	80 ef       	ldi	r24, 0xF0	; 240
    1444:	81 df       	rcall	.-254    	; 0x1348 <USI_TWI_Master_Transfer>
    1446:	f8 01       	movw	r30, r16
    1448:	80 83       	st	Z, r24

			/* Prepare to generate ACK (or NACK in case of End Of Transmission) */
			if (msgSize == 1) // If transmission of last byte was performed.
    144a:	c1 30       	cpi	r28, 0x01	; 1
    144c:	11 f4       	brne	.+4      	; 0x1452 <USI_TWI_Start_Transceiver_With_Data_Stop+0xae>
			{
				USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
    144e:	ff b8       	out	0x0f, r15	; 15
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <USI_TWI_Start_Transceiver_With_Data_Stop+0xb0>
			} else {
				USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
    1452:	1f b8       	out	0x0f, r1	; 15
			}
			USI_TWI_Master_Transfer(tempUSISR_1bit); // Generate ACK/NACK.
    1454:	8e ef       	ldi	r24, 0xFE	; 254
    1456:	78 df       	rcall	.-272    	; 0x1348 <USI_TWI_Master_Transfer>
		}
	} while (--msgSize); // Until all data sent/received.
    1458:	c1 50       	subi	r28, 0x01	; 1
    145a:	0f 5f       	subi	r16, 0xFF	; 255
    145c:	1f 4f       	sbci	r17, 0xFF	; 255
    145e:	c1 11       	cpse	r28, r1
    1460:	cb cf       	rjmp	.-106    	; 0x13f8 <USI_TWI_Start_Transceiver_With_Data_Stop+0x54>

	if (stop) {
    1462:	dd 23       	and	r29, r29
    1464:	19 f0       	breq	.+6      	; 0x146c <USI_TWI_Start_Transceiver_With_Data_Stop+0xc8>
		USI_TWI_Master_Stop(); // Send a STOP condition on the TWI bus.
    1466:	87 df       	rcall	.-242    	; 0x1376 <USI_TWI_Master_Stop>
	}

	/* Transmission successfully completed*/
	return (TRUE);
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	01 c0       	rjmp	.+2      	; 0x146e <USI_TWI_Start_Transceiver_With_Data_Stop+0xca>
    146c:	81 e0       	ldi	r24, 0x01	; 1
}
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	ff 90       	pop	r15
    1478:	08 95       	ret

0000147a <USI_TWI_Start_Transceiver_With_Data>:

 Success or error code is returned. Error codes are defined in
 USI_TWI_Master.h
---------------------------------------------------------------*/
unsigned char USI_TWI_Start_Transceiver_With_Data(unsigned char *msg, unsigned char msgSize) {
	return USI_TWI_Start_Transceiver_With_Data_Stop(msg, msgSize, TRUE);
    147a:	41 e0       	ldi	r20, 0x01	; 1
    147c:	93 df       	rcall	.-218    	; 0x13a4 <USI_TWI_Start_Transceiver_With_Data_Stop>
}
    147e:	08 95       	ret

00001480 <USI_TWI_Transmit_Byte>:
// Check if there is an active data session.
unsigned char USI_TWI_Slave_Is_Active()
{
	// Active if Overflow Interrupt is enabled and no Stop Condition occurred
	return (USICR & (1 << USIOIE)) && ((USISR & (1 << USIPF)) == 0);
}
    1480:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <TWI_TxHead>
    1484:	2f 5f       	subi	r18, 0xFF	; 255
    1486:	2f 70       	andi	r18, 0x0F	; 15
    1488:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <TWI_TxTail>
    148c:	29 17       	cp	r18, r25
    148e:	e1 f3       	breq	.-8      	; 0x1488 <USI_TWI_Transmit_Byte+0x8>
    1490:	e2 2f       	mov	r30, r18
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	e6 57       	subi	r30, 0x76	; 118
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	80 83       	st	Z, r24
    149a:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <TWI_TxHead>
    149e:	08 95       	ret

000014a0 <USI_TWI_Receive_Byte>:
    14a0:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <TWI_RxTail>
    14a4:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <TWI_RxHead>
    14a8:	98 17       	cp	r25, r24
    14aa:	e1 f3       	breq	.-8      	; 0x14a4 <USI_TWI_Receive_Byte+0x4>
    14ac:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <TWI_RxTail>
    14b0:	ef 5f       	subi	r30, 0xFF	; 255
    14b2:	ef 70       	andi	r30, 0x0F	; 15
    14b4:	e0 93 6c 00 	sts	0x006C, r30	; 0x80006c <TWI_RxTail>
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	e6 58       	subi	r30, 0x86	; 134
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	80 81       	ld	r24, Z
    14c0:	08 95       	ret

000014c2 <USI_TWI_Data_In_Receive_Buffer>:
    14c2:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <TWI_RxTail>
    14c6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <TWI_RxHead>
    14ca:	89 1b       	sub	r24, r25
    14cc:	8f 70       	andi	r24, 0x0F	; 15
    14ce:	08 95       	ret

000014d0 <USI_TWI_Space_In_Transmission_Buffer>:
    14d0:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <TWI_TxHead>
    14d4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <TWI_TxTail>
    14d8:	9f 5f       	subi	r25, 0xFF	; 255
    14da:	89 1b       	sub	r24, r25
    14dc:	8f 70       	andi	r24, 0x0F	; 15
    14de:	08 95       	ret

000014e0 <__vector_13>:
ISR(USI_START_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_START_VECTOR
__interrupt void USI_Start_Condition_ISR(void)
#endif
{
    14e0:	1f 92       	push	r1
    14e2:	0f 92       	push	r0
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	0f 92       	push	r0
    14e8:	11 24       	eor	r1, r1
    14ea:	1f 93       	push	r17
    14ec:	2f 93       	push	r18
    14ee:	3f 93       	push	r19
    14f0:	4f 93       	push	r20
    14f2:	5f 93       	push	r21
    14f4:	6f 93       	push	r22
    14f6:	7f 93       	push	r23
    14f8:	8f 93       	push	r24
    14fa:	9f 93       	push	r25
    14fc:	af 93       	push	r26
    14fe:	bf 93       	push	r27
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	ef 93       	push	r30
    1506:	ff 93       	push	r31
	unsigned char tmpPin; // Temporary variable for pin state
	unsigned char tmpRxHead; // Temporary variable to store volatile
	// call slave receive callback on repeated start
	if (USI_TWI_On_Slave_Receive) {
    1508:	c0 91 66 00 	lds	r28, 0x0066	; 0x800066 <USI_TWI_On_Slave_Receive>
    150c:	d0 91 67 00 	lds	r29, 0x0067	; 0x800067 <USI_TWI_On_Slave_Receive+0x1>
    1510:	20 97       	sbiw	r28, 0x00	; 0
    1512:	61 f0       	breq	.+24     	; 0x152c <__vector_13+0x4c>
		tmpRxHead = TWI_RxHead;
    1514:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <TWI_RxHead>
		if (TWI_RxTail != tmpRxHead) { // data in receive buffer
    1518:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <TWI_RxTail>
    151c:	18 17       	cp	r17, r24
    151e:	31 f0       	breq	.+12     	; 0x152c <__vector_13+0x4c>
			USI_TWI_On_Slave_Receive(USI_TWI_Data_In_Receive_Buffer());
    1520:	d0 df       	rcall	.-96     	; 0x14c2 <USI_TWI_Data_In_Receive_Buffer>
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	fe 01       	movw	r30, r28
    1526:	09 95       	icall
			// reset rx buffer
			TWI_RxTail = tmpRxHead;
    1528:	10 93 6c 00 	sts	0x006C, r17	; 0x80006c <TWI_RxTail>
		}
	}

	USI_TWI_Overflow_State = USI_SLAVE_CHECK_ADDRESS;
    152c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <USI_TWI_Overflow_State>
	DDR_USI &= ~(1 << PORT_USI_SDA); // Set SDA as input
    1530:	b8 98       	cbi	0x17, 0	; 23
	while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
    1532:	b2 9b       	sbis	0x16, 2	; 22
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <__vector_13+0x60>
    1536:	b0 9b       	sbis	0x16, 0	; 22
    1538:	fc cf       	rjmp	.-8      	; 0x1532 <__vector_13+0x52>
		; // Wait for SCL to go low to ensure the "Start Condition" has completed.
	      // If a Stop condition arises then leave the interrupt to prevent waiting forever.
	if (tmpPin) {
		// Stop Condition (waiting for next Start Condition)
		USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
    153a:	88 ea       	ldi	r24, 0xA8	; 168
    153c:	8d b9       	out	0x0d, r24	; 13
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <__vector_13+0x64>
		                                        // to first Start Condition (potentail failure)
		        (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
		        (0 << USITC);
	} else {
		// really Start Condition (Enable Overflow Interrupt)
		USICR = (1 << USISIE) | (1 << USIOIE)
    1540:	88 ef       	ldi	r24, 0xF8	; 248
    1542:	8d b9       	out	0x0d, r24	; 13
		        | // Enable Overflow and Start Condition Interrupt. (Keep StartCondInt to detect RESTART)
		        (1 << USIWM1) | (1 << USIWM0) |                 // Set USI in Two-wire mode.
		        (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
		        (0 << USITC);
	}
	USISR = (1 << USI_START_COND_INT) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags
    1544:	80 ef       	ldi	r24, 0xF0	; 240
    1546:	8e b9       	out	0x0e, r24	; 14
	        (0x0 << USICNT0); // Set USI to sample 8 bits i.e. count 16 external pin toggles.
}
    1548:	ff 91       	pop	r31
    154a:	ef 91       	pop	r30
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	bf 91       	pop	r27
    1552:	af 91       	pop	r26
    1554:	9f 91       	pop	r25
    1556:	8f 91       	pop	r24
    1558:	7f 91       	pop	r23
    155a:	6f 91       	pop	r22
    155c:	5f 91       	pop	r21
    155e:	4f 91       	pop	r20
    1560:	3f 91       	pop	r19
    1562:	2f 91       	pop	r18
    1564:	1f 91       	pop	r17
    1566:	0f 90       	pop	r0
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	0f 90       	pop	r0
    156c:	1f 90       	pop	r1
    156e:	18 95       	reti

00001570 <__vector_14>:
ISR(USI_OVERFLOW_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_OVERFLOW_VECTOR
__interrupt void USI_Counter_Overflow_ISR(void)
#endif
{
    1570:	1f 92       	push	r1
    1572:	0f 92       	push	r0
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	0f 92       	push	r0
    1578:	11 24       	eor	r1, r1
    157a:	1f 93       	push	r17
    157c:	2f 93       	push	r18
    157e:	3f 93       	push	r19
    1580:	4f 93       	push	r20
    1582:	5f 93       	push	r21
    1584:	6f 93       	push	r22
    1586:	7f 93       	push	r23
    1588:	8f 93       	push	r24
    158a:	9f 93       	push	r25
    158c:	af 93       	push	r26
    158e:	bf 93       	push	r27
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	ef 93       	push	r30
    1596:	ff 93       	push	r31
	unsigned char tmpRxHead;
	unsigned char tmpTxTail; // Temporary variables to store volatiles
	unsigned char tmpUSIDR;

	switch (USI_TWI_Overflow_State) {
    1598:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <USI_TWI_Overflow_State>
    159c:	82 30       	cpi	r24, 0x02	; 2
    159e:	09 f4       	brne	.+2      	; 0x15a2 <__vector_14+0x32>
    15a0:	5f c0       	rjmp	.+190    	; 0x1660 <__vector_14+0xf0>
    15a2:	28 f4       	brcc	.+10     	; 0x15ae <__vector_14+0x3e>
    15a4:	88 23       	and	r24, r24
    15a6:	59 f0       	breq	.+22     	; 0x15be <__vector_14+0x4e>
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	d1 f1       	breq	.+116    	; 0x1620 <__vector_14+0xb0>
    15ac:	9b c0       	rjmp	.+310    	; 0x16e4 <__vector_14+0x174>
    15ae:	84 30       	cpi	r24, 0x04	; 4
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <__vector_14+0x44>
    15b2:	5e c0       	rjmp	.+188    	; 0x1670 <__vector_14+0x100>
    15b4:	60 f1       	brcs	.+88     	; 0x160e <__vector_14+0x9e>
    15b6:	85 30       	cpi	r24, 0x05	; 5
    15b8:	09 f4       	brne	.+2      	; 0x15bc <__vector_14+0x4c>
    15ba:	78 c0       	rjmp	.+240    	; 0x16ac <__vector_14+0x13c>
    15bc:	93 c0       	rjmp	.+294    	; 0x16e4 <__vector_14+0x174>
	// ---------- Address mode ----------
	// Check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK, else reset USI.
	case USI_SLAVE_CHECK_ADDRESS:
		if ((USIDR == 0) || ((USIDR >> 1) == TWI_slaveAddress)) {
    15be:	8f b1       	in	r24, 0x0f	; 15
    15c0:	88 23       	and	r24, r24
    15c2:	31 f0       	breq	.+12     	; 0x15d0 <__vector_14+0x60>
    15c4:	8f b1       	in	r24, 0x0f	; 15
    15c6:	86 95       	lsr	r24
    15c8:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <TWI_slaveAddress>
    15cc:	89 13       	cpse	r24, r25
    15ce:	19 c0       	rjmp	.+50     	; 0x1602 <__vector_14+0x92>
			if (USIDR & 0x01) {
    15d0:	78 9b       	sbis	0x0f, 0	; 15
    15d2:	0f c0       	rjmp	.+30     	; 0x15f2 <__vector_14+0x82>
				if (USI_TWI_On_Slave_Transmit) {
    15d4:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <USI_TWI_On_Slave_Transmit>
    15d8:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <USI_TWI_On_Slave_Transmit+0x1>
    15dc:	30 97       	sbiw	r30, 0x00	; 0
    15de:	29 f0       	breq	.+10     	; 0x15ea <__vector_14+0x7a>
					// reset tx buffer and call callback
					tmpTxTail = TWI_TxHead;
    15e0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <TWI_TxHead>
					TWI_TxTail = tmpTxTail;
    15e4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <TWI_TxTail>
					USI_TWI_On_Slave_Transmit();
    15e8:	09 95       	icall
				}
				USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <USI_TWI_Overflow_State>
    15f0:	03 c0       	rjmp	.+6      	; 0x15f8 <__vector_14+0x88>
			} else {
				USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
    15f2:	84 e0       	ldi	r24, 0x04	; 4
    15f4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <USI_TWI_Overflow_State>
			}
			SET_USI_TO_SEND_ACK();
    15f8:	1f b8       	out	0x0f, r1	; 15
    15fa:	b8 9a       	sbi	0x17, 0	; 23
    15fc:	8e e7       	ldi	r24, 0x7E	; 126
    15fe:	8e b9       	out	0x0e, r24	; 14
    1600:	71 c0       	rjmp	.+226    	; 0x16e4 <__vector_14+0x174>
		} else {
			SET_USI_TO_TWI_START_CONDITION_MODE();
    1602:	b8 98       	cbi	0x17, 0	; 23
    1604:	88 ea       	ldi	r24, 0xA8	; 168
    1606:	8d b9       	out	0x0d, r24	; 13
    1608:	80 e7       	ldi	r24, 0x70	; 112
    160a:	8e b9       	out	0x0e, r24	; 14
    160c:	6b c0       	rjmp	.+214    	; 0x16e4 <__vector_14+0x174>
		break;

	// ----- Master write data mode ------
	// Check reply and goto USI_SLAVE_SEND_DATA if OK, else reset USI.
	case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
		if (USIDR) // If NACK, the master does not want more data.
    160e:	8f b1       	in	r24, 0x0f	; 15
    1610:	88 23       	and	r24, r24
    1612:	31 f0       	breq	.+12     	; 0x1620 <__vector_14+0xb0>
		{
			SET_USI_TO_TWI_START_CONDITION_MODE();
    1614:	b8 98       	cbi	0x17, 0	; 23
    1616:	88 ea       	ldi	r24, 0xA8	; 168
    1618:	8d b9       	out	0x0d, r24	; 13
    161a:	80 e7       	ldi	r24, 0x70	; 112
    161c:	8e b9       	out	0x0e, r24	; 14
			return;
    161e:	62 c0       	rjmp	.+196    	; 0x16e4 <__vector_14+0x174>

	// Copy data from buffer to USIDR and set USI to shift byte. Next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
	case USI_SLAVE_SEND_DATA:

		// Get data from Buffer
		tmpTxTail = TWI_TxTail; // Not necessary, but prevents warnings
    1620:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <TWI_TxTail>
		if (TWI_TxHead != tmpTxTail) {
    1624:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <TWI_TxHead>
    1628:	98 17       	cp	r25, r24
    162a:	a1 f0       	breq	.+40     	; 0x1654 <__vector_14+0xe4>
			TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
    162c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <TWI_TxTail>
    1630:	8f 5f       	subi	r24, 0xFF	; 255
    1632:	8f 70       	andi	r24, 0x0F	; 15
    1634:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <TWI_TxTail>
			USIDR      = TWI_TxBuf[TWI_TxTail];
    1638:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TWI_TxTail>
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	e6 57       	subi	r30, 0x76	; 118
    1640:	ff 4f       	sbci	r31, 0xFF	; 255
    1642:	80 81       	ld	r24, Z
    1644:	8f b9       	out	0x0f, r24	; 15
		} else // If the buffer is empty then:
		{
			SET_USI_TO_TWI_START_CONDITION_MODE();
			return;
		}
		USI_TWI_Overflow_State = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <USI_TWI_Overflow_State>
		SET_USI_TO_SEND_DATA();
    164c:	b8 9a       	sbi	0x17, 0	; 23
    164e:	80 e7       	ldi	r24, 0x70	; 112
    1650:	8e b9       	out	0x0e, r24	; 14
		break;
    1652:	48 c0       	rjmp	.+144    	; 0x16e4 <__vector_14+0x174>
		if (TWI_TxHead != tmpTxTail) {
			TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
			USIDR      = TWI_TxBuf[TWI_TxTail];
		} else // If the buffer is empty then:
		{
			SET_USI_TO_TWI_START_CONDITION_MODE();
    1654:	b8 98       	cbi	0x17, 0	; 23
    1656:	88 ea       	ldi	r24, 0xA8	; 168
    1658:	8d b9       	out	0x0d, r24	; 13
    165a:	80 e7       	ldi	r24, 0x70	; 112
    165c:	8e b9       	out	0x0e, r24	; 14
			return;
    165e:	42 c0       	rjmp	.+132    	; 0x16e4 <__vector_14+0x174>
		SET_USI_TO_SEND_DATA();
		break;

	// Set USI to sample reply from master. Next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
	case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
		USI_TWI_Overflow_State = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
    1660:	83 e0       	ldi	r24, 0x03	; 3
    1662:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <USI_TWI_Overflow_State>
		SET_USI_TO_READ_ACK();
    1666:	b8 98       	cbi	0x17, 0	; 23
    1668:	1f b8       	out	0x0f, r1	; 15
    166a:	8e e7       	ldi	r24, 0x7E	; 126
    166c:	8e b9       	out	0x0e, r24	; 14
		break;
    166e:	3a c0       	rjmp	.+116    	; 0x16e4 <__vector_14+0x174>

	// ----- Master read data mode ------
	// Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
	case USI_SLAVE_REQUEST_DATA:
		USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
    1670:	85 e0       	ldi	r24, 0x05	; 5
    1672:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <USI_TWI_Overflow_State>
		SET_USI_TO_READ_DATA();
    1676:	b8 98       	cbi	0x17, 0	; 23
    1678:	80 e7       	ldi	r24, 0x70	; 112
    167a:	8e b9       	out	0x0e, r24	; 14
		// call slave receive callback on stop condition
		if (USI_TWI_On_Slave_Receive) {
    167c:	c0 91 66 00 	lds	r28, 0x0066	; 0x800066 <USI_TWI_On_Slave_Receive>
    1680:	d0 91 67 00 	lds	r29, 0x0067	; 0x800067 <USI_TWI_On_Slave_Receive+0x1>
    1684:	20 97       	sbiw	r28, 0x00	; 0
    1686:	71 f1       	breq	.+92     	; 0x16e4 <__vector_14+0x174>
			tmpRxHead = TWI_RxHead;
    1688:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <TWI_RxHead>
			if (TWI_RxTail != tmpRxHead) { // data in receive buffer
    168c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <TWI_RxTail>
    1690:	18 17       	cp	r17, r24
    1692:	41 f1       	breq	.+80     	; 0x16e4 <__vector_14+0x174>
				// check for stop Condition
				while ((USISR & ((1 << USI_START_COND_INT) | (1 << USIPF) | (0xE << USICNT0))) == 0)
    1694:	8e b1       	in	r24, 0x0e	; 14
    1696:	8e 7a       	andi	r24, 0xAE	; 174
    1698:	e9 f3       	breq	.-6      	; 0x1694 <__vector_14+0x124>
					;// wait for either Start or Stop Condition
					// cancel after one SCL cycle
				if (USISR & (1 << USIPF)) { // Stop Condition
    169a:	75 9b       	sbis	0x0e, 5	; 14
    169c:	23 c0       	rjmp	.+70     	; 0x16e4 <__vector_14+0x174>
					USI_TWI_On_Slave_Receive(USI_TWI_Data_In_Receive_Buffer());
    169e:	11 df       	rcall	.-478    	; 0x14c2 <USI_TWI_Data_In_Receive_Buffer>
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	fe 01       	movw	r30, r28
    16a4:	09 95       	icall
					// reset rx buffer
					TWI_RxTail = tmpRxHead;
    16a6:	10 93 6c 00 	sts	0x006C, r17	; 0x80006c <TWI_RxTail>
    16aa:	1c c0       	rjmp	.+56     	; 0x16e4 <__vector_14+0x174>
		break;

	// Copy data from USIDR and send ACK. Next USI_SLAVE_REQUEST_DATA
	case USI_SLAVE_GET_DATA_AND_SEND_ACK:
		// Put data into Buffer
		USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
    16ac:	84 e0       	ldi	r24, 0x04	; 4
    16ae:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <USI_TWI_Overflow_State>
		tmpUSIDR              = USIDR; // Not necessary, but prevents warnings
    16b2:	2f b1       	in	r18, 0x0f	; 15
		tmpRxHead = (TWI_RxHead + 1) & TWI_RX_BUFFER_MASK;
    16b4:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <TWI_RxHead>
    16b8:	8f 5f       	subi	r24, 0xFF	; 255
    16ba:	8f 70       	andi	r24, 0x0F	; 15
		if (TWI_RxTail != tmpRxHead) {
    16bc:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <TWI_RxTail>
    16c0:	89 17       	cp	r24, r25
    16c2:	69 f0       	breq	.+26     	; 0x16de <__vector_14+0x16e>
			TWI_RxHead            = tmpRxHead;
    16c4:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <TWI_RxHead>
			TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
    16c8:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <TWI_RxHead>
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	e6 58       	subi	r30, 0x86	; 134
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	20 83       	st	Z, r18
			SET_USI_TO_SEND_ACK();
    16d4:	1f b8       	out	0x0f, r1	; 15
    16d6:	b8 9a       	sbi	0x17, 0	; 23
    16d8:	8e e7       	ldi	r24, 0x7E	; 126
    16da:	8e b9       	out	0x0e, r24	; 14
    16dc:	03 c0       	rjmp	.+6      	; 0x16e4 <__vector_14+0x174>
		} else // If the buffer is full then:
		{
			SET_USI_TO_SEND_NACK();
    16de:	b8 98       	cbi	0x17, 0	; 23
    16e0:	8e e7       	ldi	r24, 0x7E	; 126
    16e2:	8e b9       	out	0x0e, r24	; 14
		}
		break;
	}
}
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	bf 91       	pop	r27
    16ee:	af 91       	pop	r26
    16f0:	9f 91       	pop	r25
    16f2:	8f 91       	pop	r24
    16f4:	7f 91       	pop	r23
    16f6:	6f 91       	pop	r22
    16f8:	5f 91       	pop	r21
    16fa:	4f 91       	pop	r20
    16fc:	3f 91       	pop	r19
    16fe:	2f 91       	pop	r18
    1700:	1f 91       	pop	r17
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	0f 90       	pop	r0
    1708:	1f 90       	pop	r1
    170a:	18 95       	reti

0000170c <_Z10print_TEMPv>:
	GLCD_PrintChar(40);GLCD_PrintChar(43);GLCD_PrintChar(42);  // "MTR"
}

void print_TEMP()
{
	GLCD_PrintChar(43);GLCD_PrintChar(38);GLCD_PrintChar(40);GLCD_PrintChar(41);
    170c:	8b e2       	ldi	r24, 0x2B	; 43
    170e:	77 d7       	rcall	.+3822   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
    1710:	86 e2       	ldi	r24, 0x26	; 38
    1712:	75 d7       	rcall	.+3818   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
    1714:	88 e2       	ldi	r24, 0x28	; 40
    1716:	73 d7       	rcall	.+3814   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
    1718:	89 e2       	ldi	r24, 0x29	; 41
    171a:	71 d7       	rcall	.+3810   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
    171c:	08 95       	ret

0000171e <_Z9print_HUMv>:
}

void print_HUM()
{
	GLCD_PrintChar(39);GLCD_PrintChar(44);GLCD_PrintChar(40);
    171e:	87 e2       	ldi	r24, 0x27	; 39
    1720:	6e d7       	rcall	.+3804   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
    1722:	8c e2       	ldi	r24, 0x2C	; 44
    1724:	6c d7       	rcall	.+3800   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
    1726:	88 e2       	ldi	r24, 0x28	; 40
    1728:	6a d7       	rcall	.+3796   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
    172a:	08 95       	ret

0000172c <_Z13print_headingv>:
    }
}

void print_heading()
{
	print_TEMP();
    172c:	ef df       	rcall	.-34     	; 0x170c <_Z10print_TEMPv>
	GLCD_PrintChar(33);  // "-"
    172e:	81 e2       	ldi	r24, 0x21	; 33
    1730:	66 d7       	rcall	.+3788   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
	print_HUM();
    1732:	f5 df       	rcall	.-22     	; 0x171e <_Z9print_HUMv>
	GLCD_PrintChar(32);  // " "
    1734:	80 e2       	ldi	r24, 0x20	; 32
    1736:	63 d7       	rcall	.+3782   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
	GLCD_PrintChar(40);GLCD_PrintChar(43);GLCD_PrintChar(42);  // "MTR"
    1738:	88 e2       	ldi	r24, 0x28	; 40
    173a:	61 d7       	rcall	.+3778   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
    173c:	8b e2       	ldi	r24, 0x2B	; 43
    173e:	5f d7       	rcall	.+3774   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
    1740:	8a e2       	ldi	r24, 0x2A	; 42
    1742:	5d d7       	rcall	.+3770   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
    1744:	08 95       	ret

00001746 <main>:
void print_HUM();

int main(void)
{
	// Init display
	GLCD_Setup();
    1746:	fd d6       	rcall	.+3578   	; 0x2542 <__TEXT_REGION_LENGTH__+0x542>
	GLCD_SetFont(Tahoma15x16, 15, 16);
    1748:	40 e1       	ldi	r20, 0x10	; 16
    174a:	6f e0       	ldi	r22, 0x0F	; 15
    174c:	80 ea       	ldi	r24, 0xA0	; 160
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	3b d7       	rcall	.+3702   	; 0x25c8 <__TEXT_REGION_LENGTH__+0x5c8>

	// Print stable text
	GLCD_GotoXY(0, 0);
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	a2 d6       	rcall	.+3396   	; 0x249c <__TEXT_REGION_LENGTH__+0x49c>
	print_heading();
    1758:	e9 df       	rcall	.-46     	; 0x172c <_Z13print_headingv>
	GLCD_GotoX(0);
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	7e d6       	rcall	.+3324   	; 0x245a <__TEXT_REGION_LENGTH__+0x45a>
	GLCD_GotoLine(2);
    175e:	82 e0       	ldi	r24, 0x02	; 2
    1760:	a4 d6       	rcall	.+3400   	; 0x24aa <__TEXT_REGION_LENGTH__+0x4aa>
	print_TEMP();
    1762:	d4 df       	rcall	.-88     	; 0x170c <_Z10print_TEMPv>
	GLCD_PrintChar(35);  // ":"
    1764:	83 e2       	ldi	r24, 0x23	; 35
    1766:	4b d7       	rcall	.+3734   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
	GLCD_PrintChar(32);  // " "
    1768:	80 e2       	ldi	r24, 0x20	; 32
    176a:	49 d7       	rcall	.+3730   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
	GLCD_GotoX(0);
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	75 d6       	rcall	.+3306   	; 0x245a <__TEXT_REGION_LENGTH__+0x45a>
	GLCD_GotoLine(5);
    1770:	85 e0       	ldi	r24, 0x05	; 5
    1772:	9b d6       	rcall	.+3382   	; 0x24aa <__TEXT_REGION_LENGTH__+0x4aa>
	print_HUM();
    1774:	d4 df       	rcall	.-88     	; 0x171e <_Z9print_HUMv>
	GLCD_PrintChar(35);  // ":"
    1776:	83 e2       	ldi	r24, 0x23	; 35
    1778:	42 d7       	rcall	.+3716   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
	GLCD_PrintChar(32);  // " "
    177a:	80 e2       	ldi	r24, 0x20	; 32
    177c:	40 d7       	rcall	.+3712   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
	
	// Init HTU21D sensor
	myHTU21D.begin();
    177e:	80 e7       	ldi	r24, 0x70	; 112
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	d5 da       	rcall	.-2646   	; 0xd2e <_ZN6HTU21D5beginEv>
	
    while (1)
    {
		float temp = myHTU21D.readTemperature();  // Get temperature
    1784:	63 ee       	ldi	r22, 0xE3	; 227
    1786:	80 e7       	ldi	r24, 0x70	; 112
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	ad db       	rcall	.-2214   	; 0xee6 <_ZN6HTU21D15readTemperatureE26HTU21D_TEMP_OPERATION_MODE>
    178c:	4b 01       	movw	r8, r22
    178e:	5c 01       	movw	r10, r24
		float hum = myHTU21D.readCompensatedHumidity();  // Get humidity
    1790:	40 e0       	ldi	r20, 0x00	; 0
    1792:	50 e0       	ldi	r21, 0x00	; 0
    1794:	6e e7       	ldi	r22, 0x7E	; 126
    1796:	73 e4       	ldi	r23, 0x43	; 67
    1798:	80 e7       	ldi	r24, 0x70	; 112
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	50 dc       	rcall	.-1888   	; 0x103e <_ZN6HTU21D23readCompensatedHumidityEf>
    179e:	6b 01       	movw	r12, r22
    17a0:	7c 01       	movw	r14, r24
		
		// Print temperature
		GLCD_GotoX(50);
    17a2:	82 e3       	ldi	r24, 0x32	; 50
    17a4:	5a d6       	rcall	.+3252   	; 0x245a <__TEXT_REGION_LENGTH__+0x45a>
		GLCD_GotoLine(2);
    17a6:	82 e0       	ldi	r24, 0x02	; 2
    17a8:	80 d6       	rcall	.+3328   	; 0x24aa <__TEXT_REGION_LENGTH__+0x4aa>
		GLCD_PrintDouble(temp, 1);
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	c5 01       	movw	r24, r10
    17ae:	b4 01       	movw	r22, r8
    17b0:	ed d9       	rcall	.-3110   	; 0xb8c <GLCD_PrintDouble>
		GLCD_PrintChar(32);  // " "
    17b2:	80 e2       	ldi	r24, 0x20	; 32
    17b4:	24 d7       	rcall	.+3656   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
		GLCD_PrintChar(37);  // "C"
    17b6:	85 e2       	ldi	r24, 0x25	; 37
    17b8:	22 d7       	rcall	.+3652   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
		
		// Print humidity
		GLCD_GotoX(50);
    17ba:	82 e3       	ldi	r24, 0x32	; 50
    17bc:	4e d6       	rcall	.+3228   	; 0x245a <__TEXT_REGION_LENGTH__+0x45a>
		GLCD_GotoLine(5);
    17be:	85 e0       	ldi	r24, 0x05	; 5
    17c0:	74 d6       	rcall	.+3304   	; 0x24aa <__TEXT_REGION_LENGTH__+0x4aa>
		GLCD_PrintDouble(hum, 1);
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	c7 01       	movw	r24, r14
    17c6:	b6 01       	movw	r22, r12
    17c8:	e1 d9       	rcall	.-3134   	; 0xb8c <GLCD_PrintDouble>
		GLCD_PrintChar(32);  // " "
    17ca:	80 e2       	ldi	r24, 0x20	; 32
    17cc:	18 d7       	rcall	.+3632   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
		GLCD_PrintChar(36);  // "%"
    17ce:	84 e2       	ldi	r24, 0x24	; 36
    17d0:	16 d7       	rcall	.+3628   	; 0x25fe <__TEXT_REGION_LENGTH__+0x5fe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17d2:	2f e7       	ldi	r18, 0x7F	; 127
    17d4:	8a e1       	ldi	r24, 0x1A	; 26
    17d6:	96 e0       	ldi	r25, 0x06	; 6
    17d8:	21 50       	subi	r18, 0x01	; 1
    17da:	80 40       	sbci	r24, 0x00	; 0
    17dc:	90 40       	sbci	r25, 0x00	; 0
    17de:	e1 f7       	brne	.-8      	; 0x17d8 <main+0x92>
    17e0:	00 c0       	rjmp	.+0      	; 0x17e2 <main+0x9c>
    17e2:	00 00       	nop
    17e4:	cf cf       	rjmp	.-98     	; 0x1784 <main+0x3e>

000017e6 <_GLOBAL__sub_I_myHTU21D>:
#include "lib_files/AVR-SSD1306-Library/SSD1306.h"
#include "lib_files/AVR-SSD1306-Library/Tahoma15x16.h"
#include "lib_files/HTU21D/HTU21D.h"


HTU21D myHTU21D;
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	80 e7       	ldi	r24, 0x70	; 112
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	34 da       	rcall	.-2968   	; 0xc56 <_ZN6HTU21DC1E17HTU21D_RESOLUTION>
    17ee:	08 95       	ret

000017f0 <__subsf3>:
    17f0:	50 58       	subi	r21, 0x80	; 128

000017f2 <__addsf3>:
    17f2:	bb 27       	eor	r27, r27
    17f4:	aa 27       	eor	r26, r26
    17f6:	0e d0       	rcall	.+28     	; 0x1814 <__addsf3x>
    17f8:	0d c1       	rjmp	.+538    	; 0x1a14 <__fp_round>
    17fa:	fe d0       	rcall	.+508    	; 0x19f8 <__fp_pscA>
    17fc:	30 f0       	brcs	.+12     	; 0x180a <__addsf3+0x18>
    17fe:	03 d1       	rcall	.+518    	; 0x1a06 <__fp_pscB>
    1800:	20 f0       	brcs	.+8      	; 0x180a <__addsf3+0x18>
    1802:	31 f4       	brne	.+12     	; 0x1810 <__addsf3+0x1e>
    1804:	9f 3f       	cpi	r25, 0xFF	; 255
    1806:	11 f4       	brne	.+4      	; 0x180c <__addsf3+0x1a>
    1808:	1e f4       	brtc	.+6      	; 0x1810 <__addsf3+0x1e>
    180a:	f3 c0       	rjmp	.+486    	; 0x19f2 <__fp_nan>
    180c:	0e f4       	brtc	.+2      	; 0x1810 <__addsf3+0x1e>
    180e:	e0 95       	com	r30
    1810:	e7 fb       	bst	r30, 7
    1812:	e9 c0       	rjmp	.+466    	; 0x19e6 <__fp_inf>

00001814 <__addsf3x>:
    1814:	e9 2f       	mov	r30, r25
    1816:	0f d1       	rcall	.+542    	; 0x1a36 <__fp_split3>
    1818:	80 f3       	brcs	.-32     	; 0x17fa <__addsf3+0x8>
    181a:	ba 17       	cp	r27, r26
    181c:	62 07       	cpc	r22, r18
    181e:	73 07       	cpc	r23, r19
    1820:	84 07       	cpc	r24, r20
    1822:	95 07       	cpc	r25, r21
    1824:	18 f0       	brcs	.+6      	; 0x182c <__addsf3x+0x18>
    1826:	71 f4       	brne	.+28     	; 0x1844 <__addsf3x+0x30>
    1828:	9e f5       	brtc	.+102    	; 0x1890 <__addsf3x+0x7c>
    182a:	27 c1       	rjmp	.+590    	; 0x1a7a <__fp_zero>
    182c:	0e f4       	brtc	.+2      	; 0x1830 <__addsf3x+0x1c>
    182e:	e0 95       	com	r30
    1830:	0b 2e       	mov	r0, r27
    1832:	ba 2f       	mov	r27, r26
    1834:	a0 2d       	mov	r26, r0
    1836:	0b 01       	movw	r0, r22
    1838:	b9 01       	movw	r22, r18
    183a:	90 01       	movw	r18, r0
    183c:	0c 01       	movw	r0, r24
    183e:	ca 01       	movw	r24, r20
    1840:	a0 01       	movw	r20, r0
    1842:	11 24       	eor	r1, r1
    1844:	ff 27       	eor	r31, r31
    1846:	59 1b       	sub	r21, r25
    1848:	99 f0       	breq	.+38     	; 0x1870 <__addsf3x+0x5c>
    184a:	59 3f       	cpi	r21, 0xF9	; 249
    184c:	50 f4       	brcc	.+20     	; 0x1862 <__addsf3x+0x4e>
    184e:	50 3e       	cpi	r21, 0xE0	; 224
    1850:	68 f1       	brcs	.+90     	; 0x18ac <__addsf3x+0x98>
    1852:	1a 16       	cp	r1, r26
    1854:	f0 40       	sbci	r31, 0x00	; 0
    1856:	a2 2f       	mov	r26, r18
    1858:	23 2f       	mov	r18, r19
    185a:	34 2f       	mov	r19, r20
    185c:	44 27       	eor	r20, r20
    185e:	58 5f       	subi	r21, 0xF8	; 248
    1860:	f3 cf       	rjmp	.-26     	; 0x1848 <__addsf3x+0x34>
    1862:	46 95       	lsr	r20
    1864:	37 95       	ror	r19
    1866:	27 95       	ror	r18
    1868:	a7 95       	ror	r26
    186a:	f0 40       	sbci	r31, 0x00	; 0
    186c:	53 95       	inc	r21
    186e:	c9 f7       	brne	.-14     	; 0x1862 <__addsf3x+0x4e>
    1870:	7e f4       	brtc	.+30     	; 0x1890 <__addsf3x+0x7c>
    1872:	1f 16       	cp	r1, r31
    1874:	ba 0b       	sbc	r27, r26
    1876:	62 0b       	sbc	r22, r18
    1878:	73 0b       	sbc	r23, r19
    187a:	84 0b       	sbc	r24, r20
    187c:	ba f0       	brmi	.+46     	; 0x18ac <__addsf3x+0x98>
    187e:	91 50       	subi	r25, 0x01	; 1
    1880:	a1 f0       	breq	.+40     	; 0x18aa <__addsf3x+0x96>
    1882:	ff 0f       	add	r31, r31
    1884:	bb 1f       	adc	r27, r27
    1886:	66 1f       	adc	r22, r22
    1888:	77 1f       	adc	r23, r23
    188a:	88 1f       	adc	r24, r24
    188c:	c2 f7       	brpl	.-16     	; 0x187e <__addsf3x+0x6a>
    188e:	0e c0       	rjmp	.+28     	; 0x18ac <__addsf3x+0x98>
    1890:	ba 0f       	add	r27, r26
    1892:	62 1f       	adc	r22, r18
    1894:	73 1f       	adc	r23, r19
    1896:	84 1f       	adc	r24, r20
    1898:	48 f4       	brcc	.+18     	; 0x18ac <__addsf3x+0x98>
    189a:	87 95       	ror	r24
    189c:	77 95       	ror	r23
    189e:	67 95       	ror	r22
    18a0:	b7 95       	ror	r27
    18a2:	f7 95       	ror	r31
    18a4:	9e 3f       	cpi	r25, 0xFE	; 254
    18a6:	08 f0       	brcs	.+2      	; 0x18aa <__addsf3x+0x96>
    18a8:	b3 cf       	rjmp	.-154    	; 0x1810 <__addsf3+0x1e>
    18aa:	93 95       	inc	r25
    18ac:	88 0f       	add	r24, r24
    18ae:	08 f0       	brcs	.+2      	; 0x18b2 <__addsf3x+0x9e>
    18b0:	99 27       	eor	r25, r25
    18b2:	ee 0f       	add	r30, r30
    18b4:	97 95       	ror	r25
    18b6:	87 95       	ror	r24
    18b8:	08 95       	ret

000018ba <__cmpsf2>:
    18ba:	71 d0       	rcall	.+226    	; 0x199e <__fp_cmp>
    18bc:	08 f4       	brcc	.+2      	; 0x18c0 <__cmpsf2+0x6>
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	08 95       	ret

000018c2 <__fixsfsi>:
    18c2:	04 d0       	rcall	.+8      	; 0x18cc <__fixunssfsi>
    18c4:	68 94       	set
    18c6:	b1 11       	cpse	r27, r1
    18c8:	d9 c0       	rjmp	.+434    	; 0x1a7c <__fp_szero>
    18ca:	08 95       	ret

000018cc <__fixunssfsi>:
    18cc:	bc d0       	rcall	.+376    	; 0x1a46 <__fp_splitA>
    18ce:	88 f0       	brcs	.+34     	; 0x18f2 <__fixunssfsi+0x26>
    18d0:	9f 57       	subi	r25, 0x7F	; 127
    18d2:	90 f0       	brcs	.+36     	; 0x18f8 <__fixunssfsi+0x2c>
    18d4:	b9 2f       	mov	r27, r25
    18d6:	99 27       	eor	r25, r25
    18d8:	b7 51       	subi	r27, 0x17	; 23
    18da:	a0 f0       	brcs	.+40     	; 0x1904 <__fixunssfsi+0x38>
    18dc:	d1 f0       	breq	.+52     	; 0x1912 <__fixunssfsi+0x46>
    18de:	66 0f       	add	r22, r22
    18e0:	77 1f       	adc	r23, r23
    18e2:	88 1f       	adc	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	1a f0       	brmi	.+6      	; 0x18ee <__fixunssfsi+0x22>
    18e8:	ba 95       	dec	r27
    18ea:	c9 f7       	brne	.-14     	; 0x18de <__fixunssfsi+0x12>
    18ec:	12 c0       	rjmp	.+36     	; 0x1912 <__fixunssfsi+0x46>
    18ee:	b1 30       	cpi	r27, 0x01	; 1
    18f0:	81 f0       	breq	.+32     	; 0x1912 <__fixunssfsi+0x46>
    18f2:	c3 d0       	rcall	.+390    	; 0x1a7a <__fp_zero>
    18f4:	b1 e0       	ldi	r27, 0x01	; 1
    18f6:	08 95       	ret
    18f8:	c0 c0       	rjmp	.+384    	; 0x1a7a <__fp_zero>
    18fa:	67 2f       	mov	r22, r23
    18fc:	78 2f       	mov	r23, r24
    18fe:	88 27       	eor	r24, r24
    1900:	b8 5f       	subi	r27, 0xF8	; 248
    1902:	39 f0       	breq	.+14     	; 0x1912 <__fixunssfsi+0x46>
    1904:	b9 3f       	cpi	r27, 0xF9	; 249
    1906:	cc f3       	brlt	.-14     	; 0x18fa <__fixunssfsi+0x2e>
    1908:	86 95       	lsr	r24
    190a:	77 95       	ror	r23
    190c:	67 95       	ror	r22
    190e:	b3 95       	inc	r27
    1910:	d9 f7       	brne	.-10     	; 0x1908 <__fixunssfsi+0x3c>
    1912:	3e f4       	brtc	.+14     	; 0x1922 <__fixunssfsi+0x56>
    1914:	90 95       	com	r25
    1916:	80 95       	com	r24
    1918:	70 95       	com	r23
    191a:	61 95       	neg	r22
    191c:	7f 4f       	sbci	r23, 0xFF	; 255
    191e:	8f 4f       	sbci	r24, 0xFF	; 255
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	08 95       	ret

00001924 <__floatunsisf>:
    1924:	e8 94       	clt
    1926:	09 c0       	rjmp	.+18     	; 0x193a <__floatsisf+0x12>

00001928 <__floatsisf>:
    1928:	97 fb       	bst	r25, 7
    192a:	3e f4       	brtc	.+14     	; 0x193a <__floatsisf+0x12>
    192c:	90 95       	com	r25
    192e:	80 95       	com	r24
    1930:	70 95       	com	r23
    1932:	61 95       	neg	r22
    1934:	7f 4f       	sbci	r23, 0xFF	; 255
    1936:	8f 4f       	sbci	r24, 0xFF	; 255
    1938:	9f 4f       	sbci	r25, 0xFF	; 255
    193a:	99 23       	and	r25, r25
    193c:	a9 f0       	breq	.+42     	; 0x1968 <__floatsisf+0x40>
    193e:	f9 2f       	mov	r31, r25
    1940:	96 e9       	ldi	r25, 0x96	; 150
    1942:	bb 27       	eor	r27, r27
    1944:	93 95       	inc	r25
    1946:	f6 95       	lsr	r31
    1948:	87 95       	ror	r24
    194a:	77 95       	ror	r23
    194c:	67 95       	ror	r22
    194e:	b7 95       	ror	r27
    1950:	f1 11       	cpse	r31, r1
    1952:	f8 cf       	rjmp	.-16     	; 0x1944 <__floatsisf+0x1c>
    1954:	fa f4       	brpl	.+62     	; 0x1994 <__floatsisf+0x6c>
    1956:	bb 0f       	add	r27, r27
    1958:	11 f4       	brne	.+4      	; 0x195e <__floatsisf+0x36>
    195a:	60 ff       	sbrs	r22, 0
    195c:	1b c0       	rjmp	.+54     	; 0x1994 <__floatsisf+0x6c>
    195e:	6f 5f       	subi	r22, 0xFF	; 255
    1960:	7f 4f       	sbci	r23, 0xFF	; 255
    1962:	8f 4f       	sbci	r24, 0xFF	; 255
    1964:	9f 4f       	sbci	r25, 0xFF	; 255
    1966:	16 c0       	rjmp	.+44     	; 0x1994 <__floatsisf+0x6c>
    1968:	88 23       	and	r24, r24
    196a:	11 f0       	breq	.+4      	; 0x1970 <__floatsisf+0x48>
    196c:	96 e9       	ldi	r25, 0x96	; 150
    196e:	11 c0       	rjmp	.+34     	; 0x1992 <__floatsisf+0x6a>
    1970:	77 23       	and	r23, r23
    1972:	21 f0       	breq	.+8      	; 0x197c <__floatsisf+0x54>
    1974:	9e e8       	ldi	r25, 0x8E	; 142
    1976:	87 2f       	mov	r24, r23
    1978:	76 2f       	mov	r23, r22
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <__floatsisf+0x5e>
    197c:	66 23       	and	r22, r22
    197e:	71 f0       	breq	.+28     	; 0x199c <__floatsisf+0x74>
    1980:	96 e8       	ldi	r25, 0x86	; 134
    1982:	86 2f       	mov	r24, r22
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	60 e0       	ldi	r22, 0x00	; 0
    1988:	2a f0       	brmi	.+10     	; 0x1994 <__floatsisf+0x6c>
    198a:	9a 95       	dec	r25
    198c:	66 0f       	add	r22, r22
    198e:	77 1f       	adc	r23, r23
    1990:	88 1f       	adc	r24, r24
    1992:	da f7       	brpl	.-10     	; 0x198a <__floatsisf+0x62>
    1994:	88 0f       	add	r24, r24
    1996:	96 95       	lsr	r25
    1998:	87 95       	ror	r24
    199a:	97 f9       	bld	r25, 7
    199c:	08 95       	ret

0000199e <__fp_cmp>:
    199e:	99 0f       	add	r25, r25
    19a0:	00 08       	sbc	r0, r0
    19a2:	55 0f       	add	r21, r21
    19a4:	aa 0b       	sbc	r26, r26
    19a6:	e0 e8       	ldi	r30, 0x80	; 128
    19a8:	fe ef       	ldi	r31, 0xFE	; 254
    19aa:	16 16       	cp	r1, r22
    19ac:	17 06       	cpc	r1, r23
    19ae:	e8 07       	cpc	r30, r24
    19b0:	f9 07       	cpc	r31, r25
    19b2:	c0 f0       	brcs	.+48     	; 0x19e4 <__fp_cmp+0x46>
    19b4:	12 16       	cp	r1, r18
    19b6:	13 06       	cpc	r1, r19
    19b8:	e4 07       	cpc	r30, r20
    19ba:	f5 07       	cpc	r31, r21
    19bc:	98 f0       	brcs	.+38     	; 0x19e4 <__fp_cmp+0x46>
    19be:	62 1b       	sub	r22, r18
    19c0:	73 0b       	sbc	r23, r19
    19c2:	84 0b       	sbc	r24, r20
    19c4:	95 0b       	sbc	r25, r21
    19c6:	39 f4       	brne	.+14     	; 0x19d6 <__fp_cmp+0x38>
    19c8:	0a 26       	eor	r0, r26
    19ca:	61 f0       	breq	.+24     	; 0x19e4 <__fp_cmp+0x46>
    19cc:	23 2b       	or	r18, r19
    19ce:	24 2b       	or	r18, r20
    19d0:	25 2b       	or	r18, r21
    19d2:	21 f4       	brne	.+8      	; 0x19dc <__fp_cmp+0x3e>
    19d4:	08 95       	ret
    19d6:	0a 26       	eor	r0, r26
    19d8:	09 f4       	brne	.+2      	; 0x19dc <__fp_cmp+0x3e>
    19da:	a1 40       	sbci	r26, 0x01	; 1
    19dc:	a6 95       	lsr	r26
    19de:	8f ef       	ldi	r24, 0xFF	; 255
    19e0:	81 1d       	adc	r24, r1
    19e2:	81 1d       	adc	r24, r1
    19e4:	08 95       	ret

000019e6 <__fp_inf>:
    19e6:	97 f9       	bld	r25, 7
    19e8:	9f 67       	ori	r25, 0x7F	; 127
    19ea:	80 e8       	ldi	r24, 0x80	; 128
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	60 e0       	ldi	r22, 0x00	; 0
    19f0:	08 95       	ret

000019f2 <__fp_nan>:
    19f2:	9f ef       	ldi	r25, 0xFF	; 255
    19f4:	80 ec       	ldi	r24, 0xC0	; 192
    19f6:	08 95       	ret

000019f8 <__fp_pscA>:
    19f8:	00 24       	eor	r0, r0
    19fa:	0a 94       	dec	r0
    19fc:	16 16       	cp	r1, r22
    19fe:	17 06       	cpc	r1, r23
    1a00:	18 06       	cpc	r1, r24
    1a02:	09 06       	cpc	r0, r25
    1a04:	08 95       	ret

00001a06 <__fp_pscB>:
    1a06:	00 24       	eor	r0, r0
    1a08:	0a 94       	dec	r0
    1a0a:	12 16       	cp	r1, r18
    1a0c:	13 06       	cpc	r1, r19
    1a0e:	14 06       	cpc	r1, r20
    1a10:	05 06       	cpc	r0, r21
    1a12:	08 95       	ret

00001a14 <__fp_round>:
    1a14:	09 2e       	mov	r0, r25
    1a16:	03 94       	inc	r0
    1a18:	00 0c       	add	r0, r0
    1a1a:	11 f4       	brne	.+4      	; 0x1a20 <__fp_round+0xc>
    1a1c:	88 23       	and	r24, r24
    1a1e:	52 f0       	brmi	.+20     	; 0x1a34 <__fp_round+0x20>
    1a20:	bb 0f       	add	r27, r27
    1a22:	40 f4       	brcc	.+16     	; 0x1a34 <__fp_round+0x20>
    1a24:	bf 2b       	or	r27, r31
    1a26:	11 f4       	brne	.+4      	; 0x1a2c <__fp_round+0x18>
    1a28:	60 ff       	sbrs	r22, 0
    1a2a:	04 c0       	rjmp	.+8      	; 0x1a34 <__fp_round+0x20>
    1a2c:	6f 5f       	subi	r22, 0xFF	; 255
    1a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a30:	8f 4f       	sbci	r24, 0xFF	; 255
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	08 95       	ret

00001a36 <__fp_split3>:
    1a36:	57 fd       	sbrc	r21, 7
    1a38:	90 58       	subi	r25, 0x80	; 128
    1a3a:	44 0f       	add	r20, r20
    1a3c:	55 1f       	adc	r21, r21
    1a3e:	59 f0       	breq	.+22     	; 0x1a56 <__fp_splitA+0x10>
    1a40:	5f 3f       	cpi	r21, 0xFF	; 255
    1a42:	71 f0       	breq	.+28     	; 0x1a60 <__fp_splitA+0x1a>
    1a44:	47 95       	ror	r20

00001a46 <__fp_splitA>:
    1a46:	88 0f       	add	r24, r24
    1a48:	97 fb       	bst	r25, 7
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	61 f0       	breq	.+24     	; 0x1a66 <__fp_splitA+0x20>
    1a4e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a50:	79 f0       	breq	.+30     	; 0x1a70 <__fp_splitA+0x2a>
    1a52:	87 95       	ror	r24
    1a54:	08 95       	ret
    1a56:	12 16       	cp	r1, r18
    1a58:	13 06       	cpc	r1, r19
    1a5a:	14 06       	cpc	r1, r20
    1a5c:	55 1f       	adc	r21, r21
    1a5e:	f2 cf       	rjmp	.-28     	; 0x1a44 <__fp_split3+0xe>
    1a60:	46 95       	lsr	r20
    1a62:	f1 df       	rcall	.-30     	; 0x1a46 <__fp_splitA>
    1a64:	08 c0       	rjmp	.+16     	; 0x1a76 <__fp_splitA+0x30>
    1a66:	16 16       	cp	r1, r22
    1a68:	17 06       	cpc	r1, r23
    1a6a:	18 06       	cpc	r1, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	f1 cf       	rjmp	.-30     	; 0x1a52 <__fp_splitA+0xc>
    1a70:	86 95       	lsr	r24
    1a72:	71 05       	cpc	r23, r1
    1a74:	61 05       	cpc	r22, r1
    1a76:	08 94       	sec
    1a78:	08 95       	ret

00001a7a <__fp_zero>:
    1a7a:	e8 94       	clt

00001a7c <__fp_szero>:
    1a7c:	bb 27       	eor	r27, r27
    1a7e:	66 27       	eor	r22, r22
    1a80:	77 27       	eor	r23, r23
    1a82:	cb 01       	movw	r24, r22
    1a84:	97 f9       	bld	r25, 7
    1a86:	08 95       	ret

00001a88 <__gesf2>:
    1a88:	8a df       	rcall	.-236    	; 0x199e <__fp_cmp>
    1a8a:	08 f4       	brcc	.+2      	; 0x1a8e <__gesf2+0x6>
    1a8c:	8f ef       	ldi	r24, 0xFF	; 255
    1a8e:	08 95       	ret

00001a90 <__mulsf3>:
    1a90:	0a d0       	rcall	.+20     	; 0x1aa6 <__mulsf3x>
    1a92:	c0 cf       	rjmp	.-128    	; 0x1a14 <__fp_round>
    1a94:	b1 df       	rcall	.-158    	; 0x19f8 <__fp_pscA>
    1a96:	28 f0       	brcs	.+10     	; 0x1aa2 <__mulsf3+0x12>
    1a98:	b6 df       	rcall	.-148    	; 0x1a06 <__fp_pscB>
    1a9a:	18 f0       	brcs	.+6      	; 0x1aa2 <__mulsf3+0x12>
    1a9c:	95 23       	and	r25, r21
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <__mulsf3+0x12>
    1aa0:	a2 cf       	rjmp	.-188    	; 0x19e6 <__fp_inf>
    1aa2:	a7 cf       	rjmp	.-178    	; 0x19f2 <__fp_nan>
    1aa4:	eb cf       	rjmp	.-42     	; 0x1a7c <__fp_szero>

00001aa6 <__mulsf3x>:
    1aa6:	c7 df       	rcall	.-114    	; 0x1a36 <__fp_split3>
    1aa8:	a8 f3       	brcs	.-22     	; 0x1a94 <__mulsf3+0x4>

00001aaa <__mulsf3_pse>:
    1aaa:	99 23       	and	r25, r25
    1aac:	d9 f3       	breq	.-10     	; 0x1aa4 <__mulsf3+0x14>
    1aae:	55 23       	and	r21, r21
    1ab0:	c9 f3       	breq	.-14     	; 0x1aa4 <__mulsf3+0x14>
    1ab2:	95 0f       	add	r25, r21
    1ab4:	50 e0       	ldi	r21, 0x00	; 0
    1ab6:	55 1f       	adc	r21, r21
    1ab8:	aa 27       	eor	r26, r26
    1aba:	ee 27       	eor	r30, r30
    1abc:	ff 27       	eor	r31, r31
    1abe:	bb 27       	eor	r27, r27
    1ac0:	00 24       	eor	r0, r0
    1ac2:	08 94       	sec
    1ac4:	67 95       	ror	r22
    1ac6:	20 f4       	brcc	.+8      	; 0x1ad0 <__mulsf3_pse+0x26>
    1ac8:	e2 0f       	add	r30, r18
    1aca:	f3 1f       	adc	r31, r19
    1acc:	b4 1f       	adc	r27, r20
    1ace:	0a 1e       	adc	r0, r26
    1ad0:	22 0f       	add	r18, r18
    1ad2:	33 1f       	adc	r19, r19
    1ad4:	44 1f       	adc	r20, r20
    1ad6:	aa 1f       	adc	r26, r26
    1ad8:	66 95       	lsr	r22
    1ada:	a9 f7       	brne	.-22     	; 0x1ac6 <__mulsf3_pse+0x1c>
    1adc:	77 95       	ror	r23
    1ade:	30 f4       	brcc	.+12     	; 0x1aec <__mulsf3_pse+0x42>
    1ae0:	f3 0f       	add	r31, r19
    1ae2:	b4 1f       	adc	r27, r20
    1ae4:	0a 1e       	adc	r0, r26
    1ae6:	12 1e       	adc	r1, r18
    1ae8:	08 f4       	brcc	.+2      	; 0x1aec <__mulsf3_pse+0x42>
    1aea:	63 95       	inc	r22
    1aec:	33 0f       	add	r19, r19
    1aee:	44 1f       	adc	r20, r20
    1af0:	aa 1f       	adc	r26, r26
    1af2:	22 1f       	adc	r18, r18
    1af4:	76 95       	lsr	r23
    1af6:	99 f7       	brne	.-26     	; 0x1ade <__mulsf3_pse+0x34>
    1af8:	87 95       	ror	r24
    1afa:	20 f4       	brcc	.+8      	; 0x1b04 <__mulsf3_pse+0x5a>
    1afc:	b4 0f       	add	r27, r20
    1afe:	0a 1e       	adc	r0, r26
    1b00:	12 1e       	adc	r1, r18
    1b02:	63 1f       	adc	r22, r19
    1b04:	44 0f       	add	r20, r20
    1b06:	aa 1f       	adc	r26, r26
    1b08:	22 1f       	adc	r18, r18
    1b0a:	33 1f       	adc	r19, r19
    1b0c:	86 95       	lsr	r24
    1b0e:	a9 f7       	brne	.-22     	; 0x1afa <__mulsf3_pse+0x50>
    1b10:	86 2f       	mov	r24, r22
    1b12:	71 2d       	mov	r23, r1
    1b14:	60 2d       	mov	r22, r0
    1b16:	11 24       	eor	r1, r1
    1b18:	9f 57       	subi	r25, 0x7F	; 127
    1b1a:	50 40       	sbci	r21, 0x00	; 0
    1b1c:	8a f0       	brmi	.+34     	; 0x1b40 <__mulsf3_pse+0x96>
    1b1e:	e1 f0       	breq	.+56     	; 0x1b58 <__mulsf3_pse+0xae>
    1b20:	88 23       	and	r24, r24
    1b22:	4a f0       	brmi	.+18     	; 0x1b36 <__mulsf3_pse+0x8c>
    1b24:	ee 0f       	add	r30, r30
    1b26:	ff 1f       	adc	r31, r31
    1b28:	bb 1f       	adc	r27, r27
    1b2a:	66 1f       	adc	r22, r22
    1b2c:	77 1f       	adc	r23, r23
    1b2e:	88 1f       	adc	r24, r24
    1b30:	91 50       	subi	r25, 0x01	; 1
    1b32:	50 40       	sbci	r21, 0x00	; 0
    1b34:	a9 f7       	brne	.-22     	; 0x1b20 <__mulsf3_pse+0x76>
    1b36:	9e 3f       	cpi	r25, 0xFE	; 254
    1b38:	51 05       	cpc	r21, r1
    1b3a:	70 f0       	brcs	.+28     	; 0x1b58 <__mulsf3_pse+0xae>
    1b3c:	54 cf       	rjmp	.-344    	; 0x19e6 <__fp_inf>
    1b3e:	9e cf       	rjmp	.-196    	; 0x1a7c <__fp_szero>
    1b40:	5f 3f       	cpi	r21, 0xFF	; 255
    1b42:	ec f3       	brlt	.-6      	; 0x1b3e <__mulsf3_pse+0x94>
    1b44:	98 3e       	cpi	r25, 0xE8	; 232
    1b46:	dc f3       	brlt	.-10     	; 0x1b3e <__mulsf3_pse+0x94>
    1b48:	86 95       	lsr	r24
    1b4a:	77 95       	ror	r23
    1b4c:	67 95       	ror	r22
    1b4e:	b7 95       	ror	r27
    1b50:	f7 95       	ror	r31
    1b52:	e7 95       	ror	r30
    1b54:	9f 5f       	subi	r25, 0xFF	; 255
    1b56:	c1 f7       	brne	.-16     	; 0x1b48 <__mulsf3_pse+0x9e>
    1b58:	fe 2b       	or	r31, r30
    1b5a:	88 0f       	add	r24, r24
    1b5c:	91 1d       	adc	r25, r1
    1b5e:	96 95       	lsr	r25
    1b60:	87 95       	ror	r24
    1b62:	97 f9       	bld	r25, 7
    1b64:	08 95       	ret

00001b66 <pow>:
    1b66:	fa 01       	movw	r30, r20
    1b68:	ee 0f       	add	r30, r30
    1b6a:	ff 1f       	adc	r31, r31
    1b6c:	30 96       	adiw	r30, 0x00	; 0
    1b6e:	21 05       	cpc	r18, r1
    1b70:	31 05       	cpc	r19, r1
    1b72:	99 f1       	breq	.+102    	; 0x1bda <pow+0x74>
    1b74:	61 15       	cp	r22, r1
    1b76:	71 05       	cpc	r23, r1
    1b78:	61 f4       	brne	.+24     	; 0x1b92 <pow+0x2c>
    1b7a:	80 38       	cpi	r24, 0x80	; 128
    1b7c:	bf e3       	ldi	r27, 0x3F	; 63
    1b7e:	9b 07       	cpc	r25, r27
    1b80:	49 f1       	breq	.+82     	; 0x1bd4 <pow+0x6e>
    1b82:	68 94       	set
    1b84:	90 38       	cpi	r25, 0x80	; 128
    1b86:	81 05       	cpc	r24, r1
    1b88:	61 f0       	breq	.+24     	; 0x1ba2 <pow+0x3c>
    1b8a:	80 38       	cpi	r24, 0x80	; 128
    1b8c:	bf ef       	ldi	r27, 0xFF	; 255
    1b8e:	9b 07       	cpc	r25, r27
    1b90:	41 f0       	breq	.+16     	; 0x1ba2 <pow+0x3c>
    1b92:	99 23       	and	r25, r25
    1b94:	42 f5       	brpl	.+80     	; 0x1be6 <pow+0x80>
    1b96:	ff 3f       	cpi	r31, 0xFF	; 255
    1b98:	e1 05       	cpc	r30, r1
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	21 05       	cpc	r18, r1
    1b9e:	11 f1       	breq	.+68     	; 0x1be4 <pow+0x7e>
    1ba0:	e8 94       	clt
    1ba2:	08 94       	sec
    1ba4:	e7 95       	ror	r30
    1ba6:	d9 01       	movw	r26, r18
    1ba8:	aa 23       	and	r26, r26
    1baa:	29 f4       	brne	.+10     	; 0x1bb6 <pow+0x50>
    1bac:	ab 2f       	mov	r26, r27
    1bae:	be 2f       	mov	r27, r30
    1bb0:	f8 5f       	subi	r31, 0xF8	; 248
    1bb2:	d0 f3       	brcs	.-12     	; 0x1ba8 <pow+0x42>
    1bb4:	10 c0       	rjmp	.+32     	; 0x1bd6 <pow+0x70>
    1bb6:	ff 5f       	subi	r31, 0xFF	; 255
    1bb8:	70 f4       	brcc	.+28     	; 0x1bd6 <pow+0x70>
    1bba:	a6 95       	lsr	r26
    1bbc:	e0 f7       	brcc	.-8      	; 0x1bb6 <pow+0x50>
    1bbe:	f7 39       	cpi	r31, 0x97	; 151
    1bc0:	50 f0       	brcs	.+20     	; 0x1bd6 <pow+0x70>
    1bc2:	19 f0       	breq	.+6      	; 0x1bca <pow+0x64>
    1bc4:	ff 3a       	cpi	r31, 0xAF	; 175
    1bc6:	38 f4       	brcc	.+14     	; 0x1bd6 <pow+0x70>
    1bc8:	9f 77       	andi	r25, 0x7F	; 127
    1bca:	9f 93       	push	r25
    1bcc:	0c d0       	rcall	.+24     	; 0x1be6 <pow+0x80>
    1bce:	0f 90       	pop	r0
    1bd0:	07 fc       	sbrc	r0, 7
    1bd2:	90 58       	subi	r25, 0x80	; 128
    1bd4:	08 95       	ret
    1bd6:	3e f0       	brts	.+14     	; 0x1be6 <pow+0x80>
    1bd8:	0c cf       	rjmp	.-488    	; 0x19f2 <__fp_nan>
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    1bde:	80 e8       	ldi	r24, 0x80	; 128
    1be0:	9f e3       	ldi	r25, 0x3F	; 63
    1be2:	08 95       	ret
    1be4:	4f e7       	ldi	r20, 0x7F	; 127
    1be6:	9f 77       	andi	r25, 0x7F	; 127
    1be8:	5f 93       	push	r21
    1bea:	4f 93       	push	r20
    1bec:	3f 93       	push	r19
    1bee:	2f 93       	push	r18
    1bf0:	9e d0       	rcall	.+316    	; 0x1d2e <log>
    1bf2:	2f 91       	pop	r18
    1bf4:	3f 91       	pop	r19
    1bf6:	4f 91       	pop	r20
    1bf8:	5f 91       	pop	r21
    1bfa:	4a df       	rcall	.-364    	; 0x1a90 <__mulsf3>
    1bfc:	05 c0       	rjmp	.+10     	; 0x1c08 <exp>
    1bfe:	19 f4       	brne	.+6      	; 0x1c06 <pow+0xa0>
    1c00:	0e f0       	brts	.+2      	; 0x1c04 <pow+0x9e>
    1c02:	f1 ce       	rjmp	.-542    	; 0x19e6 <__fp_inf>
    1c04:	3a cf       	rjmp	.-396    	; 0x1a7a <__fp_zero>
    1c06:	f5 ce       	rjmp	.-534    	; 0x19f2 <__fp_nan>

00001c08 <exp>:
    1c08:	1e df       	rcall	.-452    	; 0x1a46 <__fp_splitA>
    1c0a:	c8 f3       	brcs	.-14     	; 0x1bfe <pow+0x98>
    1c0c:	96 38       	cpi	r25, 0x86	; 134
    1c0e:	c0 f7       	brcc	.-16     	; 0x1c00 <pow+0x9a>
    1c10:	07 f8       	bld	r0, 7
    1c12:	0f 92       	push	r0
    1c14:	e8 94       	clt
    1c16:	2b e3       	ldi	r18, 0x3B	; 59
    1c18:	3a ea       	ldi	r19, 0xAA	; 170
    1c1a:	48 eb       	ldi	r20, 0xB8	; 184
    1c1c:	5f e7       	ldi	r21, 0x7F	; 127
    1c1e:	45 df       	rcall	.-374    	; 0x1aaa <__mulsf3_pse>
    1c20:	0f 92       	push	r0
    1c22:	0f 92       	push	r0
    1c24:	0f 92       	push	r0
    1c26:	4d b7       	in	r20, 0x3d	; 61
    1c28:	5e b7       	in	r21, 0x3e	; 62
    1c2a:	0f 92       	push	r0
    1c2c:	c0 d0       	rcall	.+384    	; 0x1dae <modf>
    1c2e:	ee e1       	ldi	r30, 0x1E	; 30
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	16 d0       	rcall	.+44     	; 0x1c60 <__fp_powser>
    1c34:	4f 91       	pop	r20
    1c36:	5f 91       	pop	r21
    1c38:	ef 91       	pop	r30
    1c3a:	ff 91       	pop	r31
    1c3c:	e5 95       	asr	r30
    1c3e:	ee 1f       	adc	r30, r30
    1c40:	ff 1f       	adc	r31, r31
    1c42:	49 f0       	breq	.+18     	; 0x1c56 <exp+0x4e>
    1c44:	fe 57       	subi	r31, 0x7E	; 126
    1c46:	e0 68       	ori	r30, 0x80	; 128
    1c48:	44 27       	eor	r20, r20
    1c4a:	ee 0f       	add	r30, r30
    1c4c:	44 1f       	adc	r20, r20
    1c4e:	fa 95       	dec	r31
    1c50:	e1 f7       	brne	.-8      	; 0x1c4a <exp+0x42>
    1c52:	41 95       	neg	r20
    1c54:	55 0b       	sbc	r21, r21
    1c56:	32 d0       	rcall	.+100    	; 0x1cbc <ldexp>
    1c58:	0f 90       	pop	r0
    1c5a:	07 fe       	sbrs	r0, 7
    1c5c:	26 c0       	rjmp	.+76     	; 0x1caa <inverse>
    1c5e:	08 95       	ret

00001c60 <__fp_powser>:
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	1f 93       	push	r17
    1c66:	0f 93       	push	r16
    1c68:	ff 92       	push	r15
    1c6a:	ef 92       	push	r14
    1c6c:	df 92       	push	r13
    1c6e:	7b 01       	movw	r14, r22
    1c70:	8c 01       	movw	r16, r24
    1c72:	68 94       	set
    1c74:	05 c0       	rjmp	.+10     	; 0x1c80 <__fp_powser+0x20>
    1c76:	da 2e       	mov	r13, r26
    1c78:	ef 01       	movw	r28, r30
    1c7a:	15 df       	rcall	.-470    	; 0x1aa6 <__mulsf3x>
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	e8 94       	clt
    1c80:	a5 91       	lpm	r26, Z+
    1c82:	25 91       	lpm	r18, Z+
    1c84:	35 91       	lpm	r19, Z+
    1c86:	45 91       	lpm	r20, Z+
    1c88:	55 91       	lpm	r21, Z+
    1c8a:	ae f3       	brts	.-22     	; 0x1c76 <__fp_powser+0x16>
    1c8c:	ef 01       	movw	r28, r30
    1c8e:	c2 dd       	rcall	.-1148   	; 0x1814 <__addsf3x>
    1c90:	fe 01       	movw	r30, r28
    1c92:	97 01       	movw	r18, r14
    1c94:	a8 01       	movw	r20, r16
    1c96:	da 94       	dec	r13
    1c98:	79 f7       	brne	.-34     	; 0x1c78 <__fp_powser+0x18>
    1c9a:	df 90       	pop	r13
    1c9c:	ef 90       	pop	r14
    1c9e:	ff 90       	pop	r15
    1ca0:	0f 91       	pop	r16
    1ca2:	1f 91       	pop	r17
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <inverse>:
    1caa:	9b 01       	movw	r18, r22
    1cac:	ac 01       	movw	r20, r24
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	80 e8       	ldi	r24, 0x80	; 128
    1cb4:	9f e3       	ldi	r25, 0x3F	; 63
    1cb6:	ae c0       	rjmp	.+348    	; 0x1e14 <__divsf3>
    1cb8:	96 ce       	rjmp	.-724    	; 0x19e6 <__fp_inf>
    1cba:	14 c1       	rjmp	.+552    	; 0x1ee4 <__fp_mpack>

00001cbc <ldexp>:
    1cbc:	c4 de       	rcall	.-632    	; 0x1a46 <__fp_splitA>
    1cbe:	e8 f3       	brcs	.-6      	; 0x1cba <inverse+0x10>
    1cc0:	99 23       	and	r25, r25
    1cc2:	d9 f3       	breq	.-10     	; 0x1cba <inverse+0x10>
    1cc4:	94 0f       	add	r25, r20
    1cc6:	51 1d       	adc	r21, r1
    1cc8:	bb f3       	brvs	.-18     	; 0x1cb8 <inverse+0xe>
    1cca:	91 50       	subi	r25, 0x01	; 1
    1ccc:	50 40       	sbci	r21, 0x00	; 0
    1cce:	94 f0       	brlt	.+36     	; 0x1cf4 <ldexp+0x38>
    1cd0:	59 f0       	breq	.+22     	; 0x1ce8 <ldexp+0x2c>
    1cd2:	88 23       	and	r24, r24
    1cd4:	32 f0       	brmi	.+12     	; 0x1ce2 <ldexp+0x26>
    1cd6:	66 0f       	add	r22, r22
    1cd8:	77 1f       	adc	r23, r23
    1cda:	88 1f       	adc	r24, r24
    1cdc:	91 50       	subi	r25, 0x01	; 1
    1cde:	50 40       	sbci	r21, 0x00	; 0
    1ce0:	c1 f7       	brne	.-16     	; 0x1cd2 <ldexp+0x16>
    1ce2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ce4:	51 05       	cpc	r21, r1
    1ce6:	44 f7       	brge	.-48     	; 0x1cb8 <inverse+0xe>
    1ce8:	88 0f       	add	r24, r24
    1cea:	91 1d       	adc	r25, r1
    1cec:	96 95       	lsr	r25
    1cee:	87 95       	ror	r24
    1cf0:	97 f9       	bld	r25, 7
    1cf2:	08 95       	ret
    1cf4:	5f 3f       	cpi	r21, 0xFF	; 255
    1cf6:	ac f0       	brlt	.+42     	; 0x1d22 <ldexp+0x66>
    1cf8:	98 3e       	cpi	r25, 0xE8	; 232
    1cfa:	9c f0       	brlt	.+38     	; 0x1d22 <ldexp+0x66>
    1cfc:	bb 27       	eor	r27, r27
    1cfe:	86 95       	lsr	r24
    1d00:	77 95       	ror	r23
    1d02:	67 95       	ror	r22
    1d04:	b7 95       	ror	r27
    1d06:	08 f4       	brcc	.+2      	; 0x1d0a <ldexp+0x4e>
    1d08:	b1 60       	ori	r27, 0x01	; 1
    1d0a:	93 95       	inc	r25
    1d0c:	c1 f7       	brne	.-16     	; 0x1cfe <ldexp+0x42>
    1d0e:	bb 0f       	add	r27, r27
    1d10:	58 f7       	brcc	.-42     	; 0x1ce8 <ldexp+0x2c>
    1d12:	11 f4       	brne	.+4      	; 0x1d18 <ldexp+0x5c>
    1d14:	60 ff       	sbrs	r22, 0
    1d16:	e8 cf       	rjmp	.-48     	; 0x1ce8 <ldexp+0x2c>
    1d18:	6f 5f       	subi	r22, 0xFF	; 255
    1d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d20:	e3 cf       	rjmp	.-58     	; 0x1ce8 <ldexp+0x2c>
    1d22:	ac ce       	rjmp	.-680    	; 0x1a7c <__fp_szero>
    1d24:	0e f0       	brts	.+2      	; 0x1d28 <ldexp+0x6c>
    1d26:	de c0       	rjmp	.+444    	; 0x1ee4 <__fp_mpack>
    1d28:	64 ce       	rjmp	.-824    	; 0x19f2 <__fp_nan>
    1d2a:	68 94       	set
    1d2c:	5c ce       	rjmp	.-840    	; 0x19e6 <__fp_inf>

00001d2e <log>:
    1d2e:	8b de       	rcall	.-746    	; 0x1a46 <__fp_splitA>
    1d30:	c8 f3       	brcs	.-14     	; 0x1d24 <ldexp+0x68>
    1d32:	99 23       	and	r25, r25
    1d34:	d1 f3       	breq	.-12     	; 0x1d2a <ldexp+0x6e>
    1d36:	c6 f3       	brts	.-16     	; 0x1d28 <ldexp+0x6c>
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	1f 93       	push	r17
    1d3e:	0f 93       	push	r16
    1d40:	ff 92       	push	r15
    1d42:	c9 2f       	mov	r28, r25
    1d44:	dd 27       	eor	r29, r29
    1d46:	88 23       	and	r24, r24
    1d48:	2a f0       	brmi	.+10     	; 0x1d54 <log+0x26>
    1d4a:	21 97       	sbiw	r28, 0x01	; 1
    1d4c:	66 0f       	add	r22, r22
    1d4e:	77 1f       	adc	r23, r23
    1d50:	88 1f       	adc	r24, r24
    1d52:	da f7       	brpl	.-10     	; 0x1d4a <log+0x1c>
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e8       	ldi	r20, 0x80	; 128
    1d5a:	5f eb       	ldi	r21, 0xBF	; 191
    1d5c:	9f e3       	ldi	r25, 0x3F	; 63
    1d5e:	88 39       	cpi	r24, 0x98	; 152
    1d60:	20 f0       	brcs	.+8      	; 0x1d6a <log+0x3c>
    1d62:	80 3e       	cpi	r24, 0xE0	; 224
    1d64:	30 f0       	brcs	.+12     	; 0x1d72 <log+0x44>
    1d66:	21 96       	adiw	r28, 0x01	; 1
    1d68:	8f 77       	andi	r24, 0x7F	; 127
    1d6a:	43 dd       	rcall	.-1402   	; 0x17f2 <__addsf3>
    1d6c:	e6 e4       	ldi	r30, 0x46	; 70
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	03 c0       	rjmp	.+6      	; 0x1d78 <log+0x4a>
    1d72:	3f dd       	rcall	.-1410   	; 0x17f2 <__addsf3>
    1d74:	e3 e7       	ldi	r30, 0x73	; 115
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	73 df       	rcall	.-282    	; 0x1c60 <__fp_powser>
    1d7a:	8b 01       	movw	r16, r22
    1d7c:	be 01       	movw	r22, r28
    1d7e:	ec 01       	movw	r28, r24
    1d80:	fb 2e       	mov	r15, r27
    1d82:	6f 57       	subi	r22, 0x7F	; 127
    1d84:	71 09       	sbc	r23, r1
    1d86:	75 95       	asr	r23
    1d88:	77 1f       	adc	r23, r23
    1d8a:	88 0b       	sbc	r24, r24
    1d8c:	99 0b       	sbc	r25, r25
    1d8e:	cc dd       	rcall	.-1128   	; 0x1928 <__floatsisf>
    1d90:	28 e1       	ldi	r18, 0x18	; 24
    1d92:	32 e7       	ldi	r19, 0x72	; 114
    1d94:	41 e3       	ldi	r20, 0x31	; 49
    1d96:	5f e3       	ldi	r21, 0x3F	; 63
    1d98:	86 de       	rcall	.-756    	; 0x1aa6 <__mulsf3x>
    1d9a:	af 2d       	mov	r26, r15
    1d9c:	98 01       	movw	r18, r16
    1d9e:	ae 01       	movw	r20, r28
    1da0:	ff 90       	pop	r15
    1da2:	0f 91       	pop	r16
    1da4:	1f 91       	pop	r17
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	34 dd       	rcall	.-1432   	; 0x1814 <__addsf3x>
    1dac:	33 ce       	rjmp	.-922    	; 0x1a14 <__fp_round>

00001dae <modf>:
    1dae:	fa 01       	movw	r30, r20
    1db0:	dc 01       	movw	r26, r24
    1db2:	aa 0f       	add	r26, r26
    1db4:	bb 1f       	adc	r27, r27
    1db6:	9b 01       	movw	r18, r22
    1db8:	ac 01       	movw	r20, r24
    1dba:	bf 57       	subi	r27, 0x7F	; 127
    1dbc:	28 f4       	brcc	.+10     	; 0x1dc8 <modf+0x1a>
    1dbe:	22 27       	eor	r18, r18
    1dc0:	33 27       	eor	r19, r19
    1dc2:	44 27       	eor	r20, r20
    1dc4:	50 78       	andi	r21, 0x80	; 128
    1dc6:	1f c0       	rjmp	.+62     	; 0x1e06 <modf+0x58>
    1dc8:	b7 51       	subi	r27, 0x17	; 23
    1dca:	88 f4       	brcc	.+34     	; 0x1dee <modf+0x40>
    1dcc:	ab 2f       	mov	r26, r27
    1dce:	00 24       	eor	r0, r0
    1dd0:	46 95       	lsr	r20
    1dd2:	37 95       	ror	r19
    1dd4:	27 95       	ror	r18
    1dd6:	01 1c       	adc	r0, r1
    1dd8:	a3 95       	inc	r26
    1dda:	d2 f3       	brmi	.-12     	; 0x1dd0 <modf+0x22>
    1ddc:	00 20       	and	r0, r0
    1dde:	69 f0       	breq	.+26     	; 0x1dfa <modf+0x4c>
    1de0:	22 0f       	add	r18, r18
    1de2:	33 1f       	adc	r19, r19
    1de4:	44 1f       	adc	r20, r20
    1de6:	b3 95       	inc	r27
    1de8:	da f3       	brmi	.-10     	; 0x1de0 <modf+0x32>
    1dea:	0d d0       	rcall	.+26     	; 0x1e06 <modf+0x58>
    1dec:	01 cd       	rjmp	.-1534   	; 0x17f0 <__subsf3>
    1dee:	61 30       	cpi	r22, 0x01	; 1
    1df0:	71 05       	cpc	r23, r1
    1df2:	a0 e8       	ldi	r26, 0x80	; 128
    1df4:	8a 07       	cpc	r24, r26
    1df6:	b9 46       	sbci	r27, 0x69	; 105
    1df8:	30 f4       	brcc	.+12     	; 0x1e06 <modf+0x58>
    1dfa:	9b 01       	movw	r18, r22
    1dfc:	ac 01       	movw	r20, r24
    1dfe:	66 27       	eor	r22, r22
    1e00:	77 27       	eor	r23, r23
    1e02:	88 27       	eor	r24, r24
    1e04:	90 78       	andi	r25, 0x80	; 128
    1e06:	30 96       	adiw	r30, 0x00	; 0
    1e08:	21 f0       	breq	.+8      	; 0x1e12 <modf+0x64>
    1e0a:	20 83       	st	Z, r18
    1e0c:	31 83       	std	Z+1, r19	; 0x01
    1e0e:	42 83       	std	Z+2, r20	; 0x02
    1e10:	53 83       	std	Z+3, r21	; 0x03
    1e12:	08 95       	ret

00001e14 <__divsf3>:
    1e14:	0c d0       	rcall	.+24     	; 0x1e2e <__divsf3x>
    1e16:	fe cd       	rjmp	.-1028   	; 0x1a14 <__fp_round>
    1e18:	f6 dd       	rcall	.-1044   	; 0x1a06 <__fp_pscB>
    1e1a:	40 f0       	brcs	.+16     	; 0x1e2c <__divsf3+0x18>
    1e1c:	ed dd       	rcall	.-1062   	; 0x19f8 <__fp_pscA>
    1e1e:	30 f0       	brcs	.+12     	; 0x1e2c <__divsf3+0x18>
    1e20:	21 f4       	brne	.+8      	; 0x1e2a <__divsf3+0x16>
    1e22:	5f 3f       	cpi	r21, 0xFF	; 255
    1e24:	19 f0       	breq	.+6      	; 0x1e2c <__divsf3+0x18>
    1e26:	df cd       	rjmp	.-1090   	; 0x19e6 <__fp_inf>
    1e28:	51 11       	cpse	r21, r1
    1e2a:	28 ce       	rjmp	.-944    	; 0x1a7c <__fp_szero>
    1e2c:	e2 cd       	rjmp	.-1084   	; 0x19f2 <__fp_nan>

00001e2e <__divsf3x>:
    1e2e:	03 de       	rcall	.-1018   	; 0x1a36 <__fp_split3>
    1e30:	98 f3       	brcs	.-26     	; 0x1e18 <__divsf3+0x4>

00001e32 <__divsf3_pse>:
    1e32:	99 23       	and	r25, r25
    1e34:	c9 f3       	breq	.-14     	; 0x1e28 <__divsf3+0x14>
    1e36:	55 23       	and	r21, r21
    1e38:	b1 f3       	breq	.-20     	; 0x1e26 <__divsf3+0x12>
    1e3a:	95 1b       	sub	r25, r21
    1e3c:	55 0b       	sbc	r21, r21
    1e3e:	bb 27       	eor	r27, r27
    1e40:	aa 27       	eor	r26, r26
    1e42:	62 17       	cp	r22, r18
    1e44:	73 07       	cpc	r23, r19
    1e46:	84 07       	cpc	r24, r20
    1e48:	38 f0       	brcs	.+14     	; 0x1e58 <__divsf3_pse+0x26>
    1e4a:	9f 5f       	subi	r25, 0xFF	; 255
    1e4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e4e:	22 0f       	add	r18, r18
    1e50:	33 1f       	adc	r19, r19
    1e52:	44 1f       	adc	r20, r20
    1e54:	aa 1f       	adc	r26, r26
    1e56:	a9 f3       	breq	.-22     	; 0x1e42 <__divsf3_pse+0x10>
    1e58:	33 d0       	rcall	.+102    	; 0x1ec0 <__divsf3_pse+0x8e>
    1e5a:	0e 2e       	mov	r0, r30
    1e5c:	3a f0       	brmi	.+14     	; 0x1e6c <__divsf3_pse+0x3a>
    1e5e:	e0 e8       	ldi	r30, 0x80	; 128
    1e60:	30 d0       	rcall	.+96     	; 0x1ec2 <__divsf3_pse+0x90>
    1e62:	91 50       	subi	r25, 0x01	; 1
    1e64:	50 40       	sbci	r21, 0x00	; 0
    1e66:	e6 95       	lsr	r30
    1e68:	00 1c       	adc	r0, r0
    1e6a:	ca f7       	brpl	.-14     	; 0x1e5e <__divsf3_pse+0x2c>
    1e6c:	29 d0       	rcall	.+82     	; 0x1ec0 <__divsf3_pse+0x8e>
    1e6e:	fe 2f       	mov	r31, r30
    1e70:	27 d0       	rcall	.+78     	; 0x1ec0 <__divsf3_pse+0x8e>
    1e72:	66 0f       	add	r22, r22
    1e74:	77 1f       	adc	r23, r23
    1e76:	88 1f       	adc	r24, r24
    1e78:	bb 1f       	adc	r27, r27
    1e7a:	26 17       	cp	r18, r22
    1e7c:	37 07       	cpc	r19, r23
    1e7e:	48 07       	cpc	r20, r24
    1e80:	ab 07       	cpc	r26, r27
    1e82:	b0 e8       	ldi	r27, 0x80	; 128
    1e84:	09 f0       	breq	.+2      	; 0x1e88 <__divsf3_pse+0x56>
    1e86:	bb 0b       	sbc	r27, r27
    1e88:	80 2d       	mov	r24, r0
    1e8a:	bf 01       	movw	r22, r30
    1e8c:	ff 27       	eor	r31, r31
    1e8e:	93 58       	subi	r25, 0x83	; 131
    1e90:	5f 4f       	sbci	r21, 0xFF	; 255
    1e92:	2a f0       	brmi	.+10     	; 0x1e9e <__divsf3_pse+0x6c>
    1e94:	9e 3f       	cpi	r25, 0xFE	; 254
    1e96:	51 05       	cpc	r21, r1
    1e98:	68 f0       	brcs	.+26     	; 0x1eb4 <__divsf3_pse+0x82>
    1e9a:	a5 cd       	rjmp	.-1206   	; 0x19e6 <__fp_inf>
    1e9c:	ef cd       	rjmp	.-1058   	; 0x1a7c <__fp_szero>
    1e9e:	5f 3f       	cpi	r21, 0xFF	; 255
    1ea0:	ec f3       	brlt	.-6      	; 0x1e9c <__divsf3_pse+0x6a>
    1ea2:	98 3e       	cpi	r25, 0xE8	; 232
    1ea4:	dc f3       	brlt	.-10     	; 0x1e9c <__divsf3_pse+0x6a>
    1ea6:	86 95       	lsr	r24
    1ea8:	77 95       	ror	r23
    1eaa:	67 95       	ror	r22
    1eac:	b7 95       	ror	r27
    1eae:	f7 95       	ror	r31
    1eb0:	9f 5f       	subi	r25, 0xFF	; 255
    1eb2:	c9 f7       	brne	.-14     	; 0x1ea6 <__divsf3_pse+0x74>
    1eb4:	88 0f       	add	r24, r24
    1eb6:	91 1d       	adc	r25, r1
    1eb8:	96 95       	lsr	r25
    1eba:	87 95       	ror	r24
    1ebc:	97 f9       	bld	r25, 7
    1ebe:	08 95       	ret
    1ec0:	e1 e0       	ldi	r30, 0x01	; 1
    1ec2:	66 0f       	add	r22, r22
    1ec4:	77 1f       	adc	r23, r23
    1ec6:	88 1f       	adc	r24, r24
    1ec8:	bb 1f       	adc	r27, r27
    1eca:	62 17       	cp	r22, r18
    1ecc:	73 07       	cpc	r23, r19
    1ece:	84 07       	cpc	r24, r20
    1ed0:	ba 07       	cpc	r27, r26
    1ed2:	20 f0       	brcs	.+8      	; 0x1edc <__divsf3_pse+0xaa>
    1ed4:	62 1b       	sub	r22, r18
    1ed6:	73 0b       	sbc	r23, r19
    1ed8:	84 0b       	sbc	r24, r20
    1eda:	ba 0b       	sbc	r27, r26
    1edc:	ee 1f       	adc	r30, r30
    1ede:	88 f7       	brcc	.-30     	; 0x1ec2 <__divsf3_pse+0x90>
    1ee0:	e0 95       	com	r30
    1ee2:	08 95       	ret

00001ee4 <__fp_mpack>:
    1ee4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ee6:	31 f0       	breq	.+12     	; 0x1ef4 <__fp_mpack_finite+0xc>

00001ee8 <__fp_mpack_finite>:
    1ee8:	91 50       	subi	r25, 0x01	; 1
    1eea:	20 f4       	brcc	.+8      	; 0x1ef4 <__fp_mpack_finite+0xc>
    1eec:	87 95       	ror	r24
    1eee:	77 95       	ror	r23
    1ef0:	67 95       	ror	r22
    1ef2:	b7 95       	ror	r27
    1ef4:	88 0f       	add	r24, r24
    1ef6:	91 1d       	adc	r25, r1
    1ef8:	96 95       	lsr	r25
    1efa:	87 95       	ror	r24
    1efc:	97 f9       	bld	r25, 7
    1efe:	08 95       	ret

00001f00 <__mulhi3>:
    1f00:	00 24       	eor	r0, r0
    1f02:	55 27       	eor	r21, r21
    1f04:	04 c0       	rjmp	.+8      	; 0x1f0e <__mulhi3+0xe>
    1f06:	08 0e       	add	r0, r24
    1f08:	59 1f       	adc	r21, r25
    1f0a:	88 0f       	add	r24, r24
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	29 f0       	breq	.+10     	; 0x1f1c <__mulhi3+0x1c>
    1f12:	76 95       	lsr	r23
    1f14:	67 95       	ror	r22
    1f16:	b8 f3       	brcs	.-18     	; 0x1f06 <__mulhi3+0x6>
    1f18:	71 05       	cpc	r23, r1
    1f1a:	b9 f7       	brne	.-18     	; 0x1f0a <__mulhi3+0xa>
    1f1c:	80 2d       	mov	r24, r0
    1f1e:	95 2f       	mov	r25, r21
    1f20:	08 95       	ret

00001f22 <__tablejump2__>:
    1f22:	ee 0f       	add	r30, r30
    1f24:	ff 1f       	adc	r31, r31
    1f26:	05 90       	lpm	r0, Z+
    1f28:	f4 91       	lpm	r31, Z
    1f2a:	e0 2d       	mov	r30, r0
    1f2c:	09 94       	ijmp

00001f2e <_exit>:
    1f2e:	f8 94       	cli

00001f30 <__stop_program>:
    1f30:	ff cf       	rjmp	.-2      	; 0x1f30 <__stop_program>
